library maxlik;
maxset;
cls;
format /m1/rzt 1,6;

/* Generates Halton draws */ 
allHaltDraws = HaltonSequence(3000*300+10,50);
abscissae_trunc  = 1;
_halt_maxdraws   = rows(allHaltDraws) ;
/* Number of halton draws to use inside GHK simulator for evaluating MVNCD function.
   We recommend 200 for a MVNCDF of dimension less than or equal to 10*/
_halt_numdraws   = 200;      
 nrep            = _halt_numdraws;
 
MACML = 1;   /* Make this 1, if we wish to use Joe-Solow method for evaluation of multivariate normal cumulative distribution function inside likelihood function */
GHK   = 0;   /* Make this 1, if we wish to use GHK simulator for evaluation of multivariate normal cumulative distribution function inside likelihood function    */

if((MACML+GHK)>1);
    "Only one method can be active";
    stop;
endif;

load Main_data[5298,36] = C:/gauss18/ghdm/data.csv;
clearg All_Nominal;

Drive = "C:/";                                               
runpath = Drive $+ "gauss18/ghdm/";                   /* Location for generation of temparory files */
outpath = Drive $+ "gauss18/ghdm/";                   /* Location for estimation result file */

nind = 5298;                                                 /* Total number of observation */
nobs = nind;
_row = nobs;


nvar_latent = 3;                  /* Total Number of latent variables in the structural equation */

nvar_mear_cont  = 0;              /* Total Number of continous variables in the measurement equation */  
nvar_mear_ordl  = 0;              /* Total Number of ordinal variables in the measurement equation */
nvar_mear_count = 1;              /* Total Number of count variables in the measurement equation */

nvar_mear = nvar_mear_cont + nvar_mear_ordl + nvar_mear_count;
nvar_ogc = nvar_mear_ordl + nvar_mear_count;

All_Nominal = {}; 
/*------------------------------------------------------------------------------------------------------------------------
                     Specify the Number of Options for each Nominal Variable.
if you have at least one nominal variable with three or more options, you must provide the number of options correponding to that nominal variable first followed by 
other nominal variables. That is, you must first provides the number of options correponding to nominal variables with three or more options followed by binary unordered variables. 

If you do not have any nominal variable with three or more options, simply provide the number of options for each of the binary unordered variable.
--------------------------------------------------------------------------------------------------------------------------*/
All_Nominal = All_Nominal ~ (3~2);       /* Read the comment above to change this variable. Should be a row vector of size equal to number of nominal variables. */                  
/****************************************************************************************************************************/
num_nominal = rows(All_Nominal');
Num_MNP     = sumr(All_Nominal .> 2);

Nominal_csum    = cumsumc(All_Nominal');
Alternative_all = sumc(All_Nominal');

M_mat_Track         = All_Nominal - 1;
M_mat_Track_csum    = cumsumc(M_mat_Track');

negative_infinity = -100;
positive_infinity = 100;
negative_infinity_d = 0;
positive_infinity_d = 0;

/*------------------------------------------------------------------------------------------------------------------------
                     Specify the Number of categories for each of the ordinal Variable.
if you have ordinal variables in your measurement equation, provide the number of categories for each of the ordinal variable, otherwise 
leave the specification as it is. 
--------------------------------------------------------------------------------------------------------------------------*/

if(nvar_mear_ordl > 0);
   num_ordl_cat = { 3, 3, 3 };                          /* Read the comment above to change this variable. Should be a column vector of size equal to number of ordinal variables. */
   num_ordl_cat = num_ordl_cat[1:nvar_mear_ordl];
   num_ordl_cat_req1 = num_ordl_cat - 2;
   num_ordl_cat_req = sumc(num_ordl_cat_req1);
   num_ordl_cat_req_csum = cumsumc(num_ordl_cat_req1);
   Highest_scale = maxc(num_ordl_cat_req1);
endif;

/*****************************************************************************
                  Estimation Settings 
*****************************************************************************/
Com_ogc_r1     = numCombinations(nvar_ogc,2);
Com_ogcn_r1    = nvar_ogc*num_nominal;
if(num_nominal > 1);
Com_nn_r1      = numCombinations(num_nominal,2);
endif;

H_Err_ogcn1   = ((maxc(All_Nominal')-1)*(maxc(All_Nominal')))/2;
Com_ogcn_c1   = 2*(H_Err_ogcn1 + maxc(All_Nominal') + 1);

if(num_nominal > 1);
H_Err_nn1      = (2*((maxc(All_Nominal')-1))*(2*(maxc(All_Nominal')-1)))/2;
Com_nn_c1      = H_Err_nn1 + maxc(All_Nominal') + 1;
endif;

if(nvar_mear_cont > 0);
	cc_elem1   = nvar_mear_cont;
	cc_eler1   = cc_elem1*(cc_elem1+1)*0.5;
	cc_elet1   = cc_elem1 + cc_eler1 ;    
    h_cc_c     = cc_elet1*(cc_elet1+1)*0.5 ;	
endif;

ogcn_elem   = maxc(All_Nominal');
ogcn_eler   = ogcn_elem*(ogcn_elem-1)*0.5;
ogcn_elet   = ogcn_elem + ogcn_eler;
h_ogcn_c    = 2*ogcn_elet*(ogcn_elet+1)*0.5;


nn_elem   = (maxc(All_Nominal')-1)*2;
nn_eler   = nn_elem*(nn_elem-1)*0.5;
nn_elet   = nn_elem + nn_eler;
h_nn_c    = nn_elet*(nn_elet+1)*0.5;

gradient_limit       = 1e-04;  /* Gradient limit for convergence */
Force_converegnce    = 1;      /* Make this 1, if you want to stop the estimation based on maximum number of iteration */
iteration_limit      = 65;    /* maximum number of iteration */
upper_limit          = 1e-05;   /* Upper probability limit */
MACML_seed = {300000,300010,300020,300030,300040,300050,300060,300070,300080,300090};

//-----------------------------------------------------------------------------------------------------------------------------
  dataset = runpath $+ "data.dat";
  dataset_out = runpath $+ "myfile_mod.txt";
  
  //vnames = { edu male income child adult immg tenure urban vehicle cdist PNM PPT PMT Res_loc Com_mode uno sero };
  vnames = { choice	nb_voit	tr_pass	nep1	nep4	nep5	pol1	pol3	pol4	pol5	pol6	pbvoit1	pbvoit3	pbvoit4	pbvoit5	instr1	instr5	instr7	instr8	instr9	instr12	temps1	temps2	temps3	temps4	temps5	temps6	temps7	sent1	sent2	sent3	sent4	sent5	sent6	sent7	sent8	sero	uno };
  ntot = cols(vnames);
  
    fin = 0;
	create fin = ^dataset with ^vnames,ntot,8,8;
	obs = 0; nr = 1;
	do while obs < 1;
		dat = {};
		dat = dat ~ Main_data[obs+1,.] ;
		  if writer(fin,dat) /= nr;
			 print "Disk Full"; end;
		  endif;
	   obs= obs+nr;
	endo;
	closeall fin;
	
	
call initalize(dataset);

proc(0)= initalize(dataset);
     local add_data,fout,y,fpin,nin,outdata;
	 clear fin;
     open fin = ^dataset;
     fpin = typef(fin);
     nin = rowsf(fin);
     do until eof(fin);
       add_data = readr(fin,1);
     endo;
    if fin > 0; fin = close(fin); endif;
     outdata = add_data;
     create fout = ^dataset with ^vnames,0,8;
     y = writer(fout,outdata);   
     if fout > 0;fout = close(fout);endif; 
 endp;
 
open f1 = ^dataset;          
assign = readr(f1,nobs);
outwidth 200;
output file = ^dataset_out;     
output reset;
screen off;
print assign;
output off;
screen on;
 
 logfile= outpath $+ "Output" $+ "_" $+ ".txt";
 OUTPUT FILE= ^logfile ON;outwidth 250;format /m1 /rzt 1,15; OUTPUT reset;
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Position of UNO variable (i.e., the column of ones) in data set. 
   The dataset should consist of a column of ones.
   Modify if the label (in double-quotes) of the column of ones in your dataset is different from "uno"  */

{ unov,ivuno } = indices(dataset,"uno");

/* Position of SERO variable (i.e., the column of zeros) in data set. 
   The dataset should consist of a column of zeros.
   Modify if the label (in double-quotes) of the column of zeros in your dataset is different from "sero"  */

{ serov,ivsero } = indices(dataset,"sero");

/*Latent Variable Specification*/ 
//let GLP  = { edu  male  sero  sero     };
//let TFA  = { sero sero  male  income   };
let ENV  = { nep1	nep4	nep5	pol1	pol3	pol4	pol5	pol6	pbvoit1	pbvoit3	pbvoit4	pbvoit5 };
let MCU  = { instr1	instr5	instr7	instr8	instr9	instr12 }; 
let UTT  = { temps1	temps2	temps3	temps4	temps5	temps6	temps7	sent1	sent2	sent3	sent4	sent5	sent6	sent7	sent8 };

{ p1,ivlt1 } = indices(dataset,ENV');
{ p2,ivlt2 } = indices(dataset,MCU');
{ p2,ivlt3 } = indices(dataset,UTT');

 ivgenvl = ivlt1' ~ ivlt2' ~ ivlt3' ;
 nvarml = cols(ENV);
 
 /*Measurement Equation Specification*/ 
 /* The dependent variables should be in the following order : Continous variables, Ordinal Variables, and Count Variables.
    if your dataset do not contain any of the above mentioned variable, then start the ordering from the next mentioned variable.
    For example: if your dataset do not contain Continous and ordinal variable, then start the ordering from count variables. */

 //let CMD  = { uno  immg   urban  sero  sero   sero  sero  sero   sero  sero    sero   sero  sero  };
  
// let NCNM = { sero sero   sero   uno   child  urban sero  sero   sero  sero    sero   sero  sero  };
// let NCPT = { sero sero   sero   sero  sero   sero  uno   urban  sero  sero    sero   sero  sero  };
// let NCMT = { sero sero   sero   sero  sero   sero  sero  sero   uno   child   adult  sero  sero  };
 
 let VehO = { sero sero   sero   sero  sero   sero  sero   sero   sero  sero   sero   uno   urban };
 
 { q1,iclt1 } = indices(dataset,CMD');
  
 { q2,iclt2 } = indices(dataset,NCNM');
 { q3,iclt3 } = indices(dataset,NCPT');
 { q4,iclt4 } = indices(dataset,NCMT');
 
 { q5,iclt5 } = indices(dataset,VehO');
  
 ivgenvC = iclt1' ~ iclt2' ~ iclt3' ~ iclt4' ~ iclt5' ;
 nvarmC = cols(CMD);
 
 /* Latent Variable Loading on non-nominal variables in the Measurement Equation. Should be of size nvar_mear X nvar_latent.
    Place 1 for loading a latent variable and 0 for no-loading. For example: a value of 1 in position (1,2) indicates that 2nd latent variable (travel-freedom affinity) loads on first
    non-nominal variable (continuous variable:commute distance)*/
    ME_Matrix = { 0 1,
	                1 0,
				          1 0,
				          0 1,
				          1 1 } ;
				  
	ME_Element = sumc(sumc(ME_Matrix));
 
 
 /* Specify the column names of each non-nominal variables containing the value of outcomes in the order specified above.
    For the continuous variables, it should contain continous observed value such as commute distance. 
    For ordered variables, it should contain the category reported by the respondent. For example: if an item is measured on a 5-point scale and the respondent chooses category 3
    then the column should conatin a value of 3 correponding to the row indicating observations from the respondent.
    For the count variable, it should contain the observed count value such as auto-ownership.  */
  { c1,C1ID }   = indices(dataset,"cdist");   
  { c2,O1ID }   = indices(dataset,"PNM");
  { c3,O2ID }   = indices(dataset,"PPT");
  { c5,O3ID }   = indices(dataset,"PMT");
  { c6,CN1ID }   = indices(dataset,"vehicle");
  
  

/* if there are continuous variables in the measurment equation, specify their column index numbers.
   Even, If your dataset don't contain any continous variable, specify the index of any exisitng dependent variable. 
   Leaving this variable empty will cause an error. This is only to avoid the initial error. It doesn't affect the estimation. 
   The variables are considered appropriately based on number of continous, ordinal, grouped, and count specified at the beginning of the program.
   Do the same for other variables.*/
 
 /* if there are continous variables in the measurment equation, specify their column index numbers    */ 
 if(nvar_mear_cont > 0);
    Continous_Index = C1ID ; 
 endif;
 
 /* if there are ordinal variables in the measurment equation, specify their column index numbers    */
 if(nvar_mear_ordl > 0);
    Ordinal_Index = O1ID ~ O2ID ~ O3ID ;
 endif;
 
 /* if there are count variables in the measurment equation, specify their column index numbers    */
 if(nvar_mear_count > 0);
    Count_Index  = CN1ID ;
    threshCountMax_Global = (maxc(maxc(Main_data[.,Count_Index])));
 endif;
 
/**************************************************************************************************************************
  Choice Model Specification 
  The unordered variables should be in the following order : (1) Specify all the nominal variables (options > 2)
    (2) Specify all the binary outcomes (alternatives == 2). 
    if you don't have any nominal variable with three or more options, then simply provide the specification for all the binary outcomes.	
	For example: the current code has 2 unordered variables both with number of options equal to 3.
  Please note that the ordering of utility specification of nominal variables should be same as the ordering of nominal variables
  in the variable 'All_Nominal'  
*****************************************************************************************************************************/ 
 
 /* Alternative 1 utility specification */
 let Rural    = { sero sero   sero   sero sero   sero   }; 
 let Urban    = { uno  immg  tenure  sero sero   sero   };
 let Suburban = { sero sero   sero   uno  child  adult  } ;
 
 /* Alternative 2 utility specification */
 let MT  = { sero sero  sero   sero  sero     sero };
 let PT  = { uno  immg  urban  sero  sero     sero };
 let NMT = { sero sero  sero   uno   vehicle  cdist };
 /*-----------------------------------------------------------------------------------------------------------------------------
   if you have any binary unordered variable, the utility specification should be in the following way:
   let Option1   = { sero  sero  sero   sero  sero   };
   let Option2   = { uno   S_hh  Nu_hh  DS_hh JN_hh  };
   the current specification indicates that the Option1 is trated as the base category and parameters are introduced in Option2.
 -------------------------------------------------------------------------------------------------------------------------------*/
 
 /**************************************************************************************************************************
  Loading of latent variables on the nominal variables
  The ordering of alternatives should be same as the ordering specified in Choice Model Specification (section just above it).
  Each loading specification is a row vector as shown below with a minimum size of 1 X nvar_latent (2 in this case) with no upper limit on maximum size.
  Then each block of 1 X nvar_latent consecutive elements specify the loading of a latent variable on the current alternative.
  For example: consider we have 2 latent variables and we wish to load both the latent variables on an alternative in addition to interact the 2nd latent variable with one of the
  exogenous variable (say tenure). To do so, one can write the specification as follows: let phi = { uno sero sero uno sero tenure }, where uno and sero are the column index for 1 and 0.
  Please note that one block of 1 X nvar_latent consecutive elements can only specify the loading of one and only one latent variable depending on the location of uno in the specification
  (i.e., in a block of 2 elements, a presence of uno in the position (1,1) indicates loading of 1st latent variable and (1,2) indicates loading of 2nd latent variable.
  In order to interact an exogenous variable with a latent variable, simply provide the column name of the exogenous variable in the specification at the position correponding to the 
  latent variable of interest. For example: in order to interact tenure with 2nd latent variable, we have specified tenure at position (1,2) in the 3rd block of 1 X nvar_latent elements.   
*****************************************************************************************************************************/
 /* Latent Variable Loading on Alternative 1 */
 let phi_1 = { sero sero };
 let phi_2 = { uno  sero };
 let phi_3 = { sero sero };
 
 /* Latent Variable Loading on Alternative 2 */
 let phi_4 = { sero uno  };
 let phi_5 = { uno  sero };
 let phi_6 = { uno  sero };
 
 /* Assigning column numbers to column names */
 { v1,ivat1 } = indices(dataset,Rural');
 { v2,ivat2 } = indices(dataset,Urban');
 { v3,ivat3 } = indices(dataset,Suburban');
 
 { v4,ivat4 } = indices(dataset,MT');
 { v5,ivat5 } = indices(dataset,PT');
 { v6,ivat6 } = indices(dataset,NMT');
 
 { p1,ivap1 } = indices(dataset,phi_1');
 { p2,ivap2 } = indices(dataset,phi_2');
 { p3,ivap3 } = indices(dataset,phi_3');
 
 { p4,ivap4 } = indices(dataset,phi_4');
 { p5,ivap5 } = indices(dataset,phi_5');
 { p6,ivap6 } = indices(dataset,phi_6');
  
 /* Packing choice model variables utility specification in a vector at a time */
 ivgenva1 = ivat1' ~ ivat2' ~ ivat3' ;
 ivgenva2 = ivat4' ~ ivat5' ~ ivat6' ;
 
 ivgephi1 = ivap1' ~ ivap2' ~ ivap3' ;
 ivgephi2 = ivap4' ~ ivap5' ~ ivap6' ;
 
 /* The ordering of column indicators of utility specification should be same as the ordering provided in the variable 'All_Nominal' */
 ivgenva = ivgenva1 ~ ivgenva2 ;
 ivgephi = ivgephi1 ~ ivgephi2 ;
 
 /* Total number of variables in the utility specification for each of the unordered variables */
 nvarma1 = cols(Rural);
 nvarma2 = cols(MT);
  
 nvarma_all = {};
 /* The ordering of column indicators of utility specification should be same as the ordering provided in the variable 'All_Nominal' */
 nvarma_all = nvarma_all ~(nvarma1~nvarma2);
 nvarma_csum = cumsumc(nvarma_all');
 nvarma = sumr(nvarma_all);
 
 N_mat      = {};
 N_mat      = N_mat | cols(phi_1)/nvar_latent | cols(phi_2)/nvar_latent | cols(phi_3)/nvar_latent | cols(phi_4)/nvar_latent | cols(phi_5)/nvar_latent | cols(phi_6)/nvar_latent ;
 N_mat_csum = cumsumc(N_mat);
 TN_mat     = sumc(N_mat);
 
 /* Specify the column names containing the outcome for nominal variable in the order described earlier 
    The chosen alternative should be indicated by its position in the Choice Model Specification. For example: if a respondent lives in a rural area, the column will have a value of 1.
    Similarly, if respondent uses non-motorized transport, it should have a value of 3.*/
 { ichro1, ichosen1 } = indices(dataset,"Res_loc");
 { ichro2, ichosen2 } = indices(dataset,"Com_mode");
 
 Altchm = ichosen1 ~ ichosen2 ;
 
 /*----------------------------Parameter Starting Values---------------------------------------------------------------------------------------*/
 /* The name of the parameters are same as the notations used in the main paper */
  
  /*Structural Equation exogenous variables*/
  Alpha = { 0.8 -0.3 0.2 0.5 } ;
  Alpha = Alpha';
  
  /*Structural Equation correlation matrix. Only specify the unique elements without insering any commas*/
  Beta_corr = {  1.00 
				-0.60 1.00 } ;
				 
				 
  Beta_corr = xpnd(Beta_corr');
  
  /*Measurement Equation exogenous variables correponding to non-nominal variables */  
  Gamma_Coeff = { 1.0 0.5 -0.3 1.0 -0.2 0.6 1.0 0.2 1.0 0.4 -0.3 1.0 -0.5 } ;
  Gamma_Coeff = Gamma_Coeff';
  
  /*Loading of latent variables on the non-nominal variables in the Measurement Equation. 
  Should have a size 1 X ME_Element. */
  d_matrix1 =  { 0.2 0.6 0.2 0.3 -0.5 0.5 } ;
  d_matrix1 = d_matrix1';
  
  /*Measurement Equation covariance matrix correponding to non-nominal variables. Only specify the diagonal elements since the measurement equation covariance matrix is a diagonal matrix*/
   Psi1 = {  1.25 1.00 1.00 1.00 1.00 } ;
   Psi1 = Psi1';
   Psi1 = Psi1.^0.5; 
   
   /*Measurement Equation covariance matrix parameters setting. Put 1 to make them active (for continuous variables), otherwise 0 for fixing them to 1 (for ordered and count variables)*/
   Psi_active = 1|0|0|0|0; 
  
  /*Measurement Equation exogenous variables correponding to nominal variables */ 
  beta1 = { 0.2 0.4 -0.5 0.3 0.2 0.3 -0.5 0.3 0.2 -0.2 -0.6 -0.4 } ;
  beta1 = beta1';
  
  /*Loading of latent variables on the nominal variables in the Measurement Equation 
  Should have a size 1 X TN_mat. */
  Lambda = 	{ 0.0 0.4 0.0 0.2 0.4 0.6 } ;
  Lambda = Lambda';
  
  /*Error-differenced covariance matrix for nominal variables*/
  if(Num_MNP > 0);			
	  Lamda_error1 = { 1.00 0.70,
					   0.70 1.49 };
					   
	  Lamda_error2 = { 1.00 0.60,
					   0.60 1.36 };
						   
	  Lamda_error_big = {};
	  Lamda_error_big_chol = {};
	  Lamda_error_big = Lamda_error_big | Lamda_error1 | Lamda_error2 ;
	  Lamda_error_big = reshape(Lamda_error_big,sumr((All_Nominal[1,1:Num_MNP] - 1).^2),1);
	  Original_Alt_Error_num = sumr((All_Nominal[1,1:Num_MNP] - 1).^2);
					   
	  Lamda_error_big_chol = Lamda_error_big_chol | vech(chol(Lamda_error1)') | vech(chol(Lamda_error2)')  ;
	  
	  nCholerr = {};
	  for i(1,Num_MNP,1);
		  temp_cholerr = (All_Nominal[1,i]-1)*(All_Nominal[1,i])/2;
		  nCholerr     = nCholerr ~ temp_cholerr;
	  endfor;
	  
	  nCholerr_csum = cumsumc(nCholerr');
	  All_nCholerr = sumr(nCholerr); 
  
  endif;
  
  if(nvar_mear_ordl > 0);	
		/* specify the threshold parameter values for each ordered variable(row vector). The values should be in increasing order for each ordered variable*/
		threshold_temp = { 1.5 1.5 1.5 };
							  
		Testing_Threshold = zeros(nvar_mear_ordl,Highest_scale);
		threshold_temp = threshold_temp';
		for i(1,nvar_mear_ordl,1);
			if(num_ordl_cat_req1[i]>0);
                if(i == 1);
                    Testing_Threshold[i,1:num_ordl_cat_req1[i]] = (threshold_temp[1:num_ordl_cat_req_csum[i]])';
                else;
                    Testing_Threshold[i,1:num_ordl_cat_req1[i]] = (threshold_temp[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
                endif;
            endif;
	    endfor;	
							  
		Testing_Threshold_unit = zeros(nvar_mear_ordl,Highest_scale);
		Testing_Threshold_unit[1:nvar_mear_ordl,1] = Testing_Threshold[1:nvar_mear_ordl,1];
		for j(1,nvar_mear_ordl,1);
            if(num_ordl_cat_req1[j] > 1);
                for i(2,num_ordl_cat_req1[j],1);
                   Testing_Threshold_unit[j,i] = Testing_Threshold[j,i] - Testing_Threshold[j,i-1];
                endfor;
            endif;
		endfor;
		
		threshold_vector = {};
		for i(1,nvar_mear_ordl,1);
			if(num_ordl_cat_req1[i]>0);
               threshold_vector = threshold_vector | (Testing_Threshold_unit[i,1:num_ordl_cat_req1[i]])';
            endif;
		endfor;
		  
		threshold_vector_pass = ln(threshold_vector);
 endif;
 
  if(nvar_mear_count > 0);
      /* Value of Theta for the count variable (row vector), which is related to the dispersion parameter of negative binomial distribution.
         If you don't wish to estimate the dispersion parameter or if it turned out big after estimation, provide a value of 5 in Theta variable.
         This has a effect of fixing the theta parameter to a large value during estimation and thus the negative binomial collapses to poisson count model.  */
      Theta = { 2.000 } ;
      Theta      = Theta';
	  Theta_Pass = ln(Theta);
	  
      /* specify the number of flexibility parameter for each count variables (column vector).
         Even a count variable don't require any flexibility parameter (if so turned out after estimation), then simply put 1 for that count variable in Num_Phi variable and 
         a value of 0.0001 in Phi_temp1 correponding to that count variable. This has a effect of fixing the flexibility parameters for the correponding count variable to 0.  */
	  Num_Phi = { 1 };
	  /* specify the flexibility parameter values for each count variable(row vector). The values should be in increasing order for each count variable*/
      Phi_temp1 = {   0.75  };
	  
	  Phi_temp1 = Phi_temp1';
      Highest_Phi = maxc(Num_Phi);	
	  Total_Phi = sumc(Num_Phi);
	  num_Phi_csum = cumsumc(Num_Phi); 
	  Phi_temp = zeros(nvar_mear_count,Highest_Phi);
	  
	  for i(1,nvar_mear_count,1);
		  if(i == 1);
			 Phi_temp[i,1:Num_Phi[i]] = (Phi_temp1[1:num_Phi_csum[i]])';
		 else;
			 Phi_temp[i,1:Num_Phi[i]] = (Phi_temp1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])'; 
		 endif;
	 endfor;
	  	
	  Threshold_Phi = zeros(nvar_mear_count,Highest_Phi);
	  Threshold_Phi[1:nvar_mear_count,1] = Phi_temp[1:nvar_mear_count,1];
	  for j(1,nvar_mear_count,1);
		  if(Num_Phi[j] > 1);
			 for i(2,Num_Phi[j],1);
				 Threshold_Phi[j,i] = Phi_temp[j,i] -Phi_temp[j,i-1];
			 endfor;
		  endif;
	  endfor;
	  
	  Phi = {};  
	  for i(1,nvar_mear_count,1);
			Phi = Phi | (Threshold_Phi[i,1:Num_Phi[i]])';
	  endfor;
	  Phi_Pass = ln(Phi);
  endif;
  
  nCholOmega = (rows(Beta_corr))*(rows(Beta_corr)+1)/2;
  
  if(nvar_mear_ordl == 0);	
     num_ordl_cat_req = 0;
  endif;
  
  if(nvar_mear_count == 0);	
     Total_Phi = 0;
  endif;
 
  if(Num_MNP == 0);  
   All_nCholerr = 0;
  endif;
  
  /*--------------Packing of all parameters in a vector---------------------------------------------------------------------------------------*/
  dgp_X = Alpha|vech(Beta_corr)|Gamma_Coeff|d_matrix1|Psi1|beta1|Lambda; 
  bb    = dgp_X[1:nvarml]
	      |vech(chol(xpnd(dgp_X[nvarml+1:nvarml+nCholOmega]))')
		  |dgp_X[nvarml+nCholOmega+1:nvarml+nCholOmega+nvarmC]
		  |dgp_X[nvarml+nCholOmega+nvarmC+1:nvarml+nCholOmega+nvarmC+ME_Element]
		  |dgp_X[nvarml+nCholOmega+nvarmC+ME_Element+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear]
		  |dgp_X[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma]
		  |dgp_X[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat];
		  
 if(Num_MNP > 0);
    dgp_X = dgp_X | Lamda_error_big_chol;
    bb    = bb    |dgp_X[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr];
 endif; 
 
 if(nvar_mear_ordl > 0);	
    dgp_X = dgp_X | threshold_vector_pass;
    bb = bb |dgp_X[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req];
 endif;
  
  
  r_dgp_X = rows(dgp_X);  
  if(nvar_mear_count > 0);
	 dgp_X =  dgp_X | Phi_Pass | Theta_Pass ; 
	 bb    =  bb | dgp_X[r_dgp_X+1:r_dgp_X+Total_Phi] | dgp_X[r_dgp_X+Total_Phi+1:r_dgp_X+Total_Phi+nvar_mear_count];
  endif;
  
/*------------Setting for active and inactive parameters in the model-----------------------------------------------------------------------------------*/  
   Alpha_Active     = Alpha .ne 0;
   Beta_corr_active = 0|1|0;
   
   Gamma_active = Gamma_Coeff .ne 0;
   d_matrix_active = ones(ME_Element,1);
   
   beta_active = beta1 .ne 0;
   Lambda_active = Lambda .ne 0;
   
   if(Num_MNP > 0);
   Lamda_error_active = 0|
                        1|1|
                        0|
                        1|1;
   endif;
      
   if(nvar_mear_ordl > 0);
	Threshold_active = ones(num_ordl_cat_req,1);
   endif;
   
   if(nvar_mear_count > 0);
	   Phi_active   = Phi_temp1 .ne 0.0001;
       Theta_active = Theta .ne 5;
   endif;
   
   _max_active = Alpha_Active|Beta_corr_active|Gamma_active|d_matrix_active|Psi_active|beta_active|Lambda_active;
   
   if(Num_MNP > 0);
	   _max_active = _max_active | Lamda_error_active;
   endif;
   
   if(nvar_mear_ordl > 0);
      _max_active = _max_active | Threshold_active;
   endif;
   
   if(nvar_mear_count > 0);
	  _max_active = _max_active | Phi_active | Theta_active ;
   endif;
  
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
Alpha_nam         =  0 $+ "Alpha" $+ ftocv(seqa(1,1,nvarml),2,0);
Beta_corr_nam     =  0 $+ "Tild" $+ ftocv(seqa(1,1,nCholOmega),2,0);
Gamma_Coeff_nam   =  0 $+ "Gamma" $+ ftocv(seqa(1,1,nvarmC),2,0);
d_matrix_nam      =  0 $+ "D_caP" $+ ftocv(seqa(1,1,ME_Element),2,0);
Psi_nam           =  0 $+ "Psi" $+ ftocv(seqa(1,1,nvar_mear),2,0);
Beta_nam          =  0 $+ "Beta" $+ ftocv(seqa(1,1,nvarma),2,0);
Lambda_nam        =  0 $+ "Lambda" $+ ftocv(seqa(1,1,TN_mat),2,0);

if(Num_MNP > 0);
   Lamda_nam         =  0 $+ "Err1_" $+ ftocv(seqa(1,1,All_nCholerr),2,0);
endif;

if(nvar_mear_ordl > 0);
  Threshold_nam     =  0 $+ "Th_" $+ ftocv(seqa(1,1,num_ordl_cat_req),2,0);
endif;

if(nvar_mear_count > 0);
 Phi_nam           =  0 $+ "Phi" $+ ftocv(seqa(1,1,Total_Phi),2,0);
 Theta_nam         =  0 $+ "Theta" $+ ftocv(seqa(1,1,nvar_mear_count),2,0);
endif;


_max_ParNames = Alpha_nam|Beta_corr_nam|Gamma_Coeff_nam|d_matrix_nam|Psi_nam|Beta_nam|Lambda_nam ;
 
 if(Num_MNP > 0);
	_max_ParNames = _max_ParNames | Lamda_nam; 
 endif;

 if(nvar_mear_ordl > 0);
   _max_ParNames = _max_ParNames | Threshold_nam;
 endif;
 

if(nvar_mear_count > 0);
	_max_ParNames = _max_ParNames | Phi_nam | Theta_nam ;
endif;

//-----------------------------Thread Settings------------------------------------------------------------------------
    Num_Threads = 6;
	Data_Split  = zeros(Num_Threads,2);
	for i(1,Num_Threads,1);
		Data_Split[i,1]  = ceil((i-1)*((nind-1)/Num_Threads)) + 1;
		if(i ne Num_Threads);
		  Data_Split[i,2]  = ceil(i*((nind-1)/Num_Threads)) ;
		else;
		  Data_Split[i,2]  = nind ;
		endif;
	endfor;
	

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
clearg Gradient_Store,Gradient_Store1;
clearg lower_threshold_matrix,upper_threshold_matrix,Count_Threshold,Lambda_count,smallC,term1,xPhiMat,Utility,LambdaZ,threshCountMax,GP_Global;
clearg Z_mat,Y_vec,D_matrix,Psi_matrix_big,Lamda,Store_ogc,Store_ogcn,Store_nn,Store_cc,Hess_cc,Hess_ogc,Hess_ogcn,Hess_nn,Alpha_mat;

if(Force_converegnce == 1);
_max_MaxIters = iteration_limit;
endif;
_max_Options = { bfgs stepbt };
 _max_Algorithm = { 2 };

"First Parametrized Likelihood is in progress.....................";
_max_CovPar = 2;
_max_GradProc = &lgd1;

_max_switch = zeros(4,1);
_max_Switch[1] = 2;        /* algorithm number to switch to */
_max_Switch[2] = 1e-4;     /* NLP switches if functions changes less than this amount */
_max_Switch[3] = 500;    /* NLP switches if this number of iterations is exceeded */
_max_Switch[4] = 2;     /* NLP switches if line search step changes less than this amount */
First_Run    = 1;
Parametrized = 1;
start_time1 = gettime();
{ x,f,g,cov,retcode } = maxprt(maxlik(Main_data,0,&lpr1,bb));
end_time1 = gettime();
clear _max_GradProc;

//-----------------------------------------------------------------------------------------//
   
    Alpha1           = x[1:nvarml];
    
	Beta_corr1       = (upmat(xpnd(x[nvarml+1:nvarml+nCholOmega])))';
	Beta_corr2       = Beta_corr1;	
	 
	for i(2,rows(Beta_corr1),1);
			row_all = Beta_corr2[i,1:i-1];
			row_all_sq = row_all.^2;
			denom = sqrt(1+sumc(row_all_sq'));
			for j(1,i,1);
				if (i ne j);
					Beta_corr1[i,j] = Beta_corr2[i,j]/denom;
				endif;
				
				if (i eq j);
					Beta_corr1[i,j] = 1/denom;
				endif;
			  endfor;
	 endfor;
	
	Beta_corr1           = Beta_corr1*Beta_corr1';	
	
	
	Gamma_Coeff1         = x[nvarml+nCholOmega+1:nvarml+nCholOmega+nvarmC];
	d_matrix1            = x[nvarml+nCholOmega+nvarmC+1:nvarml+nCholOmega+nvarmC+ME_Element];
	
	
	Chol_Psi_matrix1     = x[nvarml+nCholOmega+nvarmC+ME_Element+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear];
	Chol_Psi_matrix1     = Chol_Psi_matrix1.*Chol_Psi_matrix1;
	
	Beta_coeff1          = x[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma];
	Lambda_coeff1        = x[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat];
	
	if(Num_MNP > 0);
	Chol_Lamda           = x[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr];
		
	Chol_Lamda1          = {};
	for i(1,Num_MNP,1);
		
		if(i == 1);
		 temp_num1 = 1;
		 temp_num2 = nCholerr_csum[i,1];
		else;
		 temp_num1 = nCholerr_csum[i-1,1] + 1;
		 temp_num2 = nCholerr_csum[i,1];
	    endif;
	    
		curr_ele = upmat(xpnd(Chol_Lamda[temp_num1:temp_num2]));
		curr_mat = curr_ele'*curr_ele;
		
		Chol_Lamda1 = Chol_Lamda1 | vech(curr_mat);
	endfor;
	endif;
	
	if(nvar_mear_ordl > 0 );
	upper_threshold1     = exp(x[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req]);
	upper_threshold_K1   = zeros(nvar_mear_ordl,Highest_scale);
	for i(1,nvar_mear_ordl,1);
		if(num_ordl_cat_req1[i]>0);
            if(i==1);
               upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold1[1:num_ordl_cat_req_csum[i]])';
            else;
               upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold1[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
            endif;
        endif;
	endfor;
	
	upper_threshold      =  (cumsumc(upper_threshold_K1'))';
	threshold_vector1    = {};
	for i(1,nvar_mear_ordl,1);
		if(num_ordl_cat_req1[i]>0);
        threshold_vector1 = threshold_vector1 | (upper_threshold[i,1:num_ordl_cat_req1[i]])';
        endif;
	endfor;
    endif;
  
  if(nvar_mear_count > 0);
	Phi_coeff1           = exp(x[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi]);
	Phi_coeff_K1         = zeros(nvar_mear_count,Highest_Phi);
	for i(1,nvar_mear_count,1);
		if(i==1);
		    Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[1:num_Phi_csum[i]])';
	    else;
			Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
		endif;
	endfor;
	
	Phi_threshold      =  (cumsumc(Phi_coeff_K1'))';
	Phi_vector1    = {};
	for i(1,nvar_mear_count,1);
		Phi_vector1 = Phi_vector1 | (Phi_threshold[i,1:Num_Phi[i]])';
	endfor;
    
	Theta_vector1 = exp(x[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+nvar_mear_count]);
  endif;
 
    bb2 = Alpha1|vech(Beta_corr1)|Gamma_Coeff1|d_matrix1|Chol_Psi_matrix1|Beta_coeff1|Lambda_coeff1;
	
	if(Num_MNP > 0);
		bb2 = bb2 | Chol_Lamda1;
	endif;
	
	if(nvar_mear_ordl > 0);
	   bb2 = bb2 | threshold_vector1;
	endif;
	
	if(nvar_mear_count > 0);
		bb2 = bb2 | Phi_vector1 | Theta_vector1 ;
	endif;
//----------------------------------------------------------------------------------------//
    
	 Parametrized = 0;
	"Final Un-Parametrized Likelihood is in progress.....................";
	 All_LL_run = lpr1(bb2,Main_data);
	 
	 "Jacobian is in progress......................................."; 
	 J_Mat = lgd1(bb2,Main_data);
     	 
	 clearg yd1,yd2,Utilityd1,Utilityd2,Alpha_matd1,Alpha_matd2,Count_Threshold_d1,Count_Threshold_d2,lower_threshold_matrix_d1,upper_threshold_matrix_d1,lower_threshold_matrix_d2,upper_threshold_matrix_d2;
     clearg D_matrixFd1,D_matrixFd2,Psi_matrix_bigFd1,Psi_matrix_bigFd2,LamdaFd1,LamdaFd2,GP_Global_Fd1,GP_Global_Fd2;
	 "Hessian is in progress......................................."; 
	 Hessian = User_Hess(Main_data,bb2);
	 Hessian_inv  = inv(Hessian);
	 
	 needx          = selif(bb2,_max_active);
	 Cross_Product1 = selif(Gradient_store1',_max_active);
     Cross_Product  = Cross_Product1*Cross_Product1';
     st_error_IM    = sqrt(diag(inv(Cross_Product)));
	 
	 Cov_BHHH       = Hessian_inv*Cross_Product*Hessian_inv;
	 Var_BHHH       = diag(Cov_BHHH);
	 Var_HH         = diag(Hessian_inv);
	 
	 Hessian_St_Error   = sqrt(Var_HH);
	 st_error_BHHH = sqrt(Var_BHHH);
	 
	 LL_run      = sumc(All_LL_run);
	 "-----------------Parameters and T-Statistics-------------------------------------------------------------------";
			"Log-likelihood value : " ftos(LL_run,"%#*.*lG",10,6);
			print "Parameter         Estimate      ST.Err       T-Stat";
			omat = (selif(_max_parNames,_max_active) ~ needx ~ st_error_BHHH ~ (needx./st_error_BHHH) );
			mask = 0~1~1~1;
			let fmt[4,3] = 
						"-*.*s "  8 8   @ format info for variable names column @
						"*.*lf" 15 3   @ format info for mean column           @
						"*.*lf" 15 3   @ format info for mean column           @
					    "*.*lf" 15 3   @ format info for mean column           @;
			y = printfm(omat,mask,fmt);
	 "--------------------------------------------------------------------------------------------------------------";	
     
proc lpr1(parm,dta);
	 
	local Alpha_coeff,Chol_Alpha_corr,delta_coeff,d_matrix_coeff,Chol_Psi_matrix,Beta_coeff,Lambda_coeff,Chol_Lamda,upper_threshold_K,upper_threshold_K1,upper_threshold,upper_threshold_decider;
	local Theta_coeff,Phi_coeff1,Phi_coeff_K1,Phi_coeff,delta,Chol_Alpha_corr_adjusted,Chol_Alpha_corr_adjusted1,row_all,row_all_sq,denom,i,j,Alpha_corr;
	local count,Psi_matrix,Lamda_chol,temp_num1,temp_num2,curr_ele,curr_mat,ME_Error_Mat,delta_bar,AlphaW,z,zs,y1,y2,Gamma_X,y2_temp;
    local Beta_coeff_expand,Xbeta,row_add,v1,Phi_All,Phi_mat,temp_arr,Gamma_Phi,ZGP,temp_store,iobs,jcount,countObs,smallCObs,term2,icnt,threshUpper,threshLower,phiLower,phiUpper;
    local LL,LL1,LL2,LL3,LL4,LL5,LL6,Store_ogc1,Store_ogc2,Store_ogc3,Store_ogc4,Store_ogc5,Store_ogc6,Store_ogcn1,Store_ogcn2,Store_ogcn3,Store_ogcn4,Store_ogcn5,Store_ogcn6,Store_nn1,Store_nn2;
	local Store_nn3,Store_nn4,Store_nn5,Store_nn6,temp;
	local Hess_cc1,Hess_cc2,Hess_cc3,Hess_cc4,Hess_cc5,Hess_cc6,Hess_ogc1,Hess_ogc2,Hess_ogc3,Hess_ogc4,Hess_ogc5,Hess_ogc6,Hess_ogcn1,Hess_ogcn2,Hess_ogcn3,Hess_ogcn4,Hess_ogcn5,Hess_ogcn6;
    local Hess_nn1,Hess_nn2,Hess_nn3,Hess_nn4,Hess_nn5,Hess_nn6,Store_cc1,Store_cc2,Store_cc3,Store_cc4,Store_cc5,Store_cc6;
	
	if(Parametrized == 1);
			Alpha_coeff         = parm[1:nvarml];
			Chol_Alpha_corr     = upmat(xpnd(parm[nvarml+1:nvarml+nCholOmega]));
			delta_coeff         = parm[nvarml+nCholOmega+1:nvarml+nCholOmega+nvarmC];
			d_matrix_coeff      = parm[nvarml+nCholOmega+nvarmC+1:nvarml+nCholOmega+nvarmC+ME_Element];
			 
			Chol_Psi_matrix     = parm[nvarml+nCholOmega+nvarmC+ME_Element+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear];
			 
		   
			Beta_coeff          = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma];
			Lambda_coeff        = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat];
			 
			if(Num_MNP > 0);
				 Chol_Lamda     = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr];
			endif;
			
			if(nvar_mear_ordl > 0);
				  upper_threshold_K    =  exp(parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req]);
				  upper_threshold_K1   = zeros(nvar_mear_ordl,Highest_scale);
				  for i(1,nvar_mear_ordl,1);
							if(num_ordl_cat_req1[i]>0);
								if(i==1);
								   upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[1:num_ordl_cat_req_csum[i]])';
								else;
								   upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
								endif;
							endif;
				  endfor;
				
				 upper_threshold      =  (cumsumc(upper_threshold_K1'))';
				 for i(1,nvar_mear_ordl,1);
							if(num_ordl_cat_req1[i] < Highest_scale);
							  upper_threshold[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity*ones(1,Highest_scale-num_ordl_cat_req1[i]);
							endif;
				 endfor;
				 upper_threshold_decider = negative_infinity*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold ~ positive_infinity*ones(nvar_mear_ordl,1); 
			endif;
			
			if(nvar_mear_count > 0); 
				Phi_coeff1      = exp(parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi]);
				Phi_coeff_K1    = zeros(nvar_mear_count,Highest_Phi);
				for i(1,nvar_mear_count,1);
					if(i==1);
					   Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[1:num_Phi_csum[i]])';
					else;
					   Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
					endif;
				endfor;
			
				Phi_coeff      =  (cumsumc(Phi_coeff_K1'))';
				for i(1,nvar_mear_count,1);
					if(Num_Phi[i] < Highest_Phi);
					   Phi_coeff[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
					endif;
				endfor;
			    Theta_Coeff = exp(parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+nvar_mear_count]);
			endif;
	elseif(Parametrized == 0);
	        Alpha_coeff         = parm[1:nvarml];
			Chol_Alpha_corr     = xpnd(parm[nvarml+1:nvarml+nCholOmega]);
			delta_coeff         = parm[nvarml+nCholOmega+1:nvarml+nCholOmega+nvarmC];
			d_matrix_coeff      = parm[nvarml+nCholOmega+nvarmC+1:nvarml+nCholOmega+nvarmC+ME_Element];
			 
			Chol_Psi_matrix     = parm[nvarml+nCholOmega+nvarmC+ME_Element+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear];
			 
		   
			Beta_coeff          = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma];
			Lambda_coeff        = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat];
			 
			if(Num_MNP > 0);
				 Chol_Lamda     = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr];
			endif;
			
			if(nvar_mear_ordl > 0);
				  upper_threshold_K    =  (parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req]);
				  upper_threshold_K1   = zeros(nvar_mear_ordl,Highest_scale);
				  for i(1,nvar_mear_ordl,1);
							if(num_ordl_cat_req1[i]>0);
								if(i==1);
								   upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[1:num_ordl_cat_req_csum[i]])';
								else;
								   upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
								endif;
							endif;
				  endfor;
				
				 upper_threshold      =  upper_threshold_K1;
				 for i(1,nvar_mear_ordl,1);
							if(num_ordl_cat_req1[i] < Highest_scale);
							  upper_threshold[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity*ones(1,Highest_scale-num_ordl_cat_req1[i]);
							endif;
				 endfor;
				 upper_threshold_decider = negative_infinity*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold ~ positive_infinity*ones(nvar_mear_ordl,1); 
			endif;
			
			if(nvar_mear_count > 0); 
				Phi_coeff1      = (parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi]);
				Phi_coeff_K1    = zeros(nvar_mear_count,Highest_Phi);
				for i(1,nvar_mear_count,1);
					if(i==1);
					   Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[1:num_Phi_csum[i]])';
					else;
					   Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
					endif;
				endfor;
			
				Phi_coeff      =  Phi_coeff_K1;
				for i(1,nvar_mear_count,1);
					if(Num_Phi[i] < Highest_Phi);
					   Phi_coeff[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
					endif;
				endfor;
			    Theta_Coeff = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+nvar_mear_count];
			endif;
	endif;
	
	
	
	if(nvar_latent > 1);
	if(Parametrized == 1);
		Chol_Alpha_corr_adjusted = Chol_Alpha_corr';
		Chol_Alpha_corr_adjusted1 = Chol_Alpha_corr';
			
			for i(2,rows(Beta_corr),1);
				row_all = Chol_Alpha_corr_adjusted1[i,1:i-1];
				row_all_sq = row_all.^2;
				denom = sqrt(1+sumc(row_all_sq'));
				for j(1,i,1);
					if (i ne j);
						Chol_Alpha_corr_adjusted[i,j] = Chol_Alpha_corr_adjusted1[i,j]/denom;
						clear temp;
					endif;
					
					if (i eq j);
						Chol_Alpha_corr_adjusted[i,j] = 1/denom;
						clear temp;
					endif;
				endfor;
			endfor;
		   
		Chol_Alpha_corr = Chol_Alpha_corr_adjusted'; clear denom;
	endif;
    endif;
    
	if(Parametrized == 1);
	   Alpha_corr = Chol_Alpha_corr'*Chol_Alpha_corr;
	elseif(Parametrized == 0);
	   Alpha_corr = Chol_Alpha_corr;
    endif;
   
	Alpha_mat  = Alpha_corr;
	D_matrix   = zeros(nvar_mear,nvar_latent);
	count = 0;
	for i(1,nvar_mear,1);
		for j(1,nvar_latent,1);
			if(ME_Matrix[i,j]==1);
				count = count + 1;
				D_matrix[i,j] = d_matrix_coeff[count];
			endif;
			
		endfor;
	endfor;
	
	if(Parametrized == 1);
        Psi_matrix = Chol_Psi_matrix  .* Chol_Psi_matrix ;
	elseif(Parametrized == 0);
	    Psi_matrix = Chol_Psi_matrix;
	endif;
	
	Psi_matrix_big = eye(nvar_mear);
	Psi_matrix_big = diagrv(Psi_matrix_big,Psi_matrix);
	
	if(Parametrized == 1);
			Lamda_chol = zeros(Alternative_all,Alternative_all);
			Lamda      = zeros(Alternative_all,Alternative_all);
			if(Num_MNP > 0);
			for i(1,Num_MNP,1);
				
				if(i == 1);
				 temp_num1 = 1;
				 temp_num2 = nCholerr_csum[i,1];
				else;
				 temp_num1 = nCholerr_csum[i-1,1] + 1;
				 temp_num2 = nCholerr_csum[i,1];
				endif;
				
				curr_ele = upmat(xpnd(Chol_Lamda[temp_num1:temp_num2]));
				curr_mat = curr_ele'*curr_ele;
				
				if(i == 1);
				   Lamda_chol[2:Nominal_csum[i],2:Nominal_csum[i]] = curr_ele';
				   Lamda[2:Nominal_csum[i],2:Nominal_csum[i]] = curr_mat;
				else;
				   Lamda_chol[Nominal_csum[i-1,1]+2:Nominal_csum[i],Nominal_csum[i-1,1]+2:Nominal_csum[i]] = curr_ele';  
				   Lamda[Nominal_csum[i-1,1]+2:Nominal_csum[i],Nominal_csum[i-1,1]+2:Nominal_csum[i]] = curr_mat;  
				endif;
			endfor;
			endif;
			
			if(num_nominal > Num_MNP);
			  if(Num_MNP > 0);
					for i(Num_MNP+1,num_nominal,1);
						Lamda_chol[Nominal_csum[Num_MNP]+2*(i-Num_MNP),Nominal_csum[Num_MNP]+2*(i-Num_MNP)] = 1; 
						Lamda[Nominal_csum[Num_MNP]+2*(i-Num_MNP),Nominal_csum[Num_MNP]+2*(i-Num_MNP)] = 1;
					endfor;
			  else;
				   for i(Num_MNP+1,num_nominal,1);
						if(i == 1);
						  Lamda_chol[2,2] = 1; 
						  Lamda[2,2] = 1;
						else;
						  Lamda_chol[Nominal_csum[i-1]+2,Nominal_csum[i-1]+2] = 1; 
						  Lamda[Nominal_csum[i-1]+2,Nominal_csum[i-1]+2] = 1;
						endif;
					endfor;
			  endif;
			endif;	
	elseif(Parametrized == 0);		
	        Lamda      = zeros(Alternative_all,Alternative_all);
			if(Num_MNP > 0);
			for i(1,Num_MNP,1);
				
				if(i == 1);
				 temp_num1 = 1;
				 temp_num2 = nCholerr_csum[i,1];
				else;
				 temp_num1 = nCholerr_csum[i-1,1] + 1;
				 temp_num2 = nCholerr_csum[i,1];
				endif;
				
				curr_mat = xpnd(Chol_Lamda[temp_num1:temp_num2]);
						
				if(i == 1);
				   Lamda[2:Nominal_csum[i],2:Nominal_csum[i]] = curr_mat;
				else;
				   Lamda[Nominal_csum[i-1,1]+2:Nominal_csum[i],Nominal_csum[i-1,1]+2:Nominal_csum[i]] = curr_mat;  
				endif;
			endfor;
			endif;
			
			if(num_nominal > Num_MNP);
			  if(Num_MNP > 0);
					for i(Num_MNP+1,num_nominal,1);
						Lamda[Nominal_csum[Num_MNP]+2*(i-Num_MNP),Nominal_csum[Num_MNP]+2*(i-Num_MNP)] = 1;
					endfor;
			  else;
				   for i(Num_MNP+1,num_nominal,1);
						if(i == 1);
						  Lamda[2,2] = 1;
						else;
						  Lamda[Nominal_csum[i-1]+2,Nominal_csum[i-1]+2] = 1;
						endif;
					endfor;
			  endif;
			endif;	
	endif;
	
	
	AlphaW = (ones(nvar_latent,1) .*. Alpha_coeff  )*~(dta[.,ivgenvl])';
	Z_mat = {}; j = 1;
	
	do until j > nvar_latent;
       Z_mat = Z_mat~(sumc(AlphaW[(j-1)*nvarml+1:(j*nvarml),.]));                // Z stores the latent variables value for each observation. nobs X nvar_latent. 1st col has z1, 2nd z2 and so on for all observations.
       j = j+1;
    endo;
    
    y1 = {}; j = 1;
	
	do until j > nobs;
       y1 = y1|( (D_matrix * Z_mat[j,.]' ) )' ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
    endo;

    Gamma_X = (ones(nvar_mear,1) .*. delta_coeff  )*~(dta[.,ivgenvC])';
	y2 = {}; j = 1;
	
	do until j > nvar_mear;
       y2 = y2~(sumc(Gamma_X[(j-1)*nvarmC+1:(j*nvarmC),.]));           // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
    endo;

   if(nvar_mear_count > 0);
	   y2_temp = {};
	   y2_temp = y2_temp ~ y2[.,1:(nvar_mear_cont+nvar_mear_ordl)] ~ zeros(nobs,nvar_mear_count);
	   Y_vec = y1 + y2_temp;
       clear y2_temp;
   else;
	   Y_vec = y1 + y2;
   endif;
   
   
   if(nvar_mear_ordl > 0);
		lower_threshold_matrix = zeros(nobs,nvar_mear_ordl);
		upper_threshold_matrix = zeros(nobs,nvar_mear_ordl);
		
		for i(1,nobs,1);
			for j(1,nvar_mear_ordl,1);
				for k(1,num_ordl_cat[j],1);
				    if(dta[i,Ordinal_Index[j]] == k);
				        lower_threshold_matrix[i,j] = upper_threshold_decider[j,k];
				        upper_threshold_matrix[i,j] = upper_threshold_decider[j,k+1];
				    endif;
			    endfor;
		   endfor;
	   endfor;
   endif;
   
  
   Beta_coeff_expand = {};
   for i(1,num_nominal,1);
	     if(i == 1);
		    Beta_coeff_expand = Beta_coeff_expand | (ones(All_Nominal[1,i],1) .*. Beta_coeff[1:nvarma_csum[i]]);
		else;
			Beta_coeff_expand = Beta_coeff_expand | (ones(All_Nominal[1,i],1) .*. Beta_coeff[nvarma_csum[i-1]+1:nvarma_csum[i]]);
		endif;
   endfor;
	
   
   Xbeta = (Beta_coeff_expand)*~(dta[.,ivgenva])';
   
   v1 = {};
   for i(1,num_nominal,1);
    j = 1;
    
	if(i == 1);
		row_add = 0;
	else;
		row_add = sumr(All_Nominal[1,1:i-1] .* nvarma_all[1,1:i-1]);
	endif;
	
    do until j > All_Nominal[1,i];
       v1 = v1~(sumc(Xbeta[row_add+(j-1)*nvarma_all[1,i]+1:row_add+(j*nvarma_all[1,i]),.]));
       j = j+1;
    endo;
   endfor;

    LambdaZ = {}; GP_Global = {}; j = 1;
    do until j > nobs;
           Phi_All = Main_data[j,ivgephi];
		   Phi_mat = {};
		   
		   for k(1,rows(N_mat),1);
			 if(k==1);
				 temp_arr = Phi_All[1,1:N_mat_csum[k]*nvar_latent];
			 else;
				 temp_arr = Phi_All[1,N_mat_csum[k-1]*nvar_latent+1:N_mat_csum[k]*nvar_latent];
			 endif;
				 
			 temp_arr = reshape(temp_arr,N_mat[k],nvar_latent);
			 Phi_mat  = Phi_mat | temp_arr;
			 clear temp_arr;
		   endfor;
		   
		   Gamma_Phi = Lambda_coeff .* Phi_mat;
		   ZGP       = Gamma_Phi * (Z_mat[j,.])' ;
		   
           temp_store = {};		   
		   for k(1,Alternative_all,1);
			   if(k == 1);
		          GP_Global   = GP_Global  | (sumc(Gamma_Phi[1:N_mat_csum[k],.]))';
				  temp_store  = temp_store ~ (sumc(ZGP[1:N_mat_csum[k],.]));
			   else;
				  GP_Global   = GP_Global | (sumc(Gamma_Phi[N_mat_csum[k-1]+1:N_mat_csum[k],.]))';
				  temp_store  = temp_store ~ (sumc(ZGP[N_mat_csum[k-1]+1:N_mat_csum[k],.]));
			   endif;
		   endfor;
		   LambdaZ = LambdaZ | temp_store;
			
		j = j+1;
    endo;	
	
   Utility     = v1 + LambdaZ;
   			
   if(nvar_mear_count > 0);
	   Lambda_count = exp(y2[.,nvar_mear_cont+nvar_mear_ordl+1:nvar_mear]) ;
	   
	   smallC = (Lambda_count ./ (Lambda_count+ Theta_coeff'));
	   term1 = (1-smallC)^(Theta_coeff') ./ gamma(Theta_coeff');
	   
	   threshCountMax = threshCountMax_Global;
	   xPhiMat = zeros(nvar_mear_count,threshCountMax+1);
	    	   
	    for iCnt (1,nvar_mear_count,1);
			xPhiMat[iCnt,2:1+Num_Phi[iCnt]] = (Phi_coeff[iCnt,1:Num_Phi[iCnt]]);
		endfor;
		
		for iCnt (1,nvar_mear_count,1);
			xPhiMat[iCnt,Num_Phi[iCnt]+2:threshCountMax+1] = ones(1,(threshCountMax+1-Num_Phi[iCnt]-1)) .*. Phi_coeff[iCnt,Num_Phi[iCnt]];
		endfor;
	   
			   
	   Count_Threshold = zeros(nobs,nvar_mear_count*2);
	   for iobs(1,nobs,1);
		   for jcount(1,nvar_mear_count,1);
			   countObs = dta[iobs,Count_Index[jcount]];
			   smallCObs = smallC[iobs,jcount];
			   term2 = 0;
			   
				for icnt (0,countObs,1);
					term2 = term2 + (gamma(Theta_coeff[jcount,1] + iCnt)/(iCnt!) .* smallCObs^iCnt);
				endfor;

				threshUpper = term1[iobs,jcount] * term2;
					
				if(countObs gt 0);  
					term2 = term2 - (gamma(Theta_coeff[jcount,1] + countObs)/(countObs!) * smallCObs^countObs);
					threshLower = term1[iobs,jcount] * term2;
					phiUpper = (xPhiMat[jcount,countObs+1])';
					phiLower = (xPhiMat[jcount,countObs])';

				else; 
					threshLower = 0; 
					phiUpper = 0; 
					phiLower = 0; 
				endif;
                
				threshUpper = minc( threshUpper|0.99999999999999999);
		        threshLower = minc( threshLower|0.99999999999999999);
				
				threshUpper = cdfni(threshUpper) + phiUpper;
				threshLower = cdfni(threshLower) + phiLower;
			
				Count_Threshold[iobs,jcount] = threshLower;
				Count_Threshold[iobs,nvar_mear_count+jcount] = threshUpper;
		 endfor;
	 endfor;
   endif;
 
     ThreadBegin;
	 { LL1, Store_ogc1, Store_ogcn1, Store_nn1, Hess_cc1, Hess_ogc1, Hess_ogcn1, Hess_nn1, Store_cc1  } = lprT1(Data_Split[1,1],Data_Split[1,2],MACML_seed[1,1]);
	 ThreadEnd;
	 ThreadBegin;
	 { LL2, Store_ogc2, Store_ogcn2, Store_nn2, Hess_cc2, Hess_ogc2, Hess_ogcn2, Hess_nn2, Store_cc2 }  = lprT1(Data_Split[2,1],Data_Split[2,2],MACML_seed[2,1]);
	 ThreadEnd;
	 ThreadBegin;
	 { LL3, Store_ogc3, Store_ogcn3, Store_nn3, Hess_cc3, Hess_ogc3, Hess_ogcn3, Hess_nn3, Store_cc3 }  = lprT1(Data_Split[3,1],Data_Split[3,2],MACML_seed[3,1]);
	 ThreadEnd;
	 ThreadBegin;
	 { LL4, Store_ogc4, Store_ogcn4, Store_nn4, Hess_cc4, Hess_ogc4, Hess_ogcn4, Hess_nn4, Store_cc4 }  = lprT1(Data_Split[4,1],Data_Split[4,2],MACML_seed[4,1]);
	 ThreadEnd;
	 ThreadBegin;
	 { LL5, Store_ogc5, Store_ogcn5, Store_nn5, Hess_cc5, Hess_ogc5, Hess_ogcn5, Hess_nn5, Store_cc5 }  = lprT1(Data_Split[5,1],Data_Split[5,2],MACML_seed[5,1]);
	 ThreadEnd;
	 ThreadBegin;
	 { LL6, Store_ogc6, Store_ogcn6, Store_nn6, Hess_cc6, Hess_ogc6, Hess_ogcn6, Hess_nn6, Store_cc6 }  = lprT1(Data_Split[6,1],Data_Split[6,2],MACML_seed[6,1]);
	 ThreadEnd;
	 ThreadJoin;
  
 LL = {}; Store_ogc = {}; Store_ogcn = {}; Store_nn = {}; Hess_cc = {}; Hess_ogc = {}; Hess_ogcn = {}; Hess_nn = {}; Store_cc = {};
 LL = LL | (LL1|LL2|LL3|LL4|LL5|LL6);
 
 Store_cc   = Store_cc    | (Store_cc1  | Store_cc2  | Store_cc3  | Store_cc4  | Store_cc5  | Store_cc6);
 Store_ogc  = Store_ogc  | (Store_ogc1  | Store_ogc2  | Store_ogc3  | Store_ogc4  | Store_ogc5  | Store_ogc6 );
 Store_ogcn = Store_ogcn | (Store_ogcn1 | Store_ogcn2 | Store_ogcn3 | Store_ogcn4 | Store_ogcn5 | Store_ogcn6 );
 Store_nn   = Store_nn   | (Store_nn1   | Store_nn2   | Store_nn3   | Store_nn4   | Store_nn5   | Store_nn6);

 if(Parametrized == 0);
    Hess_cc   = Hess_cc   | (Hess_cc1   | Hess_cc2   | Hess_cc3   | Hess_cc4   | Hess_cc5   | Hess_cc6 );
	Hess_ogc  = Hess_ogc  | (Hess_ogc1  | Hess_ogc2  | Hess_ogc3  | Hess_ogc4  | Hess_ogc5  | Hess_ogc6 );
    Hess_ogcn = Hess_ogcn | (Hess_ogcn1 | Hess_ogcn2 | Hess_ogcn3 | Hess_ogcn4 | Hess_ogcn5 | Hess_ogcn6 );
    Hess_nn   = Hess_nn   | (Hess_nn1   | Hess_nn2   | Hess_nn3   | Hess_nn4   | Hess_nn5   | Hess_nn6);
 endif;
 
 clear LL1,LL2,LL3,LL4,LL5,LL6;
 clear Store_ogc1,Store_ogc2,Store_ogc3,Store_ogc4,Store_ogc5,Store_ogc6;
 clear Store_ogcn1,Store_ogcn2,Store_ogcn3,Store_ogcn4,Store_ogcn5,Store_ogcn6;
 clear Store_nn1,Store_nn2,Store_nn3,Store_nn4,Store_nn5,Store_nn6;
 
 clear Store_cc1,Store_cc2,Store_cc3,Store_cc4,Store_cc5,Store_cc6;
 clear Hess_cc1,Hess_cc2,Hess_cc3,Hess_cc4,Hess_cc5,Hess_cc6;
 clear Hess_ogc1,Hess_ogc2,Hess_ogc3,Hess_ogc4,Hess_ogc5,Hess_ogc6;
 clear Hess_ogcn1,Hess_ogcn2,Hess_ogcn3,Hess_ogcn4,Hess_ogcn5,Hess_ogcn6;
 clear Hess_nn1,Hess_nn2,Hess_nn3,Hess_nn4,Hess_nn5,Hess_nn6;
 
 retp(sumc(LL));
 endp;

proc lgd1(parm,dta);
	local Alpha_coeff,Chol_Alpha_corr,delta_coeff,d_matrix_coeff,Chol_Psi_matrix,Beta_coeff,Lambda_coeff,Chol_Lamda,upper_threshold_K,upper_threshold_K1,upper_threshold,upper_threshold_decider;
	local Theta_coeff,Phi_coeff1,Phi_coeff_K1,Phi_coeff,delta,dd_delta,Chol_Alpha_corr_adjusted,Chol_Alpha_corr_adjusted1,row_all,row_all_sq,denom,i,j,Alpha_corr;
	local count,Psi_matrix,Lamda_chol,temp_num1,temp_num2,curr_ele,curr_mat,Chol_Psi_matrix1,gradient,emp_mat,gradient_active,All_gradient,temp;
	local alpha_gradientF,alpha_corr_gradientF,delta_gradientF,D_matrix_gradientF,Psi_gradientF,Beta_gradientF,Lambda_gradientF,Lamda_gradientF,Upper_threshold_gradientF,Theta_gradientF,Phi_gradientF,del_gradientF;
	
	if(Parametrized == 1);
			Alpha_coeff         = parm[1:nvarml];
			Chol_Alpha_corr     = upmat(xpnd(parm[nvarml+1:nvarml+nCholOmega]));
			delta_coeff         = parm[nvarml+nCholOmega+1:nvarml+nCholOmega+nvarmC];
			d_matrix_coeff      = parm[nvarml+nCholOmega+nvarmC+1:nvarml+nCholOmega+nvarmC+ME_Element];
			 
			Chol_Psi_matrix     = parm[nvarml+nCholOmega+nvarmC+ME_Element+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear];
			 
		   
			Beta_coeff          = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma];
			Lambda_coeff        = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat];
			 
			if(Num_MNP > 0);
				 Chol_Lamda     = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr];
			endif;
			
			if(nvar_mear_ordl > 0);
				  upper_threshold_K    =  exp(parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req]);
				  upper_threshold_K1   = zeros(nvar_mear_ordl,Highest_scale);
				  for i(1,nvar_mear_ordl,1);
							if(num_ordl_cat_req1[i]>0);
								if(i==1);
								   upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[1:num_ordl_cat_req_csum[i]])';
								else;
								   upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
								endif;
							endif;
				  endfor;
				
				 upper_threshold      =  (cumsumc(upper_threshold_K1'))';
				 for i(1,nvar_mear_ordl,1);
							if(num_ordl_cat_req1[i] < Highest_scale);
							  upper_threshold[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity*ones(1,Highest_scale-num_ordl_cat_req1[i]);
							endif;
				 endfor;
				 upper_threshold_decider = negative_infinity*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold ~ positive_infinity*ones(nvar_mear_ordl,1); 
			endif;
			
			if(nvar_mear_count > 0); 
				Phi_coeff1      = exp(parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi]);
				Phi_coeff_K1    = zeros(nvar_mear_count,Highest_Phi);
				for i(1,nvar_mear_count,1);
					if(i==1);
					   Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[1:num_Phi_csum[i]])';
					else;
					   Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
					endif;
				endfor;
			
				Phi_coeff      =  (cumsumc(Phi_coeff_K1'))';
				for i(1,nvar_mear_count,1);
					if(Num_Phi[i] < Highest_Phi);
					   Phi_coeff[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
					endif;
				endfor;
			    Theta_Coeff = exp(parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+nvar_mear_count]);
			endif;
	elseif(Parametrized == 0);
	        Alpha_coeff         = parm[1:nvarml];
			Chol_Alpha_corr     = xpnd(parm[nvarml+1:nvarml+nCholOmega]);
			delta_coeff         = parm[nvarml+nCholOmega+1:nvarml+nCholOmega+nvarmC];
			d_matrix_coeff      = parm[nvarml+nCholOmega+nvarmC+1:nvarml+nCholOmega+nvarmC+ME_Element];
			 
			Chol_Psi_matrix     = parm[nvarml+nCholOmega+nvarmC+ME_Element+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear];
			 
		   
			Beta_coeff          = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma];
			Lambda_coeff        = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat];
			 
			if(Num_MNP > 0);
				 Chol_Lamda     = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr];
			endif;
			
			if(nvar_mear_ordl > 0);
				  upper_threshold_K    =  (parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req]);
				  upper_threshold_K1   = zeros(nvar_mear_ordl,Highest_scale);
				  for i(1,nvar_mear_ordl,1);
							if(num_ordl_cat_req1[i]>0);
								if(i==1);
								   upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[1:num_ordl_cat_req_csum[i]])';
								else;
								   upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
								endif;
							endif;
				  endfor;
				
				 upper_threshold      =  upper_threshold_K1;
				 for i(1,nvar_mear_ordl,1);
							if(num_ordl_cat_req1[i] < Highest_scale);
							  upper_threshold[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity*ones(1,Highest_scale-num_ordl_cat_req1[i]);
							endif;
				 endfor;
				 upper_threshold_decider = negative_infinity*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold ~ positive_infinity*ones(nvar_mear_ordl,1); 
			endif;
			
			if(nvar_mear_count > 0); 
				Phi_coeff1      = (parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi]);
				Phi_coeff_K1    = zeros(nvar_mear_count,Highest_Phi);
				for i(1,nvar_mear_count,1);
					if(i==1);
					   Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[1:num_Phi_csum[i]])';
					else;
					   Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
					endif;
				endfor;
			
				Phi_coeff      =  Phi_coeff_K1;
				for i(1,nvar_mear_count,1);
					if(Num_Phi[i] < Highest_Phi);
					   Phi_coeff[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
					endif;
				endfor;
			    Theta_Coeff = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+nvar_mear_count];
			endif;
	endif;
	
	if(nvar_latent > 1);
	if(Parametrized == 1);
		Chol_Alpha_corr_adjusted = Chol_Alpha_corr';
		Chol_Alpha_corr_adjusted1 = Chol_Alpha_corr';
			
			for i(2,rows(Beta_corr),1);
				row_all = Chol_Alpha_corr_adjusted1[i,1:i-1];
				row_all_sq = row_all.^2;
				denom = sqrt(1+sumc(row_all_sq'));
				for j(1,i,1);
					if (i ne j);
						Chol_Alpha_corr_adjusted[i,j] = Chol_Alpha_corr_adjusted1[i,j]/denom;
						clear temp;
					endif;
					
					if (i eq j);
						Chol_Alpha_corr_adjusted[i,j] = 1/denom;
						clear temp;
					endif;
				endfor;
			endfor;
		   
		Chol_Alpha_corr = Chol_Alpha_corr_adjusted'; clear denom;
	endif;
    endif;
    
	if(Parametrized == 1);
	   Alpha_corr = Chol_Alpha_corr'*Chol_Alpha_corr;
	elseif(Parametrized == 0);
	   Chol_Alpha_corr_adjusted1 = Chol_Alpha_corr';
	   Alpha_corr = Chol_Alpha_corr;
    endif;
   
	Alpha_mat  = Alpha_corr;
	D_matrix   = zeros(nvar_mear,nvar_latent);
	count = 0;
	for i(1,nvar_mear,1);
		for j(1,nvar_latent,1);
			if(ME_Matrix[i,j]==1);
				count = count + 1;
				D_matrix[i,j] = d_matrix_coeff[count];
			endif;
			
		endfor;
	endfor;
	
	if(Parametrized == 1);
        Psi_matrix = Chol_Psi_matrix  .* Chol_Psi_matrix ;
	elseif(Parametrized == 0);
	    Psi_matrix = Chol_Psi_matrix;
	endif;
	
	Psi_matrix_big = eye(nvar_mear);
	Psi_matrix_big = diagrv(Psi_matrix_big,Psi_matrix);
	
	if(Parametrized == 1);
			Lamda_chol = zeros(Alternative_all,Alternative_all);
			Lamda      = zeros(Alternative_all,Alternative_all);
			if(Num_MNP > 0);
			for i(1,Num_MNP,1);
				
				if(i == 1);
				 temp_num1 = 1;
				 temp_num2 = nCholerr_csum[i,1];
				else;
				 temp_num1 = nCholerr_csum[i-1,1] + 1;
				 temp_num2 = nCholerr_csum[i,1];
				endif;
				
				curr_ele = upmat(xpnd(Chol_Lamda[temp_num1:temp_num2]));
				curr_mat = curr_ele'*curr_ele;
				
				if(i == 1);
				   Lamda_chol[2:Nominal_csum[i],2:Nominal_csum[i]] = curr_ele';
				   Lamda[2:Nominal_csum[i],2:Nominal_csum[i]] = curr_mat;
				else;
				   Lamda_chol[Nominal_csum[i-1,1]+2:Nominal_csum[i],Nominal_csum[i-1,1]+2:Nominal_csum[i]] = curr_ele';  
				   Lamda[Nominal_csum[i-1,1]+2:Nominal_csum[i],Nominal_csum[i-1,1]+2:Nominal_csum[i]] = curr_mat;  
				endif;
			endfor;
			endif;
			
			if(num_nominal > Num_MNP);
			  if(Num_MNP > 0);
					for i(Num_MNP+1,num_nominal,1);
						Lamda_chol[Nominal_csum[Num_MNP]+2*(i-Num_MNP),Nominal_csum[Num_MNP]+2*(i-Num_MNP)] = 1; 
						Lamda[Nominal_csum[Num_MNP]+2*(i-Num_MNP),Nominal_csum[Num_MNP]+2*(i-Num_MNP)] = 1;
					endfor;
			  else;
				   for i(Num_MNP+1,num_nominal,1);
						if(i == 1);
						  Lamda_chol[2,2] = 1; 
						  Lamda[2,2] = 1;
						else;
						  Lamda_chol[Nominal_csum[i-1]+2,Nominal_csum[i-1]+2] = 1; 
						  Lamda[Nominal_csum[i-1]+2,Nominal_csum[i-1]+2] = 1;
						endif;
					endfor;
			  endif;
			endif;	
	elseif(Parametrized == 0);		
	        Lamda_chol = zeros(Alternative_all,Alternative_all);
			Lamda      = zeros(Alternative_all,Alternative_all);
			if(Num_MNP > 0);
			for i(1,Num_MNP,1);
				
				if(i == 1);
				 temp_num1 = 1;
				 temp_num2 = nCholerr_csum[i,1];
				else;
				 temp_num1 = nCholerr_csum[i-1,1] + 1;
				 temp_num2 = nCholerr_csum[i,1];
				endif;
				
				curr_mat = xpnd(Chol_Lamda[temp_num1:temp_num2]);
						
				if(i == 1);
				   Lamda[2:Nominal_csum[i],2:Nominal_csum[i]] = curr_mat;
				else;
				   Lamda[Nominal_csum[i-1,1]+2:Nominal_csum[i],Nominal_csum[i-1,1]+2:Nominal_csum[i]] = curr_mat;  
				endif;
			endfor;
			endif;
			
			if(num_nominal > Num_MNP);
			  if(Num_MNP > 0);
					for i(Num_MNP+1,num_nominal,1);
						Lamda[Nominal_csum[Num_MNP]+2*(i-Num_MNP),Nominal_csum[Num_MNP]+2*(i-Num_MNP)] = 1;
					endfor;
			  else;
				   for i(Num_MNP+1,num_nominal,1);
						if(i == 1);
						  Lamda[2,2] = 1;
						else;
						  Lamda[Nominal_csum[i-1]+2,Nominal_csum[i-1]+2] = 1;
						endif;
					endfor;
			  endif;
			endif;	
	endif;	
	emp_mat = 0;
	
	ThreadBegin;
	alpha_gradientF      = lgd_Alpha1(emp_mat);
	ThreadEnd;
	
	ThreadBegin;
	Alpha_corr_gradientF = lgd_AlphaCorr1(Chol_Alpha_corr,Chol_Alpha_corr_adjusted1);
	ThreadEnd;
	
	ThreadBegin;
	delta_gradientF      = lgd_Gamma1(Theta_Coeff);
	ThreadEnd;
	
	ThreadBegin;
	D_matrix_gradientF   = lgd_DMat1(emp_mat);
	ThreadEnd;
	
	ThreadBegin;
	Psi_gradientF        = lgd_Psi1(Chol_Psi_matrix);
	ThreadEnd;
	
	ThreadBegin;
	Beta_gradientF       = lgd_Beta1(emp_mat);
	ThreadEnd;
	
	ThreadBegin;
	Lambda_gradientF     = lgd_Lambda1(emp_mat);
	ThreadEnd;
	
	ThreadJoin;
	
	
	ThreadBegin;
	if(Num_MNP > 0);
	Lamda_gradientF     = lgd_Lamda1(Lamda_chol);
	endif;
	ThreadEnd;
	
	ThreadBegin;
	if(nvar_mear_ordl > 0);
	upper_threshold_gradientF     = lgd_threshold1(upper_threshold_K1);
	endif;
	ThreadEnd;
	
	ThreadBegin;
	if(nvar_mear_count > 0);
	Phi_gradientF     = lgd_Phi1(Phi_coeff_K1);
	endif;
	ThreadEnd;
	
    ThreadBegin;
	if(nvar_mear_count > 0);
	Theta_gradientF     = lgd_Theta(Theta_coeff);
	endif;
	ThreadEnd;
		
	ThreadJoin;
		
	gradient = {};
	gradient = gradient ~ alpha_gradientF ~ alpha_corr_gradientF ~ delta_gradientF ~ D_matrix_gradientF ~ Psi_gradientF ~ Beta_gradientF ~ Lambda_gradientF ;

	if(Num_MNP > 0);
		gradient = gradient ~ Lamda_gradientF;
	endif;

	if(nvar_mear_ordl > 0);
	  gradient = gradient ~ upper_threshold_gradientF;
	endif;

	if(nvar_mear_count > 0);
		gradient = gradient ~ Phi_gradientF ~ Theta_gradientF ;
	endif;
    
    if(Parametrized == 0);
        Gradient_store1 = gradient;
    endif;
    
	retp(gradient);
endp;

//Aspatial actual likelihood function
proc(9)=lprT1(r_st,r_end,seed_send);
	local iden_matrix1,iden_matrix2,one_negative1,one_negative2,seednext,Likelihood,U_Y,Full_error,e1,e12,e2,M,Alt_chosen1,Alt_chosen2,temp1,temp2,ch;
    local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Curr_Lower_Threshold,Curr_Upper_Threshold,p1,p2,p3,p4;
    local pair_GG,g1,g2,rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,p3_1_uo,ss_up;
    local R_GG,mean_final,p4_temp,sss,Chol_Alpha_corr_adjusted1,temp,seed20,p3_1_up,Temp_negative,p3_1_low,ss_low,upper_threshold_K,upper_threshold_decider,Chol_Lamda;
    local Lamda_chol,temp_num1,temp_num2,curr_ele,curr_mat,Beta_coeff_expand,Alt_chosen,iden_matrix,one_negative,row_add,g3_1_low,p_diff;
    local pair_ogc_count,pair_ogcn_count,pair_nn_count,p2_temp1,p2_temp2,p2_temp3,p2_temp4,g3_1_up,g4_temp,p4_tempd,count,cc_up,cc_low;	
	local phi_All,phi_mat,temp_arr,Gamma_phi,ZGP,temp_store,part1,mean_gu_final,var_gu_final,p4_1,g4_1,ss,pair1,pair2,g3,g4,g11,g22;
	local delta,ME_Error_Mat,delta_bar,zs,Y_pair1,U_pair1,Y_pair2,U_pair2,Full_error_pair1,Full_error_pair2,Full_error_pair12,Mq,obs_pairs,temp_check,pair2_all;
	local Store_ogc_temp,Store_ogcn_temp,Store_nn_temp,obs_temp,LL_temp,pair2_index,Hess_ogc_temp,Hess_ogcn_temp,Hess_nn_temp,Hess_cc_temp,Store_cc_temp;
	local pair_cc_count,p1_hh,h2_temp1,h2_temp2,h2_temp3,h2_temp4,h3_1_up,h4_temp,p1_dm,p1_dr,g_combine,fsend,S1A1,S1A2,S12A12,corr_mat,Lambda_mat,h3_1_low;
		
   seednext = seed_send;
   Likelihood = {};
   
   obs_temp = r_end - r_st + 1;
   if(nvar_mear_cont > 0 );
	   Store_cc_temp = zeros(obs_temp,cc_elet1+1);
   else;
	   Store_cc_temp = zeros(1,2);  
   endif; 
   
   if(nvar_ogc > 1 );
	Store_ogc_temp  = zeros(obs_temp*Com_ogc_r1,13);
   else;
	Store_ogc_temp  = zeros(1,2);
   endif;
   
   if(nvar_ogc > 0 );
	  Store_ogcn_temp = zeros(obs_temp*Com_ogcn_r1,Com_ogcn_c1);
   else;
	  Store_ogcn_temp = zeros(1,2);
   endif;
   
   if(num_nominal > 1);
      Store_nn_temp    = zeros(obs_temp*Com_nn_r1,Com_nn_c1);
   else;
	  Store_nn_temp    = zeros(1,2);
   endif;
      
   if(Parametrized == 0);
	   if(nvar_mear_cont > 0 );
	     Hess_cc_temp   = zeros(obs_temp,h_cc_c);
	   else;
		 Hess_cc_temp   = zeros(1,1);
	   endif;
	   
	   if(nvar_ogc > 1 );
	      Hess_ogc_temp  = zeros(obs_temp*Com_ogc_r1,24);
	   else;
		  Hess_ogc_temp  = zeros(1,1);
	   endif;
	   
	   if(nvar_ogc > 0 );
	      Hess_ogcn_temp = zeros(obs_temp*Com_ogcn_r1,h_ogcn_c);
	   else;
		  Hess_ogcn_temp = zeros(1,1);
	   endif;
	   
	   if(num_nominal > 1);
		 Hess_nn_temp   = zeros(obs_temp*Com_nn_r1,h_nn_c);
	   else;
		 Hess_nn_temp   = zeros(1,1);
	   endif;
   elseif(Parametrized == 1);
	   Hess_cc_temp   = zeros(1,1);
	   Hess_ogc_temp  = zeros(1,1);
	   Hess_ogcn_temp = zeros(1,1);
	   Hess_nn_temp   = zeros(1,1);
   endif;
   
   fsend         = 0;
   pair_cc_count = 0;
   pair_ogc_count = 0;
   pair_ogcn_count = 0;
   pair_nn_count = 0;
   
   for i(r_st,r_end,1);
	   	   
	   U_Y = {}; p1=1;
	   Full_error = {}; e1 = {}; e12 = {}; e2 = {}; 
	   
	   Lambda_mat = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
       
	   e1   = e1 ~  ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
       e12  = e12 ~ ( D_matrix * Alpha_mat * Lambda_mat');
       e2   = e2 ~ ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
	   
       Full_error = Full_error | (e1~e12);
       Full_error = Full_error | (e12'~e2);
   
	   
	   U_Y   = U_Y | Y_vec[i,.]'| Utility[i,.]';
	   	   
	   M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
	   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
	   
	   Alt_chosen = (Main_data[i,Altchm])';
	   
	   for j(1,num_nominal,1);
		   iden_matrix = eye(All_Nominal[1,j]-1);
           one_negative = -1*ones(All_Nominal[1,j]-1,1);
		   if(Alt_chosen[j] eq 1);
			temp1 = one_negative ~ iden_matrix;
		   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
			temp1 = iden_matrix ~ one_negative;
		   else;
			ch = Alt_chosen[j];
			temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
		   endif;
		
	       if(j == 1);
		      M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
		   else;
			  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
		   endif;
		  
		   clear temp1;
	   endfor;
	   
	   
		B_Tild = M * U_Y;
	    Error_Tild = M * Full_error * M';
		
		BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];                              
	    if(nvar_mear_cont > 0);
		    Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];     
	    endif;
		
		Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];  
	    
		if(nvar_mear_cont > 0);
		   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont]; 
		   Diff_Mean     = (Main_data[i,Continous_Index])';      
	       Diff_Mean_mu  = B_Tild[1:nvar_mear_cont]; 
		endif;
		
	    
		if(nvar_mear_cont > 0);
			Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
			Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
		else;
			Mean_changed =  BU_Tild ;
			Error_changed = Error_U_Tild ;
		endif;
		
		if(nvar_mear_cont > 0);
		   pair_cc_count = pair_cc_count + 1;
		   p1    = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
		   p1_dm = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
		   p1_dr = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
		   g_combine = (p1_dm|p1_dr) ;
		   
		   Store_cc_temp[pair_cc_count,1]  = p1;
		   Store_cc_temp[pair_cc_count,2:rows(g_combine)+1]  = g_combine';
		   if(p1 <= upper_limit);
		      p1 = (p1-((p1<=upper_limit)*(p1-upper_limit)));
		   endif;
	       if(Parametrized == 0);
			   p1_hh = pdfHess(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
			   Hess_cc_temp[pair_cc_count,1:cols(p1_hh)]   = p1_hh;
		   endif;
		endif;
	   
	    Curr_Lower_Threshold = {};
		Curr_Upper_Threshold = {};
		
		
		if(nvar_mear_ordl > 0);
			Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
			Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ; 
		endif;
		
				
		if(nvar_mear_count > 0);
			Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
			Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
        endif;
			
		Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
		Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
		
		if(nvar_ogc > 1);
			p2 = 1; 
			for g1(1,nvar_ogc-1,1);
		        for g2(g1+1,nvar_ogc,1);
					
                    pair_ogc_count = pair_ogc_count + 1;					
					rho_low_g1  =  (Curr_Lower_Threshold[1,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
			        rho_low_g2  =  (Curr_Lower_Threshold[1,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
			        rho_up_g1   =  (Curr_Upper_Threshold[1,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
			        rho_up_g2   =  (Curr_Upper_Threshold[1,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
			        var_g1g2    =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
	           
			   
			        p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
			        
					p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
					p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
					p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
					p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
					
					Store_ogc_temp[pair_ogc_count,1:3] = p2_temp1';
					Store_ogc_temp[pair_ogc_count,4:6] = p2_temp2';
					Store_ogc_temp[pair_ogc_count,7:9] = p2_temp3';
					Store_ogc_temp[pair_ogc_count,10:12] = p2_temp4';
					Store_ogc_temp[pair_ogc_count,13] = p2_temp;
					
					if(Parametrized == 0);
						h2_temp1 = cdfbvn_Hess(rho_up_g1,rho_up_g2,var_g1g2);
					    h2_temp2 = cdfbvn_Hess(rho_up_g1,rho_low_g2,var_g1g2);
					    h2_temp3 = cdfbvn_Hess(rho_low_g1,rho_up_g2,var_g1g2);
					    h2_temp4 = cdfbvn_Hess(rho_low_g1,rho_low_g2,var_g1g2);
						
						Hess_ogc_temp[pair_ogc_count,1:6]   = h2_temp1';
					    Hess_ogc_temp[pair_ogc_count,7:12]  = h2_temp2';
					    Hess_ogc_temp[pair_ogc_count,13:18] = h2_temp3';
					    Hess_ogc_temp[pair_ogc_count,19:24] = h2_temp4';
					endif;
					
					if(p2_temp > upper_limit);
					   p2 = p2*p2_temp;
				    else;
					   p2 = p2* (p2_temp-((p2_temp<=upper_limit)*(p2_temp-upper_limit)));
					endif;
					clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4; 
		        endfor;
	        endfor;
		else;
			p2 = 1;
		endif;
		
		if(nvar_ogc > 0);
			p3 = 1; 
			for v1(1,nvar_ogc,1);
		        for g1(1,num_nominal,1);
	                
					pair_ogcn_count = pair_ogcn_count + 1;
					D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
					D_VG[1,v1] = 1;
					
					if(g1 == 1);
					   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
				    else;
					   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
				    endif;
					
					rho_low_g3 = D_VG*Curr_Lower_Threshold';
		            rho_up_g3  = D_VG*Curr_Upper_Threshold';
					rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
		   
		            mean_gu    = D_VG*Mean_changed;
		            var_gu     = D_VG*Error_changed*D_VG';
		   
		            om  = sqrt(diag(var_gu));
		            mean_low_final = (rho_low_g3 - mean_gu)./om;
		            mean_up_final  = (rho_up_g3 - mean_gu)./om;
		   
					var_final      = corrvc(var_gu);
		            var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
		   
		            
		            
					if(Parametrized == 1);
							if(All_Nominal[1,g1]> 2);
								seed20 = seednext;
                                if(MACML == 1);
									{p3_1_up,g3_1_up,ss_up} = pdfmvnaC(mean_up_final',var_final,seed20,0);
									{p3_1_low,g3_1_low,ss_up} = pdfmvnaC(mean_low_final',var_final,seed20,0);
								elseif(GHK == 1);
									{p3_1_up,g3_1_up,ss_up}   = pdfmvnGHK(mean_up_final',var_final,seed20);
									{p3_1_low,g3_1_low,ss_up} = pdfmvnGHK(mean_low_final',var_final,seed20);
								endif;
								p_diff = p3_1_up - p3_1_low ;
								seednext = ss_up;
								Store_ogcn_temp[pair_ogcn_count,1] = p3_1_up;
								Store_ogcn_temp[pair_ogcn_count,2:cols(g3_1_up)+1] = g3_1_up;
								Store_ogcn_temp[pair_ogcn_count,cols(g3_1_up)+1+1] = p3_1_low;
								Store_ogcn_temp[pair_ogcn_count,cols(g3_1_up)+1+1+1:cols(g3_1_up)+1+1+cols(g3_1_low)] = g3_1_low;
							else;
								p3_1_up   = cdfbvn(mean_up_final[1,1],mean_up_final[2,1],var_final[1,2]);
								g3_1_up   = cdfbvn_grad(mean_up_final[1,1],mean_up_final[2,1],var_final[1,2]);
								p3_1_low  = cdfbvn(mean_low_final[1,1],mean_low_final[2,1],var_final[1,2]);
								g3_1_low  = cdfbvn_grad(mean_low_final[1,1],mean_low_final[2,1],var_final[1,2]);
								p_diff = p3_1_up - p3_1_low ;
								Store_ogcn_temp[pair_ogcn_count,1] = p3_1_up;
								Store_ogcn_temp[pair_ogcn_count,2:rows(g3_1_up)+1] = g3_1_up';
								Store_ogcn_temp[pair_ogcn_count,rows(g3_1_up)+1+1] = p3_1_low;
								Store_ogcn_temp[pair_ogcn_count,rows(g3_1_up)+1+1+1:rows(g3_1_up)+1+1+rows(g3_1_low)] = g3_1_low';
							endif;
					elseif(Parametrized == 0);
						 if(All_Nominal[1,g1]> 2);
							seed20 = seednext;
                            {p3_1_up,g3_1_up,h3_1_up,ss_up}    = MVNcdfHess(mean_up_final',var_final,seed20);
							{p3_1_low,g3_1_low,h3_1_low,ss_up} = MVNcdfHess(mean_low_final',var_final,seed20);
							p_diff = p3_1_up - p3_1_low;
							seednext = ss_up;
							Store_ogcn_temp[pair_ogcn_count,1]                 = p3_1_up;
							Store_ogcn_temp[pair_ogcn_count,2:cols(g3_1_up)+1] = g3_1_up;
							Store_ogcn_temp[pair_ogcn_count,cols(g3_1_up)+1+1] = p3_1_low;
                            Store_ogcn_temp[pair_ogcn_count,cols(g3_1_up)+1+1+1:cols(g3_1_up)+1+1+cols(g3_1_low)] = g3_1_low;
							Hess_ogcn_temp[pair_ogcn_count,1:cols(h3_1_up)] = h3_1_up;
							Hess_ogcn_temp[pair_ogcn_count,cols(h3_1_up)+1:cols(h3_1_up)+cols(h3_1_low)] = h3_1_low;
						else;
							p3_1_up   = cdfbvn(mean_up_final[1,1],mean_up_final[2,1],var_final[1,2]);
							g3_1_up   = cdfbvn_grad(mean_up_final[1,1],mean_up_final[2,1],var_final[1,2]);
							h3_1_up   = cdfbvn_Hess(mean_up_final[1,1],mean_up_final[2,1],var_final[1,2]);
							p3_1_low  = cdfbvn(mean_low_final[1,1],mean_low_final[2,1],var_final[1,2]);
							g3_1_low  = cdfbvn_grad(mean_low_final[1,1],mean_low_final[2,1],var_final[1,2]);
							h3_1_low  = cdfbvn_Hess(mean_low_final[1,1],mean_low_final[2,1],var_final[1,2]);
							p_diff = p3_1_up - p3_1_low;
							Store_ogcn_temp[pair_ogcn_count,1] = p3_1_up;
							Store_ogcn_temp[pair_ogcn_count,2:rows(g3_1_up)+1] = g3_1_up';
							Store_ogcn_temp[pair_ogcn_count,rows(g3_1_up)+1+1] = p3_1_low;
                            Store_ogcn_temp[pair_ogcn_count,rows(g3_1_up)+1+1+1:rows(g3_1_up)+1+1+rows(g3_1_low)] = g3_1_low';
							Hess_ogcn_temp[pair_ogcn_count,1:rows(h3_1_up)] = h3_1_up';
							Hess_ogcn_temp[pair_ogcn_count,rows(h3_1_up)+1:rows(h3_1_up)+rows(h3_1_low)] = h3_1_low';
						endif;
					endif;	
					if(p_diff > upper_limit);
						p3 = p3*p_diff;
					else;
						p3= p3* (p_diff-((p_diff<=upper_limit)*(p_diff-upper_limit)));
					endif;
											 
					clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,g3_1_up,p3_1_up;
				 endfor;
			 endfor;
		 else;
			 p3 = 1;
		 endif;
		 
	
        p4 = 1;
		
		if(num_nominal > 1);
	    for g1(1,num_nominal-1,1);
		    for g2(g1+1,num_nominal,1);
			    R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_ogc+Alternative_all-num_nominal);
				
				pair_nn_count = pair_nn_count + 1;
				if(g1 == 1);
				   R_GG[1:M_mat_Track[1,g1],nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
			    else;
				   R_GG[1:M_mat_Track[1,g1],nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
			    endif;
			   
				R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_ogc+M_mat_Track_csum[g2-1,1]+1:nvar_ogc+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
				
	            mean_gu    = -(R_GG*Mean_changed);
			    var_gu     = R_GG*Error_changed*R_GG';
		        
				om  = sqrt(diag(var_gu));
		        mean_final = mean_gu./om;
		   
		        var_final      = corrvc(var_gu);
		        var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
		   
		        
				
				if(Parametrized == 1);
					if((All_Nominal[1,g1]+All_Nominal[1,g2]-2) > 2);
						seed20 = seednext;
                        if(MACML == 1);
						   {p4_temp,g4_temp,sss} = pdfmvnaC(mean_final',var_final,seed20,0);
						elseif(GHK == 1);
							{p4_temp,g4_temp,sss} = pdfmvnGHK(mean_final',var_final,seed20);
						endif;
						seednext = sss;
						Store_nn_temp[pair_nn_count,1] = p4_temp;
						Store_nn_temp[pair_nn_count,2:cols(g4_temp)+1] = g4_temp;
					else;
						p4_temp  = cdfbvn(mean_final[1,1],mean_final[2,1],var_final[1,2]);
						p4_tempd = cdfbvn_grad(mean_final[1,1],mean_final[2,1],var_final[1,2]);
						Store_nn_temp[pair_nn_count,1] = p4_temp;
						Store_nn_temp[pair_nn_count,2:rows(p4_tempd)+1] = p4_tempd';
					endif;
				elseif(Parametrized == 0);
						if((All_Nominal[1,g1]+All_Nominal[1,g2]-2) > 2);
						    seed20 = seednext;
                            {p4_temp,g4_temp,h4_temp,sss} = MVNcdfHess(mean_final',var_final,seed20);
							seednext = sss;
							Store_nn_temp[pair_nn_count,1] = p4_temp;
							Store_nn_temp[pair_nn_count,2:cols(g4_temp)+1] = g4_temp;
							Hess_nn_temp[pair_nn_count,1:cols(h4_temp)] = h4_temp;
						else;
							p4_temp  = cdfbvn(mean_final[1,1],mean_final[2,1],var_final[1,2]);
							p4_tempd = cdfbvn_grad(mean_final[1,1],mean_final[2,1],var_final[1,2]);
							h4_temp  = cdfbvn_Hess(mean_final[1,1],mean_final[2,1],var_final[1,2]);
							Store_nn_temp[pair_nn_count,1] = p4_temp;
							Store_nn_temp[pair_nn_count,2:rows(p4_tempd)+1] = p4_tempd';
							Hess_nn_temp[pair_nn_count,1:rows(h4_temp)] = h4_temp';
						endif;
				endif;
		        
				if(p4_temp > upper_limit);
				    p4 = p4*p4_temp;
				else;
				    p4 = p4* (p4_temp-((p4_temp<=upper_limit)*(p4_temp-upper_limit)));
				endif;
							    
				clear R_GG,mean_gu,var_gu,om,mean_final,var_final,p4_temp,p4_temp,p4_tempd;
			endfor;
		endfor;
		endif;
		
		Likelihood = Likelihood | (ln(p1*p2*p3*p4));
		
		clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean;
	endfor;
	if(Parametrized == 1);
       retp(Likelihood,Store_ogc_temp[1:pair_ogc_count,.],Store_ogcn_temp[1:pair_ogcn_count,.],Store_nn_temp[1:pair_nn_count,.],fsend,fsend,fsend,fsend,Store_cc_temp[1:pair_cc_count,.]);
    elseif(Parametrized == 0);
	   retp(Likelihood,Store_ogc_temp[1:pair_ogc_count,.],Store_ogcn_temp[1:pair_ogcn_count,.],Store_nn_temp[1:pair_nn_count,.],Hess_cc_temp[1:pair_cc_count,.],Hess_ogc_temp[1:pair_ogc_count,.],Hess_ogcn_temp[1:pair_ogcn_count,.],Hess_nn_temp[1:pair_nn_count,.],Store_cc_temp[1:pair_cc_count,.]);
    endif;
endp;

proc(1)=lgd_Alpha1(emp_mat);
	local alpha_gradient,ialpha,alphad,AlphaWd,zd,zsd,Z_matd,yd,j,Utilityd,Total_g,pair_ogc_count,pair_ogcn_count,pair_nn_count,Full_error,U_Y,U_Yd,rho_low_g2,mean_up_final_d,mean_final;
	local pair1,pair2,M,Mq,Alt_chosen,iden_matrix,one_negative,temp1,ch,obs_pairs,temp_check,pair2_all,pair2_index,Y_pair1,U_pair1,Y_pair2,U_pair2,Y_pair1d,U_pair1d,Y_pair2d,U_pair2d;
	local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Full_error_pair1,Full_error_pair2,Full_error_pair12;
	local B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Diff_Mean_mu_d,Mean_changed_d,Error_changed_d,Full_error_pair1d,Full_error_pair2d,Full_error_pair12d;		
	local Curr_Lower_Threshold,Curr_Upper_Threshold,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp11,p2_temp22,p2_temp33,p2_temp44,gg_d,rho_low_g1,g1,g2,g3,g4,g11,g22;
	local p1_dd,p2_dd,p3_dd,p4_dd,p1,p1_d,p1_dm,p1_dr,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,mean_gu_d,om,mean_low_final,mean_up_final,var_final,mean_low_final_d,R_GG,num_element;
	local rho_up_g1,rho_up_g2,mean_final_d,var_g1g2,var_g1g2_d,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4,S1A1,S1A2,S12A12,corr_mat,pair_cc_count;
	local gg_temp,e1,e12,e2,gg,num_tote,num_mene,num_vare,p1_up,p1_low,p_diff,p3_dd_temp,Lambda_mat;
   
   alpha_gradient = {};
   
   for ialpha(1,nvarml,1);
	   
	   if(_max_active[ialpha] eq 0);
		   alpha_gradient = alpha_gradient ~ zeros(nobs,1);
	   else;
		   
		   alphad = zeros(nvarml,1); alphad[ialpha] = 1;
           AlphaWd = (ones(nvar_latent,1) .*. alphad  )*~(Main_data[.,ivgenvl])';
		   zd = {}; j = 1;
			
			do until j > nvar_latent;
			   zd = zd~(sumc(AlphaWd[(j-1)*nvarml+1:(j*nvarml),.]));                // Z stores the latent variables value for each observation. nobs X nvar_latent. 1st col has z1, 2nd z2 and so on for all observations.
			   j = j+1;
			endo;
		    
			yd = {}; j = 1;
			
			do until j > nobs;
			   yd = yd| (D_matrix * zd[j,.]' )'  ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
			   j = j+1;
			endo;

			Utilityd = {}; j = 1;
   
		    do until j > nobs;
			   Utilityd = Utilityd|(GP_Global[(j-1)*Alternative_all+1:(j-1)*Alternative_all+Alternative_all,.] * zd[j,.]' )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
			   j = j+1;
		    endo;
			clear zd;
		    
			gg_temp = {};
            pair_cc_count = 0;
			pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;

            for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0; p1_dd = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e2 = {}; 
				   
				   Lambda_mat = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
       
				   e1   = e1  ~ ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
				   e12  = e12 ~ ( D_matrix * Alpha_mat * Lambda_mat');
				   e2   = e2  ~ ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e12'~e2);
				   
				   U_Y   = U_Y  | Y_vec[i,.]'| Utility[i,.]';  
				   U_Yd  = U_Yd | yd[i,.]'   | Utilityd[i,.]';
				   
				   M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   
				   Alt_chosen = (Main_data[i,Altchm])';
				   
				   for j(1,num_nominal,1);
					   iden_matrix = eye(All_Nominal[1,j]-1);
					   one_negative = -1*ones(All_Nominal[1,j]-1,1);
					   if(Alt_chosen[j] eq 1);
						temp1 = one_negative ~ iden_matrix;
					   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
						temp1 = iden_matrix ~ one_negative;
					   else;
						ch = Alt_chosen[j];
						temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
					   endif;
					
					   if(j == 1);
						  M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
					   else;
						  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
					   endif;
					  
					   clear temp1;
				   endfor;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];   
                   BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)]; 				   
				   
				   if(nvar_mear_cont > 0);
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];     
				   endif;
				 
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];  
				   
				   if(nvar_mear_cont > 0);
				   Error_Y          = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];  
				   Diff_Mean        = (Main_data[i,Continous_Index])';      
				   Diff_Mean_mu     = B_Tild[1:nvar_mear_cont];
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];  
			       endif;
			   
			       if(nvar_mear_cont > 0);
					   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
					   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
			       else;
				       Mean_changed =  BU_Tild ;
				       Error_changed = Error_U_Tild ;
				   endif;
				   
				   
				   if(nvar_mear_cont > 0);
				   Mean_changed_d =  BU_Tild_d - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
			       else;
				   Mean_changed_d =  BU_Tild_d;
			       endif;
			   
			       Curr_Lower_Threshold = {};
		           Curr_Upper_Threshold = {};
		
		            if(nvar_mear_ordl > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
					endif;
					
					if(nvar_mear_count > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
					endif;
						
					Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
		           
				    p1_dd = 0;
					if(nvar_mear_cont > 0);
					   pair_cc_count = pair_cc_count + 1;
					   if(Store_cc[pair_cc_count,1] > upper_limit);
						  p1   = Store_cc[pair_cc_count,1];
						  p1_d = Store_cc[pair_cc_count,2:nvar_mear_cont+1];
						  p1_dd = -(1/p1)*(p1_d * Diff_Mean_mu_d);
					   endif;
					 endif;
				   			   
					 if(nvar_ogc > 1);	   			   
						   p2_dd = 0; 
						   for g1(1,nvar_ogc-1,1);
		                          for g2(g1+1,nvar_ogc,1);
								   
								   pair_ogc_count = pair_ogc_count + 1;
								   
								   rho_low_g1d =  (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
								   rho_low_g2d =  (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
								   rho_up_g1d =   (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
								   rho_up_g2d =   (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
						   
								   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
								   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
								   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
								   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
								   
								   if(Store_ogc[pair_ogc_count,13] > upper_limit);
									  p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
								   endif;		   
								   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
							   endfor;
						   endfor;
					  else;
						  p2_dd = 0; 
					  endif;
			   
					  if(nvar_ogc > 0);	 
						p3_dd = 0; 
						for v1(1,nvar_ogc,1);
							for g1(1,num_nominal,1);
								
								pair_ogcn_count = pair_ogcn_count + 1;
								D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
								D_VG[1,v1] = 1;
								
								if(g1 == 1);
								   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
								else;
								   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
								endif;
							   
								rho_low_g3 = D_VG*Curr_Lower_Threshold';
								rho_up_g3  = D_VG*Curr_Upper_Threshold';
								rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
					   
								mean_gu    = D_VG*Mean_changed;
								var_gu     = D_VG*Error_changed*D_VG';
								
								mean_gu_d  = D_VG*Mean_changed_d;
					   
								om  = sqrt(diag(var_gu));
								mean_low_final = (rho_low_g3 - mean_gu)./om;
								mean_up_final  = (rho_up_g3 - mean_gu)./om;
					   
								var_final      = corrvc(var_gu);
								var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
								
								mean_low_final_d = (- mean_gu_d)./om;
								mean_up_final_d  = (- mean_gu_d)./om;
					            
								num_tote  = All_Nominal[1,g1] + (All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5);
								num_mene  = All_Nominal[1,g1] ;
								num_vare  = All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5;
								
								p1_up   = Store_ogcn[pair_ogcn_count,1];
	                            p1_low  = Store_ogcn[pair_ogcn_count,1+num_tote+1];
	                            p_diff  = p1_up - p1_low;							
								if(p_diff > upper_limit);
									p3_dd_temp = (1/p_diff) *(Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d - Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d);
									p3_dd = p3_dd + p3_dd_temp;
								endif;
															 
								 clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
							 endfor;
						 endfor;
					 else;
						 p3_dd = 0;
					 endif;
		 
		         				 
		        p4_dd = 0;
				if(num_nominal > 1);
				 for g1(1,num_nominal-1,1);
					for g2(g1+1,num_nominal,1);
						R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_ogc+Alternative_all-num_nominal);
				
						pair_nn_count = pair_nn_count + 1;
						if(g1 == 1);
						   R_GG[1:M_mat_Track[1,g1],nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
						else;
						   R_GG[1:M_mat_Track[1,g1],nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
						endif;
					   
						R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_ogc+M_mat_Track_csum[g2-1,1]+1:nvar_ogc+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
						
						mean_gu    = -(R_GG*Mean_changed);
						mean_gu_d  = -(R_GG*Mean_changed_d);
												
						var_gu     = R_GG*Error_changed*R_GG';
						
						om  = sqrt(diag(var_gu));
						mean_final = mean_gu./om;
				   
						var_final      = corrvc(var_gu);
						var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
						
						mean_final_d  = (mean_gu_d)./om;
				   
						num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
						
						if(Store_nn[pair_nn_count,1] > upper_limit);
						  p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_final_d)  )  ;
						endif;
						
						clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d;
					endfor;
				 endfor;
		         endif;
				 
				 gg = p1_dd + p2_dd + p3_dd + p4_dd;
				 gg_temp = gg_temp | gg;
				   
				 clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
          alpha_gradient = alpha_gradient ~ gg_temp;   

         clear Alphawd,yd,Utilityd;
	 endif;
endfor;
retp(alpha_gradient);
endp;

proc(1)=lgd_AlphaCorr1(Chol_Alpha_corr,Chol_Alpha_corr_adjusted1);
	local alpha_corr_gradient,d_chol_alpha_corr1,ia_corr,icheck,jcheck,row_all,row_all_sq,denom,denom1,d_chol_alpha_corr,Alpha_corrd,Alpha_matd,Udiff_Errord,zd,zsd,Z_matd,yd,j,Utilityd,Total_g,pair_ogc_count,pair_ogcn_count,pair_nn_count,Full_error,U_Y,U_Yd,rho_low_g2,mean_up_final_d,mean_final;
	local pair1,pair2,M,Mq,Alt_chosen,iden_matrix,one_negative,temp1,ch,obs_pairs,temp_check,pair2_all,pair2_index,Y_pair1,U_pair1,Y_pair2,U_pair2,Y_pair1d,U_pair1d,Y_pair2d,U_pair2d;
	local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Full_error_pair1,Full_error_pair2,Full_error_pair12;
	local B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Diff_Mean_mu_d,Mean_changed_d,Error_changed_d,Full_error_pair1d,Full_error_pair2d,Full_error_pair12d;		
	local Curr_Lower_Threshold,Curr_Upper_Threshold,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp11,p2_temp22,p2_temp33,p2_temp44,gg_d,rho_low_g1,g1,g2,g3,g4,g11,g22;
	local p1_dd,p2_dd,p3_dd,p4_dd,p1,p1_d,p1_dm,p1_dr,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,mean_gu_d,om,mean_low_final,mean_up_final,var_final,mean_low_final_d,R_GG,num_element;
	local rho_up_g1,rho_up_g2,mean_final_d,var_g1g2,var_g1g2_d,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4,row_num,col_num,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m;
	local Full_error_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,Shi_r_unq,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,Lambda_mat;
	local var_gu_d,omncd,var_final_d,diff_cdf,w1,w2,S1A1,S1A2,S12A12,corr_mat,S1A1d,S1A2d,S12A12d,corr_matd,gg_temp,e1,e12,e2,e1_d,e12_d,e2_d,gg,pair_cc_count,num_tote,num_mene,num_vare,p1_up,p1_low,p_diff,p3_dd_temp;

alpha_corr_gradient = {};
for ia_corr(1,nCholOmega,1);
	
	if(_max_active[nvarml+ia_corr] eq 0);
		alpha_corr_gradient = alpha_corr_gradient ~ zeros(nobs,1);
	else;
			if(Parametrized == 1);
				d_chol_alpha_corr1 = zeros(nCholOmega,1);    
				d_chol_alpha_corr1[ia_corr]=1;                         
				d_chol_alpha_corr1 = (upmat(xpnd(d_chol_alpha_corr1)))';
				
				for icheck(1,nvar_latent,1);
					for jcheck(1,icheck-1,1);
						if(d_chol_alpha_corr1[icheck,jcheck] eq 1);
							row_num = icheck;
							col_num = jcheck;
							break;
						endif;
					endfor;
				endfor;
				
				row_all = Chol_Alpha_corr_adjusted1[row_num,1:row_num-1];
				row_all_sq = row_all.^2;
				denom = sqrt(1+sumc(row_all_sq'));
				denom1 = (1+sumc(row_all_sq'));
				
				for jcheck(1,row_num,1);
					if(jcheck ne row_num);
						
						if(jcheck eq col_num);
							d_chol_alpha_corr1[row_num,jcheck] = (denom1 - (Chol_Alpha_corr_adjusted1[row_num,jcheck]^2))/(denom*denom1);
						endif;
						
						if(jcheck ne col_num);
							d_chol_alpha_corr1[row_num,jcheck] = (-Chol_Alpha_corr_adjusted1[row_num,jcheck]*Chol_Alpha_corr_adjusted1[row_num,col_num])/(denom*denom1);
						endif;
					endif;
					
					if(jcheck eq row_num);
						d_chol_alpha_corr1[row_num,jcheck] = (-Chol_Alpha_corr_adjusted1[row_num,col_num])/(denom*denom1);
					endif;
				endfor;
				
						
				d_chol_alpha_corr = d_chol_alpha_corr1;
				Alpha_corrd  = d_chol_alpha_corr*Chol_Alpha_corr + Chol_Alpha_corr'*d_chol_alpha_corr';
			elseif(Parametrized == 0);			
			    d_chol_alpha_corr1 = zeros(nCholOmega,1);    
				d_chol_alpha_corr1[ia_corr]=1;                         
				Alpha_corrd = xpnd(d_chol_alpha_corr1);
			endif;
			
			gg_temp = {};
            pair_cc_count = 0;
			pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;

            for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;p1_dd = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e2 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {}; e2_d = {}; 
				   
				   Lambda_mat = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
       
				   e1   = e1  ~  ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
				   e12  = e12 ~  ( D_matrix * Alpha_mat * Lambda_mat');
				   e2   = e2  ~  ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d  ~ ( D_matrix * Alpha_corrd * D_matrix'  );
				   e12_d  = e12_d ~ ( D_matrix * Alpha_corrd * Lambda_mat');
				   e2_d   = e2_d  ~ ( Lambda_mat * Alpha_corrd * Lambda_mat' );
					 
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e12'~e2);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e12_d'~e2_d);
		   
				   U_Y   = U_Y   | Y_vec[i,.]'| Utility[i,.]';  
				   				   
				   M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   
				   Alt_chosen = (Main_data[i,Altchm])';
				   
				   for j(1,num_nominal,1);
					   iden_matrix = eye(All_Nominal[1,j]-1);
					   one_negative = -1*ones(All_Nominal[1,j]-1,1);
					   if(Alt_chosen[j] eq 1);
						temp1 = one_negative ~ iden_matrix;
					   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
						temp1 = iden_matrix ~ one_negative;
					   else;
						ch = Alt_chosen[j];
						temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
					   endif;
					
					   if(j == 1);
						  M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
					   else;
						  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
					   endif;
					  
					   clear temp1;
				   endfor;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   Error_Tild_d = M * Full_error_d * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];                              
				   
				   if(nvar_mear_cont > 0);
				   Error_YU_Tild    = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont]; 
			       Error_YU_Tild_d  = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),1:nvar_mear_cont];     	   
				   endif;
				   
				   Error_U_Tild     = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];  
				   Error_U_Tild_d   = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),nvar_mear_cont+1:cols(Error_Tild_d)];  
				   
				   if(nvar_mear_cont > 0);
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];  
				   Diff_Mean     = (Main_data[i,Continous_Index])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   Error_Y_d     = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];  
				   endif;
				   
				   if(nvar_mear_cont > 0);
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
			       else;
				   Mean_changed =  BU_Tild ;
				   Error_changed = Error_U_Tild ;
			       endif;
			   
			       if(nvar_mear_cont > 0);
				   Mean_changed_d  =   ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) ;
				   Error_changed_d =   Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   else; 
				   Mean_changed_d  =  zeros(rows(BU_Tild),1);
				   Error_changed_d = Error_U_Tild_d;
				   endif;
				   
				   
				   Curr_Lower_Threshold = {};
		           Curr_Upper_Threshold = {};
		
		            if(nvar_mear_ordl > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
					endif;
					
								
					if(nvar_mear_count > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
					endif;
						
					Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
		           
				    p1_dd = 0;
					if(nvar_mear_cont > 0);
					   pair_cc_count = pair_cc_count + 1;
					   if(Store_cc[pair_cc_count,1] > upper_limit);
						  p1    = Store_cc[pair_cc_count,1];
						  p1_dm = Store_cc[pair_cc_count,2:nvar_mear_cont+1];
						  p1_dr = Store_cc[pair_cc_count,nvar_mear_cont+2:nvar_mear_cont+1+cc_eler1];
						  p1_dd = (1/p1)*(p1_dr * vech(Error_Y_d));
					   endif;
					 endif;
				     
				   
				   if(nvar_ogc > 1);	   			   
					   p2_dd = 0; 
					   for g1(1,nvar_ogc-1,1);
		                    for g2(g1+1,nvar_ogc,1);
							   
							   pair_ogc_count = pair_ogc_count + 1;
							   
							   om_low_g1   =   Error_changed[g1,g1];
							   om_low_g2   =   Error_changed[g2,g2];
							   om_up_g1    =   Error_changed[g1,g1];
							   om_up_g2    =   Error_changed[g2,g2];
							   
							   omncd_low_g1   =   Error_changed_d[g1,g1];
							   omncd_low_g2   =   Error_changed_d[g2,g2];
							   omncd_up_g1    =   Error_changed_d[g1,g1];
							   omncd_up_g2    =   Error_changed_d[g2,g2];
							   
							   rho_low_g1md  =  - Mean_changed_d[g1] ;
							   rho_low_g2md  =  - Mean_changed_d[g2] ;
							   rho_up_g1md   =  - Mean_changed_d[g1] ;
							   rho_up_g2md   =  - Mean_changed_d[g2] ;
							   
							   rho_low_g1m  =  (Curr_Lower_Threshold[1,g1] - Mean_changed[g1] ) ;
							   rho_low_g2m  =  (Curr_Lower_Threshold[1,g2] - Mean_changed[g2] ) ;
							   rho_up_g1m   =  (Curr_Upper_Threshold[1,g1] - Mean_changed[g1] ) ;
							   rho_up_g2m   =  (Curr_Upper_Threshold[1,g2] - Mean_changed[g2] ) ;
							   
							   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
							   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
							   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
							   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
							   
							   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
					   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
							   
							   if(Store_ogc[pair_ogc_count,13] > upper_limit);
							      p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
							   endif;
		   
							  
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
							   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
							   endfor;
					   endfor;
				  else;
					  p2_dd = 0; 
			      endif;
			   
                   if(nvar_ogc > 0);	 
					p3_dd = 0; 
					for v1(1,nvar_ogc,1);
						 for g1(1,num_nominal,1);
								
							pair_ogcn_count = pair_ogcn_count + 1;
							D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
							D_VG[1,v1] = 1;
							
							if(g1 == 1);
							   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
					
						   
							rho_low_g3 = D_VG*Curr_Lower_Threshold';
							rho_up_g3  = D_VG*Curr_Upper_Threshold';
							rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
				   
							mean_gu    = D_VG*Mean_changed;
							var_gu     = D_VG*Error_changed*D_VG';
							
							mean_gu_d  = D_VG*Mean_changed_d;
							var_gu_d   = D_VG*Error_changed_d*D_VG';
				   
						    om     =  (diag(var_gu));
							omncd  = (diag(var_gu_d));
							
							mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
							mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
				   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
							
							mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					        mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					   
					        var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
					        var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1],1));
					  
				   
							 shi_r_unq = {};
					         for ishi(1,rows(var_final_d)-1,1);
							      shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d)];
					         endfor;
					         
							    num_tote  = All_Nominal[1,g1] + (All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5);
								num_mene  = All_Nominal[1,g1] ;
								num_vare  = All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5;
								
								p1_up   = Store_ogcn[pair_ogcn_count,1];
	                            p1_low  = Store_ogcn[pair_ogcn_count,1+num_tote+1];
	                            p_diff  = p1_up - p1_low;							
							
							if(p_diff > upper_limit);
								p3_dd_temp = (1/p_diff) *(Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d' + Store_ogcn[pair_ogcn_count,1+num_mene+1:1+num_mene+num_vare] * shi_r_unq' - Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d' - Store_ogcn[pair_ogcn_count,1+num_tote+1+num_mene+1:1+num_tote+1+num_mene+num_vare] * shi_r_unq');
								p3_dd = p3_dd + p3_dd_temp;
							endif;	
                            							
							 clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g11,w2,g2;
					         clear omncd,var_gu_d,var_final_d,shi_r_unq;						 
						  endfor;
					 endfor;
				 else;
					 p3_dd = 0;
				 endif;
		 
		         				 
		         p4_dd = 0;
				 if(num_nominal > 1);
					for g1(1,num_nominal-1,1);
						for g2(g1+1,num_nominal,1);
							R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_ogc+Alternative_all-num_nominal);
				
							pair_nn_count = pair_nn_count + 1;
							if(g1 == 1);
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_ogc+M_mat_Track_csum[g2-1,1]+1:nvar_ogc+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
						    
							mean_gu    = -(R_GG*Mean_changed);
							mean_gu_d  = -(R_GG*Mean_changed_d);
												
							var_gu     = R_GG*Error_changed*R_GG';
							var_gu_d   = R_GG*Error_changed_d*R_GG';
							
							om     = (diag(var_gu));
							omncd  = (diag(var_gu_d));
							
							mean_final = mean_gu./sqrt(om);
					   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
							
							mean_final_d  = (  sqrt(om') .* mean_gu_d' -  mean_gu' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
						  
							shi_r_unq = {};
							for ishi(1,rows(var_final_d)-1,1);
									  shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
							endfor;
							
							num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
							
							if(Store_nn[pair_nn_count,1] > upper_limit);
							  p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  ( Store_nn[pair_nn_count,2:1+num_element] * mean_final_d' + Store_nn[pair_nn_count,1+num_element+1:1+num_element+cols(shi_r_unq)] * shi_r_unq' )  )  ;
							endif;
							
							clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d,var_gu_d,var_final_d,shi_r_unq;
					endfor;
				 endfor;
		         endif;
				    					
				 gg = p1_dd + p2_dd + p3_dd + p4_dd;
				 gg_temp = gg_temp | gg;
				   
				 clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
          alpha_corr_gradient = alpha_corr_gradient ~ gg_temp;   

         clear yd,Utilityd;
	 endif;
endfor;
retp(alpha_corr_gradient);
endp;


proc(1)=lgd_Gamma1(Theta_coeff);
	local delta_gradient,d_chol_alpha_corr1,idel,icheck,jcheck,row_all,row_all_sq,denom,denom1,d_chol_alpha_corr,Alpha_corrd,Alpha_matd,Udiff_Errord,zd,zsd,Z_matd,yd,j,Utilityd,Total_g,pair_ogc_count,pair_ogcn_count,pair_nn_count,Full_error,U_Y,U_Yd,rho_low_g2,mean_up_final_d,mean_final;
	local pair1,pair2,M,Mq,Alt_chosen,iden_matrix,one_negative,temp1,ch,obs_pairs,temp_check,pair2_all,pair2_index,Y_pair1,U_pair1,Y_pair2,U_pair2,Y_pair1d,U_pair1d,Y_pair2d,U_pair2d;
	local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Full_error_pair1,Full_error_pair2,Full_error_pair12;
	local B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Diff_Mean_mu_d,Mean_changed_d,Error_changed_d,Full_error_pair1d,Full_error_pair2d,Full_error_pair12d;		
	local Curr_Lower_Threshold,Curr_Upper_Threshold,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp11,p2_temp22,p2_temp33,p2_temp44,gg_d,rho_low_g1,g1,g2,g3,g4,g11,g22;
	local p1_dd,p2_dd,p3_dd,p4_dd,p1,p1_d,p1_dm,p1_dr,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,mean_gu_d,om,mean_low_final,mean_up_final,var_final,mean_low_final_d,R_GG,num_element;
	local rho_up_g1,rho_up_g2,mean_final_d,var_g1g2,var_g1g2_d,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4,row_num,col_num,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,num_tote,num_mene,num_vare,p1_up,p1_low,p_diff,p3_dd_temp;
	local Full_error_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,Shi_r_unq,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md;
	local var_gu_d,omncd,var_final_d,diff_cdf,w1,w2,Count_Threshold_d,Curr_Lower_Threshold_d,Curr_Upper_Threshold_d,delta_d,Gamma_X_d,Lambda_count_d,dgam_smallC,dgam_term1,Lambda_mat;
	local y2_d,countObs,smallCObs,term2,threshUpper,threshLower,PhiUpper,PhiLower,rho_low_g3_d,rho_up_g3_d,S1A1,S1A2,S12A12,corr_mat,gg_temp,e1,e12,e2,e1_d,e12_d,e2_d,gg,pair_cc_count;

delta_gradient = {};
for idel(1,nvarmC,1);
	if(_max_active[nvarml+nCholOmega+idel] == 0);
		delta_gradient = delta_gradient ~ zeros(nobs,1);
	else;
		delta_d = zeros(nvarmC,1);
		delta_d[idel] = 1;
		
		Gamma_X_d = (ones(nvar_mear,1) .*. delta_d  )*~(Main_data[.,ivgenvC])';
		y2_d = {}; j = 1;
		
		do until j > nvar_mear;
		   y2_d = y2_d~(sumc(Gamma_X_d[(j-1)*nvarmC+1:(j*nvarmC),.]));           // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
		   j = j+1;
		endo;
        
		yd = {};
		if(nvar_mear_count > 0);
			yd =  yd ~ y2_d[.,1:(nvar_mear_cont+nvar_mear_ordl)] ~ zeros(nobs,nvar_mear_count);
					 
			Lambda_count_d = Lambda_count .* y2_d[.,nvar_mear_cont+nvar_mear_ordl+1:nvar_mear] ;
			
			dgam_smallC = Lambda_count_d ./ (Lambda_count + Theta_coeff') + - Lambda_count ./ (Lambda_count + Theta_coeff')^2 .* Lambda_count_d;	
			dgam_term1  = ( Theta_coeff'.* ( (1-smallC)^(Theta_coeff'-1) ./ gamma(Theta_coeff') ) ) .* (-dgam_smallC);
			
			Count_Threshold_d = zeros(nobs,nvar_mear_count*2);
			for iobs(1,nobs,1);
				for jcount(1,nvar_mear_count,1);
					countObs = Main_data[iobs,Count_Index[1,jcount]];
					smallCObs = smallC[iobs,jcount];
					local dthet_term2,dthet_threshUpper,dthet_threshLower,dgam_term2,dgam_threshUpper,dgam_threshLower;
					
					term2 = 0;
					dthet_term2 = 0;
					dgam_term2 = 0;
					
					for icnt (0,countObs,1);
						term2 = term2 + (gamma(Theta_coeff[jcount,1] + iCnt)/(iCnt!) * smallCObs^iCnt);
						dgam_term2  = dgam_term2 + ( ( gamma(Theta_coeff[jcount,1] + iCnt)/(iCnt!) * (iCnt)*smallCObs^(iCnt-1) ) * dgam_smallC[iobs,jcount]);
					endfor;
					
					threshUpper = term1[iobs,jcount] * term2;
					dgam_threshUpper  = dgam_term1[iobs,jcount] * term2  +  term1[iobs,jcount] * dgam_term2;
					
					if(countObs gt 0);  
						term2 = term2 - (gamma(Theta_coeff[jcount,1] + countObs)/(countObs!) * smallCObs^countObs);
						dgam_term2 = dgam_term2 - (gamma(Theta_coeff[jcount,1] + countObs)/(countObs!) * countObs*smallCObs^(countObs-1) *dgam_smallC[iobs,jcount]);
						threshLower = term1[iobs,jcount] * term2;
						phiUpper = (xPhiMat[jcount,countObs+1])';
						phiLower = (xPhiMat[jcount,countObs])';
						dgam_threshLower  = dgam_term1[iobs,jcount] * term2  +  term1[iobs,jcount] * dgam_term2;
					else; 
						threshLower = 0;
						dgam_threshLower = 0;
						phiUpper = 0;
						phiLower = 0;
					endif;

                    threshUpper = minc( threshUpper|0.99999999999999999);
		            threshLower = minc( threshLower|0.99999999999999999);
				
					dgam_threshUpper = 1/pdfn(cdfni(threshUpper ))*dgam_threshUpper;
					dgam_threshLower = 1/pdfn(cdfni(threshLower))*dgam_threshLower;
							   
					Count_Threshold_d[iobs,jcount] = dgam_threshLower;
					Count_Threshold_d[iobs,nvar_mear_count+jcount] = dgam_threshUpper;
				endfor;
			endfor;
		else;
			yd =  yd ~ y2_d;
		endif;
		
        
		    gg_temp = {};
			pair_cc_count  = 0;
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;

            for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;p1_dd = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e2 = {}; 
	               
				   Lambda_mat = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
				  
				   e1   = e1  ~  ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
				   e12  = e12 ~ ( D_matrix * Alpha_mat * Lambda_mat');
				   e2   = e2  ~ ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
				   
                   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e12'~e2);
				   
				   U_Y    = U_Y   | Y_vec[i,.]' | Utility[i,.]';  
				   U_Yd   = U_Yd  | yd[i,.]'    | zeros(Alternative_all,1);
				   
				   M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   
				   Alt_chosen = (Main_data[i,Altchm])';
				   
				   for j(1,num_nominal,1);
					   iden_matrix = eye(All_Nominal[1,j]-1);
					   one_negative = -1*ones(All_Nominal[1,j]-1,1);
					   if(Alt_chosen[j] eq 1);
						temp1 = one_negative ~ iden_matrix;
					   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
						temp1 = iden_matrix ~ one_negative;
					   else;
						ch = Alt_chosen[j];
						temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
					   endif;
					
					   if(j == 1);
						  M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
					   else;
						  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
					   endif;
					  
					   clear temp1;
				   endfor;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)]; 
                   BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)]; 				   
				   
				   if(nvar_mear_cont > 0);
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];     
				   endif;
				   
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];  
				   
				   if(nvar_mear_cont > 0);
				   Error_Y          = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];  
				   Diff_Mean        = (Main_data[i,Continous_Index])';      
				   Diff_Mean_mu     = B_Tild[1:nvar_mear_cont];
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];     
				   endif;
				   
				   if(nvar_mear_cont > 0);
				   Mean_changed   =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed  =  Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   Mean_changed_d =  BU_Tild_d   - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   else;		   
				   Mean_changed   =  BU_Tild ;
				   Mean_changed_d =  BU_Tild_d ;
				   Error_changed  = Error_U_Tild ;
				   endif;
				   
				   
				   Curr_Lower_Threshold = {};
		           Curr_Upper_Threshold = {};
				   
				   Curr_Lower_Threshold_d = {};
		           Curr_Upper_Threshold_d = {};
				   
				    if(nvar_mear_ordl > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
						
						Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*lower_threshold_matrix[i,.] ;
						Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*upper_threshold_matrix[i,.] ;
					endif;
					
					if(nvar_mear_count > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
						
						Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ Count_Threshold_d[i,1:nvar_mear_count] ;
						Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ Count_Threshold_d[i,nvar_mear_count+1:2*nvar_mear_count] ;
					endif;
						
					Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
					
					Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ (zeros(1,Alternative_all-num_nominal)) ;
					Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ (zeros(1,Alternative_all-num_nominal));
		
		           			  
				    p1_dd = 0;
					if(nvar_mear_cont > 0);
					   pair_cc_count = pair_cc_count + 1;
					   if(Store_cc[pair_cc_count,1] > upper_limit);
						  p1    = Store_cc[pair_cc_count,1];
						  p1_dm = Store_cc[pair_cc_count,2:nvar_mear_cont+1];
						  p1_dd = -(1/p1)*(p1_dm * Diff_Mean_mu_d);
					   endif;
				    endif;
			   
			       if(nvar_ogc > 1);	   			   
					   p2_dd = 0; 
					   for g1(1,nvar_ogc-1,1);
		                   for g2(g1+1,nvar_ogc,1);
							   
							   pair_ogc_count = pair_ogc_count + 1;
							   
							   rho_low_g1d =  (Curr_Lower_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2d =  (Curr_Lower_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1d =   (Curr_Upper_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2d =   (Curr_Upper_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
					   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
							   
							   if(Store_ogc[pair_ogc_count,13] > upper_limit);
							      p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
							   endif;		   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   endfor;
					   endfor;
				  else;
					  p2_dd = 0; 
			      endif;
			   
                   if(nvar_ogc > 0);	 
					p3_dd = 0; 
					for v1(1,nvar_ogc,1);
						for g1(1,num_nominal,1);
							pair_ogcn_count = pair_ogcn_count + 1;
							D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
							D_VG[1,v1] = 1;
							
							if(g1 == 1);
							   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							rho_low_g3 = D_VG*Curr_Lower_Threshold';
							rho_up_g3  = D_VG*Curr_Upper_Threshold';
							rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
							
							rho_low_g3_d = D_VG*Curr_Lower_Threshold_d';
							rho_up_g3_d  = D_VG*Curr_Upper_Threshold_d';
				   
							mean_gu    = D_VG*Mean_changed;
							var_gu     = D_VG*Error_changed*D_VG';
							
							mean_gu_d  = D_VG*Mean_changed_d;
				   
						    om  = sqrt(diag(var_gu));
							mean_low_final = (rho_low_g3 - mean_gu)./om;
							mean_up_final  = (rho_up_g3 - mean_gu)./om;
				   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
							
							mean_low_final_d = (rho_low_g3_d - mean_gu_d)./om;
					        mean_up_final_d  = (rho_up_g3_d - mean_gu_d)./om;
				   
							num_tote  = All_Nominal[1,g1] + (All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5);
							num_mene  = All_Nominal[1,g1] ;
							num_vare  = All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5;
							
							p1_up   = Store_ogcn[pair_ogcn_count,1];
	                        p1_low  = Store_ogcn[pair_ogcn_count,1+num_tote+1];
	                        p_diff  = p1_up - p1_low;							
							if(p_diff > upper_limit);
								p3_dd_temp = (1/p_diff) *(Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d - Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d);
							    p3_dd = p3_dd + p3_dd_temp;
							endif;
				            
							 clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
						     clear rho_low_g3_d,rho_up_g3_d;
						 endfor;
					 endfor;
				 else;
					 p3_dd = 0 ;
				 endif;
		 
		         
				 p4_dd = 0;
				 if(num_nominal > 1);
					for g1(1,num_nominal-1,1);
						for g2(g1+1,num_nominal,1);
							R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_ogc+Alternative_all-num_nominal);
				
							pair_nn_count = pair_nn_count + 1;
							if(g1 == 1);
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_ogc+M_mat_Track_csum[g2-1,1]+1:nvar_ogc+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
				
						    mean_gu    = -(R_GG*Mean_changed);
						    mean_gu_d  = -(R_GG*Mean_changed_d);
												
							var_gu     = R_GG*Error_changed*R_GG';
							
							om  = sqrt(diag(var_gu));
							mean_final = mean_gu./om;
					   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
							
							mean_final_d  = (mean_gu_d)./om;
							
							num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
							
							if(Store_nn[pair_nn_count,1] > upper_limit);
							  p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_final_d)  )  ;
							endif;
							
							clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d;
					endfor;
				 endfor;
		         endif;
				 
				 gg = p1_dd + p2_dd + p3_dd + p4_dd;
				 gg_temp = gg_temp | gg;
				   
				 clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
          delta_gradient = delta_gradient ~ gg_temp;   
         clear yd,Utilityd,Count_Threshold_d;
	 endif;
endfor; 
retp(delta_gradient);
endp;

proc(1)=lgd_DMat1(emp_mat);
	local D_matrix_gradient,D_matrix_d,d_matrix_coeff_d,idmat,icheck,jcheck,row_all,row_all_sq,denom,denom1,d_chol_alpha_corr,Alpha_corrd,Alpha_matd,Udiff_Errord,zd,zsd,Z_matd,yd,j,Utilityd,Total_g,pair_ogc_count,pair_ogcn_count,pair_nn_count,Full_error,U_Y,U_Yd,rho_low_g2,mean_up_final_d,mean_final;
	local pair1,pair2,M,Mq,Alt_chosen,iden_matrix,one_negative,temp1,ch,obs_pairs,temp_check,pair2_all,pair2_index,Y_pair1,U_pair1,Y_pair2,U_pair2,Y_pair1d,U_pair1d,Y_pair2d,U_pair2d;
	local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Full_error_pair1,Full_error_pair2,Full_error_pair12;
	local B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Diff_Mean_mu_d,Mean_changed_d,Error_changed_d,Full_error_pair1d,Full_error_pair2d,Full_error_pair12d;		
	local Curr_Lower_Threshold,Curr_Upper_Threshold,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp11,p2_temp22,p2_temp33,p2_temp44,gg_d,rho_low_g1,g1,g2,g3,g4,g11,g22;
	local p1_dd,p2_dd,p3_dd,p4_dd,p1,p1_d,p1_dm,p1_dr,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,mean_gu_d,om,mean_low_final,mean_up_final,var_final,mean_low_final_d,R_GG,num_element;
	local rho_up_g1,rho_up_g2,mean_final_d,var_g1g2,var_g1g2_d,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4,row_num,col_num,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m;
	local Full_error_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,Shi_r_unq,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md;
	local var_gu_d,omncd,var_final_d,diff_cdf,w1,w2,Count_Threshold_d,Curr_Lower_Threshold_d,Curr_Upper_Threshold_d,delta_d,Gamma_X_d,Lambda_count_d,dgam_smallC,dgam_term1;
	local y2_d,countObs,smallCObs,term2,threshUpper,threshLower,PhiUpper,PhiLower,rho_low_g3_d,rho_up_g3_d,zs,C_Arrow_d,D_matrix_dF,S1A1,S1A2,S12A12,corr_mat,S1A1d,S1A2d,S12A12d,corr_matd;
    local gg_temp,e1,e12,e2,e1_d,e12_d,e2_d,gg,pair_cc_count,num_tote,num_mene,num_vare,p1_up,p1_low,p_diff,p3_dd_temp,count,Lambda_mat;

D_matrix_gradient = {};
for idmat(1,ME_Element,1);
	if(_max_active[nvarml+nCholOmega+nvarmC+idmat] == 0);
		D_matrix_gradient = D_matrix_gradient ~ zeros(nobs,1);
	else;
		d_matrix_coeff_d = zeros(ME_Element,1);  d_matrix_coeff_d[idmat] = 1; 
		D_matrix_d   = zeros(nvar_mear,nvar_latent);
		count = 0;
		for i(1,nvar_mear,1);
		for j(1,nvar_latent,1);
			if(ME_Matrix[i,j]==1);
				count = count + 1;
				D_matrix_d[i,j] = d_matrix_coeff_d[count];
			endif;
		endfor;
	    endfor;
	
        yd = {}; j = 1;
			
		do until j > nobs;
		  yd = yd| (D_matrix_d * Z_mat[j,.]' )'  ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
		  j = j+1;
		endo;

        		
		    gg_temp = {};
			pair_cc_count  = 0;
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;

            for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;p1_dd = 0;
				   Full_error = {}; e1 = {}; e12 = {};  e2 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {};  e2_d = {}; 
				   
				   Lambda_mat = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
	               
				   e1   = e1  ~ ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
				   e12  = e12 ~ ( D_matrix * Alpha_mat * Lambda_mat');
				   e2   = e2  ~ ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d  ~  ( D_matrix_d * Alpha_mat * D_matrix' + D_matrix * Alpha_mat * D_matrix_d' );
				   e12_d  = e12_d ~  ( D_matrix_d * Alpha_mat * Lambda_mat');
				   e2_d   = e2_d  ~  ( zeros(Alternative_all,Alternative_all) );
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e12'~e2);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e12_d'~e2_d);
				   
				   U_Y   = U_Y   | Y_vec[i,.]'| Utility[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'   | zeros(Alternative_all,1);
				   
				   M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   
				   Alt_chosen = (Main_data[i,Altchm])';
				   
				   for j(1,num_nominal,1);
					   iden_matrix = eye(All_Nominal[1,j]-1);
					   one_negative = -1*ones(All_Nominal[1,j]-1,1);
					   if(Alt_chosen[j] eq 1);
						temp1 = one_negative ~ iden_matrix;
					   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
						temp1 = iden_matrix ~ one_negative;
					   else;
						ch = Alt_chosen[j];
						temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
					   endif;
					
					   if(j == 1);
						  M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
					   else;
						  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
					   endif;
					  
					   clear temp1;
				   endfor;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   B_Tild_d = M * U_Yd;
				   Error_Tild_d = M * Full_error_d * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)]; 
                   BU_Tild_d     = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];				   
				   
				   if(nvar_mear_cont > 0);
				   Error_YU_Tild    = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];  
				   Error_YU_Tild_d  = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),1:nvar_mear_cont];   
				   endif;
				   
				   
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];  
				   Error_U_Tild_d   = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),nvar_mear_cont+1:cols(Error_Tild_d)];  
				   
				   if(nvar_mear_cont > 0);
				   Error_Y          = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];  
				   Diff_Mean        = (Main_data[i,Continous_Index])';      
				   Diff_Mean_mu     = B_Tild[1:nvar_mear_cont];
				   Error_Y_d        = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont]; 
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];    
				   endif;	
				   
				   
				   if(nvar_mear_cont > 0);
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   else;
                   Mean_changed =  BU_Tild ;
				   Error_changed = Error_U_Tild ;
				   Mean_changed_d  =  BU_Tild_d ;
				   Error_changed_d = Error_U_Tild_d ;
                   endif;

				   				   
				   Curr_Lower_Threshold = {};
		           Curr_Upper_Threshold = {};
		
		            if(nvar_mear_ordl > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
					endif;
					
					if(nvar_mear_count > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
					endif;
						
					Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
		           
				   p1_dd = 0;
					if(nvar_mear_cont > 0);
					   pair_cc_count = pair_cc_count + 1;
					   if(Store_cc[pair_cc_count,1] > upper_limit);
						  p1    = Store_cc[pair_cc_count,1];
						  p1_dm = Store_cc[pair_cc_count,2:nvar_mear_cont+1];
						  p1_dr = Store_cc[pair_cc_count,nvar_mear_cont+2:nvar_mear_cont+1+cc_eler1];
						  p1_dd = (1/p1)*( (p1_dr * vech(Error_Y_d)) - (p1_dm * Diff_Mean_mu_d) );
					   endif;
				   endif;
				   
				   if(nvar_ogc > 1);	   			   
					   p2_dd = 0; 
					   for g1(1,nvar_ogc-1,1);
		                   for g2(g1+1,nvar_ogc,1);
							   
							   pair_ogc_count = pair_ogc_count + 1;
							   
							   om_low_g1   =   Error_changed[g1,g1];
							   om_low_g2   =   Error_changed[g2,g2];
							   om_up_g1    =   Error_changed[g1,g1];
							   om_up_g2    =   Error_changed[g2,g2];
							   
							   omncd_low_g1   =   Error_changed_d[g1,g1];
							   omncd_low_g2   =   Error_changed_d[g2,g2];
							   omncd_up_g1    =   Error_changed_d[g1,g1];
							   omncd_up_g2    =   Error_changed_d[g2,g2];
							   
							   rho_low_g1md  =  - Mean_changed_d[g1] ;
							   rho_low_g2md  =  - Mean_changed_d[g2] ;
							   rho_up_g1md   =  - Mean_changed_d[g1] ;
							   rho_up_g2md   =  - Mean_changed_d[g2] ;
							   
							   rho_low_g1m  =  (Curr_Lower_Threshold[1,g1] - Mean_changed[g1] ) ;
							   rho_low_g2m  =  (Curr_Lower_Threshold[1,g2] - Mean_changed[g2] ) ;
							   rho_up_g1m   =  (Curr_Upper_Threshold[1,g1] - Mean_changed[g1] ) ;
							   rho_up_g2m   =  (Curr_Upper_Threshold[1,g2] - Mean_changed[g2] ) ;
							   
							   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
							   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
							   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
							   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
							   
							   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
					   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
							   
							   if(Store_ogc[pair_ogc_count,13] > upper_limit);
							      p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
							   endif;		   
							   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
							   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
							   endfor;
					   endfor;
				  else;
					  p2_dd = 0; 
			      endif;
			   
                   if(nvar_ogc > 0);	 
					p3_dd = 0; 
					for v1(1,nvar_ogc,1);
						for g1(1,num_nominal,1);
							pair_ogcn_count = pair_ogcn_count + 1;
							D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
							D_VG[1,v1] = 1;
							
							if(g1 == 1);
							   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							rho_low_g3 = D_VG*Curr_Lower_Threshold';
							rho_up_g3  = D_VG*Curr_Upper_Threshold';
							rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
				   
							mean_gu    = D_VG*Mean_changed;
							var_gu     = D_VG*Error_changed*D_VG';
							
							mean_gu_d  = D_VG*Mean_changed_d;
							var_gu_d   = D_VG*Error_changed_d*D_VG';
				   
						    om     =  (diag(var_gu));
							omncd  = (diag(var_gu_d));
							
							mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
							mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
				   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
							
							mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					        mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					   
					        var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
					        var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1],1));
					  
				   
							 shi_r_unq = {};
					         for ishi(1,rows(var_final_d)-1,1);
							      shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d)];
					         endfor;
					        
							num_tote  = All_Nominal[1,g1] + (All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5);
							num_mene  = All_Nominal[1,g1] ;
							num_vare  = All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5;
							
							p1_up   = Store_ogcn[pair_ogcn_count,1];
	                        p1_low  = Store_ogcn[pair_ogcn_count,1+num_tote+1];
	                        p_diff  = p1_up - p1_low;
							
							if(p_diff > upper_limit);
								p3_dd_temp = (1/p_diff) *(Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d' + Store_ogcn[pair_ogcn_count,1+num_mene+1:1+num_mene+num_vare] * shi_r_unq' - Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d' - Store_ogcn[pair_ogcn_count,1+num_tote+1+num_mene+1:1+num_tote+1+num_mene+num_vare] * shi_r_unq');
								p3_dd = p3_dd + p3_dd_temp;
							endif;
							
							 clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g11,w2,g2;
					         clear omncd,var_gu_d,var_final_d,shi_r_unq;						 
						  endfor;
					 endfor;
				 else;
					 p3_dd = 0 ;
				 endif;
		 
		         
				 p4_dd = 0;
				 if(num_nominal > 1);
					for g1(1,num_nominal-1,1);
						for g2(g1+1,num_nominal,1);
							R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_ogc+Alternative_all-num_nominal);
				
							pair_nn_count = pair_nn_count + 1;
							if(g1 == 1);
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_ogc+M_mat_Track_csum[g2-1,1]+1:nvar_ogc+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
							
							mean_gu    = -(R_GG*Mean_changed);
							mean_gu_d  = -(R_GG*Mean_changed_d);
														
							var_gu     = R_GG*Error_changed*R_GG';
							var_gu_d   = R_GG*Error_changed_d*R_GG';
							
							om     = (diag(var_gu));
							omncd  = (diag(var_gu_d));
							
							mean_final = mean_gu./sqrt(om);
					   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
							
							mean_final_d  = (  sqrt(om') .* mean_gu_d' -  mean_gu' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
						  
							shi_r_unq = {};
							for ishi(1,rows(var_final_d)-1,1);
									  shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
							endfor;
							
							num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
							
							if(Store_nn[pair_nn_count,1] > upper_limit);
							  p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  ( Store_nn[pair_nn_count,2:1+num_element] * mean_final_d' + Store_nn[pair_nn_count,1+num_element+1:1+num_element+cols(shi_r_unq)] * shi_r_unq' )  )  ;
							endif;
							
						   
							clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d,var_gu_d,var_final_d,shi_r_unq;
					endfor;
				 endfor;
		         endif;
				    					
				 gg = p1_dd + p2_dd + p3_dd + p4_dd;
				 gg_temp = gg_temp | gg;
				   
				 clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
          D_matrix_gradient = D_matrix_gradient ~ gg_temp;   
         clear yd,Utilityd;
	 endif;
endfor;
retp(D_matrix_gradient);
endp;

proc(1)=lgd_Psi1(Chol_Psi_matrix1);
	local Psi_gradient,ipsi,d_chol_psi,Psidd,Psid,Psi_matrix_big_dd,ME_Error_Mat_d,icheck,jcheck,row_all,row_all_sq,denom,denom1,d_chol_alpha_corr,Alpha_corrd,Alpha_matd,Udiff_Errord,zd,zsd,Z_matd,yd,j,Utilityd,Total_g,pair_ogc_count,pair_ogcn_count,pair_nn_count,Full_error,U_Y,U_Yd,rho_low_g2,mean_up_final_d,mean_final;
	local pair1,pair2,M,Mq,Alt_chosen,iden_matrix,one_negative,temp1,ch,obs_pairs,temp_check,pair2_all,pair2_index,Y_pair1,U_pair1,Y_pair2,U_pair2,Y_pair1d,U_pair1d,Y_pair2d,U_pair2d;
	local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Full_error_pair1,Full_error_pair2,Full_error_pair12;
	local B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Diff_Mean_mu_d,Mean_changed_d,Error_changed_d,Full_error_pair1d,Full_error_pair2d,Full_error_pair12d;		
	local Curr_Lower_Threshold,Curr_Upper_Threshold,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp11,p2_temp22,p2_temp33,p2_temp44,gg_d,rho_low_g1,g1,g2,g3,g4,g11,g22;
	local p1_dd,p2_dd,p3_dd,p4_dd,p1,p1_d,p1_dm,p1_dr,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,mean_gu_d,om,mean_low_final,mean_up_final,var_final,mean_low_final_d,R_GG,num_element;
	local rho_up_g1,rho_up_g2,mean_final_d,var_g1g2,var_g1g2_d,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4,row_num,col_num,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m;
	local Full_error_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,Shi_r_unq,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md;
	local var_gu_d,omncd,var_final_d,diff_cdf,w1,w2,Count_Threshold_d,Curr_Lower_Threshold_d,Curr_Upper_Threshold_d,delta_d,Gamma_X_d,Lambda_count_d,dgam_smallC,dgam_term1;
	local y2_d,countObs,smallCObs,term2,threshUpper,threshLower,PhiUpper,PhiLower,rho_low_g3_d,rho_up_g3_d,zs,C_Arrow_d,S1A1,S1A2,S12A12,corr_mat,S1A1d,S1A2d,S12A12d,corr_matd;
    local gg_temp,e1,e12,e2,e1_d,e12_d,e2_d,gg,pair_cc_count,num_tote,num_mene,num_vare,p1_up,p1_low,p_diff,p3_dd_temp,Lambda_mat;
	
Psi_gradient = {};
for ipsi(1,nvar_mear,1);
	if(_max_active[nvarml+nCholOmega+nvarmC+ME_Element+ipsi] == 0);
		Psi_gradient = Psi_gradient ~ zeros(nobs,1);
	else;
		if(Parametrized == 1);
			d_chol_psi = zeros(nvar_mear,1);    d_chol_psi[ipsi]=1;                         Psidd = zeros(nvar_mear,nvar_mear);
			Psidd = diagrv(Psidd,d_chol_psi);
			Psi_matrix_big_dd  = Psidd'*Chol_Psi_matrix1 + Chol_Psi_matrix1'*Psidd;
		elseif(Parametrized == 0);
		    d_chol_psi = zeros(nvar_mear,1);    d_chol_psi[ipsi]=1;                         Psidd = zeros(nvar_mear,nvar_mear);
			Psidd = diagrv(Psidd,d_chol_psi);
			Psi_matrix_big_dd = Psidd;
		endif;	
			
			
			gg_temp = {};
			pair_cc_count  = 0;
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;

            for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;p1_dd = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e2 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {};  e2_d = {}; 
	               
				   Lambda_mat = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
				   
				   e1   = e1  ~ ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
				   e12  = e12 ~ ( D_matrix * Alpha_mat * Lambda_mat');
				   e2   = e2  ~ ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d  ~  ( Psi_matrix_big_dd );
				   e12_d  = e12_d ~ ( zeros(nvar_mear,Alternative_all));
				   e2_d   = e2_d  ~ ( zeros(Alternative_all,Alternative_all) );
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e12'~e2);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e12_d'~e2_d);
				   
				   U_Y   = U_Y | Y_vec[i,.]'| Utility[i,.]';  
				   
				   M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   
				   Alt_chosen = (Main_data[i,Altchm])';
				   
				   for j(1,num_nominal,1);
					   iden_matrix = eye(All_Nominal[1,j]-1);
					   one_negative = -1*ones(All_Nominal[1,j]-1,1);
					   if(Alt_chosen[j] eq 1);
						temp1 = one_negative ~ iden_matrix;
					   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
						temp1 = iden_matrix ~ one_negative;
					   else;
						ch = Alt_chosen[j];
						temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
					   endif;
					
					   if(j == 1);
						  M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
					   else;
						  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
					   endif;
					  
					   clear temp1;
				   endfor;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   Error_Tild_d = M * Full_error_d * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];                              
				   
				   if(nvar_mear_cont > 0);		
				   Error_YU_Tild    = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont]; 
			       Error_YU_Tild_d  = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),1:nvar_mear_cont];   	   
				   endif;
				   Error_U_Tild     = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];  
				   Error_U_Tild_d   = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),nvar_mear_cont+1:cols(Error_Tild_d)];  
				   
				   if(nvar_mear_cont > 0);		
				   Error_Y         = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];  
				   Diff_Mean       = (Main_data[i,Continous_Index])';      
				   Diff_Mean_mu    = B_Tild[1:nvar_mear_cont];
				   Error_Y_d       = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont]; 
				   endif;
				   
				   if(nvar_mear_cont > 0);		
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   =  Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   Mean_changed_d  =  ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) ;
				   Error_changed_d =  Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   else;
                   Mean_changed    =  BU_Tild ;
				   Error_changed   =  Error_U_Tild ;
				   Mean_changed_d  =  zeros(rows(Mean_changed),1);
				   Error_changed_d =  Error_U_Tild_d ;
                   endif;

				   				   
				   Curr_Lower_Threshold = {};
		           Curr_Upper_Threshold = {};
		
		            if(nvar_mear_ordl > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
					endif;
					
										
					if(nvar_mear_count > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
					endif;
						
					Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
			
			
			        p1_dd = 0;
					if(nvar_mear_cont > 0);
					   pair_cc_count = pair_cc_count + 1;
					   if(Store_cc[pair_cc_count,1] > upper_limit);
						  p1    = Store_cc[pair_cc_count,1];
						  p1_dr = Store_cc[pair_cc_count,nvar_mear_cont+2:nvar_mear_cont+1+cc_eler1];
						  p1_dd = (1/p1)*(p1_dr * vech(Error_Y_d));
					   endif;
				    endif;
				   
				   if(nvar_ogc > 1);	   			   
					   p2_dd = 0; 
					   for g1(1,nvar_ogc-1,1);
		                   for g2(g1+1,nvar_ogc,1);
							   
							   pair_ogc_count = pair_ogc_count + 1;
							   
							   om_low_g1   =   Error_changed[g1,g1];
							   om_low_g2   =   Error_changed[g2,g2];
							   om_up_g1    =   Error_changed[g1,g1];
							   om_up_g2    =   Error_changed[g2,g2];
							   
							   omncd_low_g1   =   Error_changed_d[g1,g1];
							   omncd_low_g2   =   Error_changed_d[g2,g2];
							   omncd_up_g1    =   Error_changed_d[g1,g1];
							   omncd_up_g2    =   Error_changed_d[g2,g2];
							   
							   rho_low_g1md  =  - Mean_changed_d[g1] ;
							   rho_low_g2md  =  - Mean_changed_d[g2] ;
							   rho_up_g1md   =  - Mean_changed_d[g1] ;
							   rho_up_g2md   =  - Mean_changed_d[g2] ;
							   
							   rho_low_g1m  =  (Curr_Lower_Threshold[1,g1] - Mean_changed[g1] ) ;
							   rho_low_g2m  =  (Curr_Lower_Threshold[1,g2] - Mean_changed[g2] ) ;
							   rho_up_g1m   =  (Curr_Upper_Threshold[1,g1] - Mean_changed[g1] ) ;
							   rho_up_g2m   =  (Curr_Upper_Threshold[1,g2] - Mean_changed[g2] ) ;
							   
							   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
							   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
							   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
							   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
							   
							   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
					   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
							   
							   if(Store_ogc[pair_ogc_count,13] > upper_limit);
							      p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
							   endif;	   
							   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
							   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
							   endfor;
					   endfor;
				  else;
					  p2_dd = 0; 
			      endif;
			   
                   if(nvar_ogc > 0);	 
					p3_dd = 0; 
					for v1(1,nvar_ogc,1);
						for g1(1,num_nominal,1);
							pair_ogcn_count = pair_ogcn_count + 1;
							D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
							D_VG[1,v1] = 1;
							
							if(g1 == 1);
							   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							rho_low_g3 = D_VG*Curr_Lower_Threshold';
							rho_up_g3  = D_VG*Curr_Upper_Threshold';
							rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
				   
							mean_gu    = D_VG*Mean_changed;
							var_gu     = D_VG*Error_changed*D_VG';
							
							mean_gu_d  = D_VG*Mean_changed_d;
							var_gu_d   = D_VG*Error_changed_d*D_VG';
				   
						    om     =  (diag(var_gu));
							omncd  = (diag(var_gu_d));
							
							mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
							mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
				   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
							
							mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					        mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					   
					        var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
					        var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1],1));
					  
				   
							 shi_r_unq = {};
					         for ishi(1,rows(var_final_d)-1,1);
							      shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d)];
					         endfor;
					        
							num_tote  = All_Nominal[1,g1] + (All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5);
							num_mene  = All_Nominal[1,g1] ;
							num_vare  = All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5;
							
							p1_up   = Store_ogcn[pair_ogcn_count,1];
	                        p1_low  = Store_ogcn[pair_ogcn_count,1+num_tote+1];
	                        p_diff  = p1_up - p1_low;	
							
							if(p_diff > upper_limit);
								p3_dd_temp = (1/p_diff) *(Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d' + Store_ogcn[pair_ogcn_count,1+num_mene+1:1+num_mene+num_vare] * shi_r_unq' - Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d' - Store_ogcn[pair_ogcn_count,1+num_tote+1+num_mene+1:1+num_tote+1+num_mene+num_vare] * shi_r_unq');
								p3_dd = p3_dd + p3_dd_temp;
							endif;
							
							 clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g11,w2,g2;
					         clear omncd,var_gu_d,var_final_d,shi_r_unq;						 
						  endfor;
					 endfor;
				 else;
					 p3_dd = 0 ;
				 endif;
		 
		         
				 p4_dd = 0;
				 if(num_nominal > 1);
					for g1(1,num_nominal-1,1);
						for g2(g1+1,num_nominal,1);
							R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_ogc+Alternative_all-num_nominal);
				
							pair_nn_count = pair_nn_count + 1;
							if(g1 == 1);
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_ogc+M_mat_Track_csum[g2-1,1]+1:nvar_ogc+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
			
							mean_gu    = -(R_GG*Mean_changed);
							mean_gu_d  = -(R_GG*Mean_changed_d);
							
							var_gu     = R_GG*Error_changed*R_GG';
							var_gu_d   = R_GG*Error_changed_d*R_GG';
							
							om     = (diag(var_gu));
							omncd  = (diag(var_gu_d));
							
							mean_final = mean_gu./sqrt(om);
					   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
							
							mean_final_d  = (  sqrt(om') .* mean_gu_d' -  mean_gu' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
						  
					   
							shi_r_unq = {};
							for ishi(1,rows(var_final_d)-1,1);
									  shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
							endfor;
							
							num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
							
							if(Store_nn[pair_nn_count,1] > upper_limit);
							  p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  ( Store_nn[pair_nn_count,2:1+num_element] * mean_final_d' + Store_nn[pair_nn_count,1+num_element+1:1+num_element+cols(shi_r_unq)] * shi_r_unq' )  )  ;
							endif;
							
						   clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d,var_gu_d,var_final_d,shi_r_unq;
					endfor;
				 endfor;
		         endif;
				    					
				 gg = p1_dd + p2_dd + p3_dd + p4_dd;
				 gg_temp = gg_temp | gg;
				   
				 clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
          Psi_gradient = Psi_gradient ~ gg_temp;   
    endif;
endfor;
retp(Psi_gradient);
endp;

proc(1)=lgd_Beta1(emp_mat);
	local Beta_gradient,ibeta,betad,Beta_coeff_expand_d,Xbetad,row_add,ME_Error_Mat_d,icheck,jcheck,row_all,row_all_sq,denom,denom1,d_chol_alpha_corr,Alpha_corrd,Alpha_matd,Udiff_Errord,zd,zsd,Z_matd,yd,j,Utilityd,Total_g,pair_ogc_count,pair_ogcn_count,pair_nn_count,Full_error,U_Y,U_Yd,rho_low_g2,mean_up_final_d,mean_final;
	local pair1,pair2,M,Mq,Alt_chosen,iden_matrix,one_negative,temp1,ch,obs_pairs,temp_check,pair2_all,pair2_index,Y_pair1,U_pair1,Y_pair2,U_pair2,Y_pair1d,U_pair1d,Y_pair2d,U_pair2d;
	local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Full_error_pair1,Full_error_pair2,Full_error_pair12;
	local B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Diff_Mean_mu_d,Mean_changed_d,Error_changed_d,Full_error_pair1d,Full_error_pair2d,Full_error_pair12d;		
	local Curr_Lower_Threshold,Curr_Upper_Threshold,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp11,p2_temp22,p2_temp33,p2_temp44,gg_d,rho_low_g1,g1,g2,g3,g4,g11,g22;
	local p1_dd,p2_dd,p3_dd,p4_dd,p1,p1_d,p1_dm,p1_dr,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,mean_gu_d,om,mean_low_final,mean_up_final,var_final,mean_low_final_d,R_GG,num_element;
	local rho_up_g1,rho_up_g2,mean_final_d,var_g1g2,var_g1g2_d,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4,row_num,col_num,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m;
	local Full_error_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,Shi_r_unq,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md;
	local var_gu_d,omncd,var_final_d,diff_cdf,w1,w2,Count_Threshold_d,Curr_Lower_Threshold_d,Curr_Upper_Threshold_d,delta_d,Gamma_X_d,Lambda_count_d,dgam_smallC,dgam_term1;
	local y2_d,countObs,smallCObs,term2,threshUpper,threshLower,PhiUpper,PhiLower,rho_low_g3_d,rho_up_g3_d,zs,C_Arrow_d,S1A1,S1A2,S12A12,corr_mat,S1A1d,S1A2d,S12A12d,corr_matd;
    local gg_temp,e1,e12,e2,e1_d,e12_d,e2_d,gg,pair_cc_count,num_tote,num_mene,num_vare,p1_up,p1_low,p_diff,p3_dd_temp,Lambda_mat;
	
Beta_gradient = {};
for ibeta(1,nvarma,1);
	if(_max_active[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+ibeta] == 0);
		Beta_gradient = Beta_gradient ~ zeros(nobs,1);
	else;
		betad = zeros(nvarma,1);  betad[ibeta] = 1;
		
		Beta_coeff_expand_d = {};
		   for j(1,num_nominal,1);
				 if(j == 1);
					Beta_coeff_expand_d = Beta_coeff_expand_d | (ones(All_Nominal[1,j],1) .*. betad[1:nvarma_csum[j]]);
				else;
					Beta_coeff_expand_d = Beta_coeff_expand_d | (ones(All_Nominal[1,j],1) .*. betad[nvarma_csum[j-1]+1:nvarma_csum[j]]);
				endif;
		   endfor;
			
		   
		   Xbetad = (Beta_coeff_expand_d)*~(Main_data[.,ivgenva])';
		   
		   Utilityd = {};
		   for i1(1,num_nominal,1);
				j = 1;
			    
				if(i1 == 1);
					row_add = 0;
				else;
					row_add = sumr(All_Nominal[1,1:i1-1] .* nvarma_all[1,1:i1-1]);
				endif;
	
				do until j > All_Nominal[1,i1];
				   Utilityd = Utilityd~(sumc(Xbetad[row_add+(j-1)*nvarma_all[1,i1]+1:row_add+(j*nvarma_all[1,i1]),.]));
				   j = j+1;
				endo;
		   endfor;
           
		    gg_temp = {};
			pair_cc_count  = 0;
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;

            for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;p1_dd = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e2 = {}; 
	               
                   Lambda_mat = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
                
				   e1   = e1  ~  ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
				   e12  = e12 ~ ( D_matrix * Alpha_mat * Lambda_mat');
				   e2   = e2  ~ ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
				   
                   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e12'~e2);
				   
				   U_Y    = U_Y  | Y_vec[i,.]'          | Utility[i,.]';  
				   U_Yd   = U_Yd | zeros(nvar_mear,1)   | Utilityd[i,.]';
				   
				   M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   
				   Alt_chosen = (Main_data[i,Altchm])';
				   
				   for j(1,num_nominal,1);
					   iden_matrix = eye(All_Nominal[1,j]-1);
					   one_negative = -1*ones(All_Nominal[1,j]-1,1);
					   if(Alt_chosen[j] eq 1);
						temp1 = one_negative ~ iden_matrix;
					   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
						temp1 = iden_matrix ~ one_negative;
					   else;
						ch = Alt_chosen[j];
						temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
					   endif;
					
					   if(j == 1);
						  M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
					   else;
						  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
					   endif;
					  
					   clear temp1;
				   endfor;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)]; 
                   BU_Tild_d     = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];				   
				   
				   if(nvar_mear_cont > 0);
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];     
				   endif;
				   
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];  
				   
				   if(nvar_mear_cont > 0);
				   Error_Y          = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];  
				   Diff_Mean        = (Main_data[i,Continous_Index])';      
				   Diff_Mean_mu     = B_Tild[1:nvar_mear_cont];
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont]; 
				   endif;
				   
				   if(nvar_mear_cont > 0);
				   Mean_changed   =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed  = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   Mean_changed_d =  BU_Tild_d - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   else;		   
				   Mean_changed   =  BU_Tild ;
				   Error_changed  = Error_U_Tild ;
				   Mean_changed_d =  BU_Tild_d ;
				   endif;
				   
				   			   
				   Curr_Lower_Threshold = {};
		           Curr_Upper_Threshold = {};
		
		            if(nvar_mear_ordl > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
					endif;
					
									
					if(nvar_mear_count > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
					endif;
						
					Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
				   
				    p1_dd = 0;
					if(nvar_mear_cont > 0);
					   pair_cc_count = pair_cc_count + 1;
					   if(Store_cc[pair_cc_count,1] > upper_limit);
						  p1    = Store_cc[pair_cc_count,1];
						  p1_dm = Store_cc[pair_cc_count,2:nvar_mear_cont+1];
						  p1_dd = -(1/p1)*(p1_dm * Diff_Mean_mu_d);
					   endif;
				    endif;
				   
				   		   
				   if(nvar_ogc > 1);	   			   
					   p2_dd = 0; 
					   for g1(1,nvar_ogc-1,1);
		                   for g2(g1+1,nvar_ogc,1);
							   
							   pair_ogc_count = pair_ogc_count + 1;
							   
							   rho_low_g1d =  (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2d =  (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1d =   (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2d =   (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
					   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
							   
							   if(Store_ogc[pair_ogc_count,13] > upper_limit);
							      p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
							   endif;		   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   endfor;
					   endfor;
				  else;
					  p2_dd = 0; 
			      endif;
			   
                   if(nvar_ogc > 0);	 
					p3_dd = 0; 
					for v1(1,nvar_ogc,1);
						for g1(1,num_nominal,1);
							pair_ogcn_count = pair_ogcn_count + 1;
							D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
							D_VG[1,v1] = 1;
							
							if(g1 == 1);
							   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
						    rho_low_g3 = D_VG*Curr_Lower_Threshold';
							rho_up_g3  = D_VG*Curr_Upper_Threshold';
							rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
				   
							mean_gu    = D_VG*Mean_changed;
							var_gu     = D_VG*Error_changed*D_VG';
							
							mean_gu_d  = D_VG*Mean_changed_d;
				   
						    om  = sqrt(diag(var_gu));
							mean_low_final = (rho_low_g3 - mean_gu)./om;
							mean_up_final  = (rho_up_g3 - mean_gu)./om;
				   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
							
							mean_low_final_d = (- mean_gu_d)./om;
					        mean_up_final_d  = (- mean_gu_d)./om;
				   
							num_tote  = All_Nominal[1,g1] + (All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5);
							num_mene  = All_Nominal[1,g1] ;
							num_vare  = All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5;
							
							p1_up   = Store_ogcn[pair_ogcn_count,1];
	                        p1_low  = Store_ogcn[pair_ogcn_count,1+num_tote+1];
	                        p_diff  = p1_up - p1_low;							
							if(p_diff > upper_limit);
								p3_dd_temp = (1/p_diff) *(Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d - Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d);
							    p3_dd = p3_dd + p3_dd_temp;
							endif;
				            
							clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
						 endfor;
					 endfor;
				 else;
					 p3_dd = 0 ;
				 endif;
		 
		         p4_dd = 0;
				 if(num_nominal > 1);
					for g1(1,num_nominal-1,1);
						for g2(g1+1,num_nominal,1);
							R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_ogc+Alternative_all-num_nominal);
				
							pair_nn_count = pair_nn_count + 1;
							if(g1 == 1);
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_ogc+M_mat_Track_csum[g2-1,1]+1:nvar_ogc+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
							
							mean_gu    = -(R_GG*Mean_changed);
							mean_gu_d  = -(R_GG*Mean_changed_d);
														
							var_gu     = R_GG*Error_changed*R_GG';
							
							om  = sqrt(diag(var_gu));
							mean_final = mean_gu./om;
					   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
							
							mean_final_d  = (mean_gu_d)./om;
					   
							num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
							
							if(Store_nn[pair_nn_count,1] > upper_limit);
							  p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_final_d)  )  ;
							endif;
					   
							clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d;
					endfor;
				 endfor;
		         endif;
				 
				 gg = p1_dd + p2_dd + p3_dd + p4_dd;
				 gg_temp = gg_temp | gg;
				   
				 clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
          Beta_gradient = Beta_gradient ~ gg_temp;   
         clear Utilityd;
	 endif;
endfor;
retp(Beta_gradient);
endp;

proc(1)=lgd_Lambda1(emp_mat);
	local Lambda_gradient,ilambda,d_lambda,GP_Global_d,Phi_All,Phi_mat,temp_arr,ME_Error_Mat_d,icheck,jcheck,row_all,row_all_sq,denom,denom1,d_chol_alpha_corr,Alpha_corrd,Alpha_matd,Udiff_Errord,zd,zsd,Z_matd,yd,j,Utilityd,Total_g,pair_ogc_count,pair_ogcn_count,pair_nn_count,Full_error,U_Y,U_Yd,rho_low_g2,mean_up_final_d,mean_final;
	local pair1,pair2,M,Mq,Alt_chosen,iden_matrix,one_negative,temp1,ch,obs_pairs,temp_check,pair2_all,pair2_index,Y_pair1,U_pair1,Y_pair2,U_pair2,Y_pair1d,U_pair1d,Y_pair2d,U_pair2d;
	local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Full_error_pair1,Full_error_pair2,Full_error_pair12;
	local B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Diff_Mean_mu_d,Mean_changed_d,Error_changed_d,Full_error_pair1d,Full_error_pair2d,Full_error_pair12d;		
	local Curr_Lower_Threshold,Curr_Upper_Threshold,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp11,p2_temp22,p2_temp33,p2_temp44,gg_d,rho_low_g1,g1,g2,g3,g4,g11,g22;
	local p1_dd,p2_dd,p3_dd,p4_dd,p1,p1_d,p1_dm,p1_dr,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,mean_gu_d,om,mean_low_final,mean_up_final,var_final,mean_low_final_d,R_GG,num_element;
	local rho_up_g1,rho_up_g2,mean_final_d,var_g1g2,var_g1g2_d,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4,row_num,col_num,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,LambdaZd;
	local Full_error_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,Shi_r_unq,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md;
	local var_gu_d,omncd,var_final_d,diff_cdf,w1,w2,Count_Threshold_d,Curr_Lower_Threshold_d,Curr_Upper_Threshold_d,delta_d,Gamma_X_d,Lambda_count_d,dgam_smallC,dgam_term1;
	local y2_d,countObs,smallCObs,term2,threshUpper,threshLower,PhiUpper,PhiLower,rho_low_g3_d,rho_up_g3_d,zs,C_Arrow_d,Gamma_Phi_d,ZGPD,temp_store,Lambda_mat_d,Lambda_mat_dF;
    local S1A1,S1A2,S12A12,corr_mat,S1A1d,S1A2d,S12A12d,corr_matd,gg_temp,e1,e12,e2,e1_d,e12_d,e2_d,gg,pair_cc_count,num_tote,num_mene,num_vare,p1_up,p1_low,p_diff,p3_dd_temp,count,Lambda_mat;


Lambda_gradient = {};
for ilambda(1,TN_mat,1);
	if(_max_active[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+ilambda] == 0);
		Lambda_gradient = Lambda_gradient ~ zeros(nobs,1);
	else;
		d_lambda = zeros(TN_mat,1);   d_lambda[ilambda] = 1;   
		LambdaZd = {}; GP_Global_d = {}; j = 1;
		do until j > nobs;
			   Phi_All = Main_data[j,ivgephi];
			   Phi_mat = {};
			   
			   for k(1,rows(N_mat),1);
				 if(k==1);
					 temp_arr = Phi_All[1,1:N_mat_csum[k]*nvar_latent];
				 else;
					 temp_arr = Phi_All[1,N_mat_csum[k-1]*nvar_latent+1:N_mat_csum[k]*nvar_latent];
				 endif;
					 
				 temp_arr = reshape(temp_arr,N_mat[k],nvar_latent);
				 Phi_mat  = Phi_mat | temp_arr;
				 clear temp_arr;
			   endfor;
			   
			   Gamma_Phi_d = d_lambda .* Phi_mat;
			   ZGPD       = Gamma_Phi_d * (Z_mat[j,.])' ;
			   
			   temp_store = {};		   
			   for k(1,Alternative_all,1);
				   if(k == 1);
					  GP_Global_d   = GP_Global_d  | (sumc(Gamma_Phi_d[1:N_mat_csum[k],.]))';
					  temp_store  = temp_store ~ (sumc(ZGPD[1:N_mat_csum[k],.]));
				   else;
					  GP_Global_d   = GP_Global_d | (sumc(Gamma_Phi_d[N_mat_csum[k-1]+1:N_mat_csum[k],.]))';
					  temp_store  = temp_store ~ (sumc(ZGPD[N_mat_csum[k-1]+1:N_mat_csum[k],.]));
				   endif;
			   endfor;
				LambdaZd = LambdaZd | temp_store;
					
			j = j+1;
		endo;
				  
		Utilityd = LambdaZd;
		clear LambdaZd;
		
		    gg_temp = {};
			pair_cc_count  = 0;
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;

            for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0; 
				   Full_error = {}; e1 = {}; e12 = {}; e2 = {};  e1_d = {}; e12_d = {}; e2_d = {};
				   Full_error_d = {}; 
	               
				   Lambda_mat   = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
				   Lambda_mat_d = GP_Global_d[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
				     
				   e1   = e1  ~ ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
				   e12  = e12 ~ ( D_matrix * Alpha_mat * Lambda_mat');
				   e2   = e2  ~ ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d  ~ ( zeros(nvar_mear,nvar_mear) );
				   e12_d  = e12_d ~ ( D_matrix * Alpha_mat * Lambda_mat_d');
				   e2_d   = e2_d  ~ ( (Lambda_mat_d * Alpha_mat * Lambda_mat') +  (Lambda_mat * Alpha_mat * Lambda_mat_d') );
						   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e12'~e2);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e12_d'~e2_d);
				   
				   U_Y   = U_Y  | Y_vec[i,.]'       | Utility[i,.]';  
				   U_Yd  = U_Yd | zeros(nvar_mear,1)| Utilityd[i,.]';
				   
				   M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   
				   Alt_chosen = (Main_data[i,Altchm])';
				   
				   for j(1,num_nominal,1);
					   iden_matrix = eye(All_Nominal[1,j]-1);
					   one_negative = -1*ones(All_Nominal[1,j]-1,1);
					   if(Alt_chosen[j] eq 1);
						temp1 = one_negative ~ iden_matrix;
					   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
						temp1 = iden_matrix ~ one_negative;
					   else;
						ch = Alt_chosen[j];
						temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
					   endif;
					
					   if(j == 1);
						  M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
					   else;
						  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
					   endif;
					  
					   clear temp1;
				   endfor;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   B_Tild_d = M * U_Yd;
				   Error_Tild_d = M * Full_error_d * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)]; 
                   BU_Tild_d     = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];				   
				   
				   if(nvar_mear_cont > 0);
				   Error_YU_Tild    = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont]; 
			       Error_YU_Tild_d  = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),1:nvar_mear_cont];   	   
				   endif;
				   
				   Error_U_Tild     = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];  
				   Error_U_Tild_d   = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),nvar_mear_cont+1:cols(Error_Tild_d)];  
				   
				   if(nvar_mear_cont > 0);
				   Error_Y          = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];  
				   Diff_Mean        = (Main_data[i,Continous_Index])';      
				   Diff_Mean_mu     = B_Tild[1:nvar_mear_cont];
				   Error_Y_d        = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];  
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];
				   endif;
				   
				   if(nvar_mear_cont > 0);
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   =  Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   Error_changed_d =  Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   else;		   
				   Mean_changed    =  BU_Tild ;
				   Error_changed   = Error_U_Tild ;
				   Mean_changed_d  =  BU_Tild_d ;
				   Error_changed_d = Error_U_Tild_d ;
				   endif;
				   
				   		 
				   Curr_Lower_Threshold = {};
		           Curr_Upper_Threshold = {};
		
		            if(nvar_mear_ordl > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
					endif;
					
									
					if(nvar_mear_count > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
					endif;
						
					Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
				   
				   
				   
				   p1_dd = 0;
					if(nvar_mear_cont > 0);
					   pair_cc_count = pair_cc_count + 1;
					   if(Store_cc[pair_cc_count,1] > upper_limit);
						  p1    = Store_cc[pair_cc_count,1];
						  p1_dm = Store_cc[pair_cc_count,2:nvar_mear_cont+1];
						  p1_dr = Store_cc[pair_cc_count,nvar_mear_cont+2:nvar_mear_cont+1+cc_eler1];
						  p1_dd = (1/p1)*( (p1_dr * vech(Error_Y_d)) - (p1_dm * Diff_Mean_mu_d) );
					   endif;
				   endif; 
				   
				   if(nvar_ogc > 1);	   			   
					   p2_dd = 0; 
					   for g1(1,nvar_ogc-1,1);
		                   for g2(g1+1,nvar_ogc,1);
							   
							   pair_ogc_count = pair_ogc_count + 1;
							   
							   om_low_g1   =   Error_changed[g1,g1];
							   om_low_g2   =   Error_changed[g2,g2];
							   om_up_g1    =   Error_changed[g1,g1];
							   om_up_g2    =   Error_changed[g2,g2];
							   
							   omncd_low_g1   =   Error_changed_d[g1,g1];
							   omncd_low_g2   =   Error_changed_d[g2,g2];
							   omncd_up_g1    =   Error_changed_d[g1,g1];
							   omncd_up_g2    =   Error_changed_d[g2,g2];
							   
							   rho_low_g1md  =  - Mean_changed_d[g1] ;
							   rho_low_g2md  =  - Mean_changed_d[g2] ;
							   rho_up_g1md   =  - Mean_changed_d[g1] ;
							   rho_up_g2md   =  - Mean_changed_d[g2] ;
							   
							   rho_low_g1m  =  (Curr_Lower_Threshold[1,g1] - Mean_changed[g1] ) ;
							   rho_low_g2m  =  (Curr_Lower_Threshold[1,g2] - Mean_changed[g2] ) ;
							   rho_up_g1m   =  (Curr_Upper_Threshold[1,g1] - Mean_changed[g1] ) ;
							   rho_up_g2m   =  (Curr_Upper_Threshold[1,g2] - Mean_changed[g2] ) ;
							   
							   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
							   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
							   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
							   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
							   
							   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
					   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
							   
							   if(Store_ogc[pair_ogc_count,13] > upper_limit);
							      p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
							   endif;		   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
							   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
							   endfor;
					   endfor;
				  else;
					  p2_dd = 0; 
			      endif;
			   
                   if(nvar_ogc > 0);	 
					p3_dd = 0; 
					for v1(1,nvar_ogc,1);
						for g1(1,num_nominal,1);
							pair_ogcn_count = pair_ogcn_count + 1;
							D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
							D_VG[1,v1] = 1;
							
							if(g1 == 1);
							   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							rho_low_g3 = D_VG*Curr_Lower_Threshold';
							rho_up_g3  = D_VG*Curr_Upper_Threshold';
							rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
				   
							mean_gu    = D_VG*Mean_changed;
							var_gu     = D_VG*Error_changed*D_VG';
							
							mean_gu_d  = D_VG*Mean_changed_d;
							var_gu_d   = D_VG*Error_changed_d*D_VG';
				   
						    om     =  (diag(var_gu));
							omncd  = (diag(var_gu_d));
							
							mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
							mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
				   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
							
							mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					        mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					   
					        var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
					        var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1],1));
					  
				   
							 shi_r_unq = {};
					         for ishi(1,rows(var_final_d)-1,1);
							      shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d)];
					         endfor;
					        
							num_tote  = All_Nominal[1,g1] + (All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5);
							num_mene  = All_Nominal[1,g1] ;
							num_vare  = All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5;
							
							p1_up   = Store_ogcn[pair_ogcn_count,1];
	                        p1_low  = Store_ogcn[pair_ogcn_count,1+num_tote+1];
	                        p_diff  = p1_up - p1_low;
							
							if(p_diff > upper_limit);
								p3_dd_temp = (1/p_diff) *(Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d' + Store_ogcn[pair_ogcn_count,1+num_mene+1:1+num_mene+num_vare] * shi_r_unq' - Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d' - Store_ogcn[pair_ogcn_count,1+num_tote+1+num_mene+1:1+num_tote+1+num_mene+num_vare] * shi_r_unq');
								p3_dd = p3_dd + p3_dd_temp;
							endif;
							
							 clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g11,w2,g2;
					         clear omncd,var_gu_d,var_final_d,shi_r_unq;						 
						  endfor;
					 endfor;
				 else;
					 p3_dd = 0 ;
				 endif;
		 
		         			 
				 p4_dd = 0;
				 if(num_nominal > 1);
					for g1(1,num_nominal-1,1);
						for g2(g1+1,num_nominal,1);
							R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_ogc+Alternative_all-num_nominal);
				
							pair_nn_count = pair_nn_count + 1;
							if(g1 == 1);
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_ogc+M_mat_Track_csum[g2-1,1]+1:nvar_ogc+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
							
							mean_gu    = -(R_GG*Mean_changed);
							mean_gu_d  = -(R_GG*Mean_changed_d);
														
							var_gu     = R_GG*Error_changed*R_GG';
							var_gu_d   = R_GG*Error_changed_d*R_GG';
							
							om     = (diag(var_gu));
							omncd  = (diag(var_gu_d));
							
							mean_final = mean_gu./sqrt(om);
					   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
							
							mean_final_d  = (  sqrt(om') .* mean_gu_d' -  mean_gu' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
						  
							shi_r_unq = {};
							for ishi(1,rows(var_final_d)-1,1);
									  shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
							endfor;
							
							num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
							
							if(Store_nn[pair_nn_count,1] > upper_limit);
							  p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  ( Store_nn[pair_nn_count,2:1+num_element] * mean_final_d' + Store_nn[pair_nn_count,1+num_element+1:1+num_element+cols(shi_r_unq)] * shi_r_unq' )  )  ;
							endif;
							
							clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d,var_gu_d,var_final_d,shi_r_unq;
					endfor;
				 endfor;
		         endif;
				    					
				 gg = p1_dd + p2_dd + p3_dd + p4_dd;
				 gg_temp = gg_temp | gg;
				   
				 clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
          Lambda_gradient = Lambda_gradient ~ gg_temp;   
         clear Utilityd;
	 endif;
endfor;
retp(Lambda_gradient);
endp;

proc(1)=lgd_Lamda1(Lamda_chol);
	local Lamda_gradient,ilamda,d_chol_lamda,Lamdad,Lamda_dd,GP_Global_d,Phi_All,Phi_mat,temp_arr,ME_Error_Mat_d,icheck,jcheck,row_all,row_all_sq,denom,denom1,d_chol_alpha_corr,Alpha_corrd,Alpha_matd,Udiff_Errord,zd,zsd,Z_matd,yd,j,Utilityd,Total_g,pair_ogc_count,pair_ogcn_count,pair_nn_count,Full_error,U_Y,U_Yd,rho_low_g2,mean_up_final_d,mean_final;
	local pair1,pair2,M,Mq,Alt_chosen,iden_matrix,one_negative,temp1,ch,obs_pairs,temp_check,pair2_all,pair2_index,Y_pair1,U_pair1,Y_pair2,U_pair2,Y_pair1d,U_pair1d,Y_pair2d,U_pair2d;
	local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Full_error_pair1,Full_error_pair2,Full_error_pair12;
	local B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Diff_Mean_mu_d,Mean_changed_d,Error_changed_d,Full_error_pair1d,Full_error_pair2d,Full_error_pair12d;		
	local Curr_Lower_Threshold,Curr_Upper_Threshold,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp11,p2_temp22,p2_temp33,p2_temp44,gg_d,rho_low_g1,g1,g2,g3,g4,g11,g22;
	local p1_dd,p2_dd,p3_dd,p4_dd,p1,p1_d,p1_dm,p1_dr,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,mean_gu_d,om,mean_low_final,mean_up_final,var_final,mean_low_final_d,R_GG,num_element;
	local rho_up_g1,rho_up_g2,mean_final_d,var_g1g2,var_g1g2_d,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4,row_num,col_num,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,curr_mat;
	local Full_error_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,Shi_r_unq,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md;
	local var_gu_d,omncd,var_final_d,diff_cdf,w1,w2,Count_Threshold_d,Curr_Lower_Threshold_d,Curr_Upper_Threshold_d,delta_d,Gamma_X_d,Lambda_count_d,dgam_smallC,dgam_term1,curr_ele;
	local y2_d,countObs,smallCObs,term2,threshUpper,threshLower,PhiUpper,PhiLower,rho_low_g3_d,rho_up_g3_d,zs,C_Arrow_d,Gamma_Phi_d,ZGPD,temp_store,Lambda_mat_d,temp_num1,temp_num2;
    local S1A1,S1A2,S12A12,corr_mat,S1A1d,S1A2d,S12A12d,corr_matd,gg_temp,e1,e12,e2,e1_d,e12_d,e2_d,gg,pair_cc_count,num_tote,num_mene,num_vare,p1_up,p1_low,p_diff,p3_dd_temp,Lambda_mat;
	
Lamda_gradient = {};
for ilamda(1,All_nCholerr,1);
       if(_max_active[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+ilamda] == 0);
		   Lamda_gradient = Lamda_gradient ~ zeros(nobs,1);
	   else;
		   
		   if(Parametrized == 1);
			   d_chol_lamda = zeros(All_nCholerr,1);    d_chol_lamda[ilamda]=1;       
			   Lamdad      = zeros(Alternative_all,Alternative_all);
			   for i(1,Num_MNP,1);
			
					if(i == 1);
					 temp_num1 = 1;
					 temp_num2 = nCholerr_csum[i,1];
					else;
					 temp_num1 = nCholerr_csum[i-1,1] + 1;
					 temp_num2 = nCholerr_csum[i,1];
					endif;
					
					curr_ele = upmat(xpnd(d_chol_lamda[temp_num1:temp_num2]));
									
					if(i == 1);
					   Lamdad[2:Nominal_csum[i],2:Nominal_csum[i]] = curr_ele';
					else;
					   Lamdad[Nominal_csum[i-1,1]+2:Nominal_csum[i],Nominal_csum[i-1,1]+2:Nominal_csum[i]] = curr_ele';  
					endif;
				endfor;
				
				Lamda_dd = Lamdad * Lamda_chol' + Lamda_chol * Lamdad';
		    elseif(Parametrized == 0);			        
		       d_chol_lamda = zeros(All_nCholerr,1);    d_chol_lamda[ilamda]=1;       
			   Lamda_dd      = zeros(Alternative_all,Alternative_all);
			   for i(1,Num_MNP,1);
			
					if(i == 1);
					 temp_num1 = 1;
					 temp_num2 = nCholerr_csum[i,1];
					else;
					 temp_num1 = nCholerr_csum[i-1,1] + 1;
					 temp_num2 = nCholerr_csum[i,1];
					endif;
					
					curr_mat = xpnd(d_chol_lamda[temp_num1:temp_num2]);
									
					if(i == 1);
					   Lamda_dd[2:Nominal_csum[i],2:Nominal_csum[i]] = curr_mat ;
					else;
					   Lamda_dd[Nominal_csum[i-1,1]+2:Nominal_csum[i],Nominal_csum[i-1,1]+2:Nominal_csum[i]] = curr_mat ;  
					endif;
				endfor;
			endif;
			
			gg_temp = {};
			pair_cc_count  = 0;
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;

            for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;p1_dd = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e2 = {};  e1_d = {}; e12_d = {}; e2_d = {}; 
	               Full_error_d = {}; 
				   
				   Lambda_mat = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
				   
				   e1   = e1  ~ ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
				   e12  = e12 ~ ( D_matrix * Alpha_mat * Lambda_mat');
				   e2   = e2  ~ ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d  ~ ( zeros(nvar_mear,nvar_mear) );
				   e12_d  = e12_d ~ ( zeros(nvar_mear,Alternative_all));
				   e2_d   = e2_d  ~ ( Lamda_dd );
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e12'~e2);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e12_d'~e2_d);
				   
				   U_Y   = U_Y | Y_vec[i,.]'| Utility[i,.]';  
				   
				   
				   M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   
				   Alt_chosen = (Main_data[i,Altchm])';
				   
				   for j(1,num_nominal,1);
					   iden_matrix = eye(All_Nominal[1,j]-1);
					   one_negative = -1*ones(All_Nominal[1,j]-1,1);
					   if(Alt_chosen[j] eq 1);
						temp1 = one_negative ~ iden_matrix;
					   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
						temp1 = iden_matrix ~ one_negative;
					   else;
						ch = Alt_chosen[j];
						temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
					   endif;
					
					   if(j == 1);
						  M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
					   else;
						  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
					   endif;
					  
					   clear temp1;
				   endfor;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   Error_Tild_d = M * Full_error_d * M';
				   
				   BU_Tild      = B_Tild[nvar_mear_cont+1:rows(B_Tild)];                              
				   
				   if(nvar_mear_cont > 0);
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont]; 
			       Error_YU_Tild_d  = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),1:nvar_mear_cont];   	   
				   endif;
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)]; 
				   Error_U_Tild_d   = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),nvar_mear_cont+1:cols(Error_Tild_d)];   
				   
				   if(nvar_mear_cont > 0);
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];  
				   Diff_Mean     = (Main_data[i,Continous_Index])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   Error_Y_d     = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];  
				   endif;
				   
				   if(nvar_mear_cont > 0);
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   =  Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   Mean_changed_d  =  ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) ;
				   Error_changed_d =  Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
			       else;		   
				   Mean_changed    =  BU_Tild ;
				   Error_changed   =  Error_U_Tild ;
				   Mean_changed_d  =  zeros(rows(Mean_changed),1);
				   Error_changed_d =  Error_U_Tild_d ;
				   endif;
				   
				   				   
				   Curr_Lower_Threshold = {};
		           Curr_Upper_Threshold = {};
		
		            if(nvar_mear_ordl > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
					endif;
					
					if(nvar_mear_count > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
					endif;
						
					Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
				   
				   
				   p1_dd = 0;
					if(nvar_mear_cont > 0);
					   pair_cc_count = pair_cc_count + 1;
					   if(Store_cc[pair_cc_count,1] > upper_limit);
						  p1    = Store_cc[pair_cc_count,1];
						  p1_dr = Store_cc[pair_cc_count,nvar_mear_cont+2:nvar_mear_cont+1+cc_eler1];
						  p1_dd = (1/p1)*(p1_dr * vech(Error_Y_d));
					   endif;
				   endif; 
				   
				   if(nvar_ogc > 1);	   			   
					   p2_dd = 0; 
					   for g1(1,nvar_ogc-1,1);
		                   for g2(g1+1,nvar_ogc,1);
							   
							   pair_ogc_count = pair_ogc_count + 1;
							   
							   om_low_g1   =   Error_changed[g1,g1];
							   om_low_g2   =   Error_changed[g2,g2];
							   om_up_g1    =   Error_changed[g1,g1];
							   om_up_g2    =   Error_changed[g2,g2];
							   
							   omncd_low_g1   =   Error_changed_d[g1,g1];
							   omncd_low_g2   =   Error_changed_d[g2,g2];
							   omncd_up_g1    =   Error_changed_d[g1,g1];
							   omncd_up_g2    =   Error_changed_d[g2,g2];
							   
							   rho_low_g1md  =  - Mean_changed_d[g1] ;
							   rho_low_g2md  =  - Mean_changed_d[g2] ;
							   rho_up_g1md   =  - Mean_changed_d[g1] ;
							   rho_up_g2md   =  - Mean_changed_d[g2] ;
							   
							   rho_low_g1m  =  (Curr_Lower_Threshold[1,g1] - Mean_changed[g1] ) ;
							   rho_low_g2m  =  (Curr_Lower_Threshold[1,g2] - Mean_changed[g2] ) ;
							   rho_up_g1m   =  (Curr_Upper_Threshold[1,g1] - Mean_changed[g1] ) ;
							   rho_up_g2m   =  (Curr_Upper_Threshold[1,g2] - Mean_changed[g2] ) ;
							   
							   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
							   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
							   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
							   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
							   
							   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
					   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
							   
							   if(Store_ogc[pair_ogc_count,13] > upper_limit);
							      p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
							   endif;	   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
							   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
							   endfor;
					   endfor;
				  else;
					  p2_dd = 0; 
			      endif;
			   
                   if(nvar_ogc > 0);	 
					p3_dd = 0; 
					for v1(1,nvar_ogc,1);
						for g1(1,num_nominal,1);
							pair_ogcn_count = pair_ogcn_count + 1;
							D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
							D_VG[1,v1] = 1;
							
							if(g1 == 1);
							   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							rho_low_g3 = D_VG*Curr_Lower_Threshold';
							rho_up_g3  = D_VG*Curr_Upper_Threshold';
							rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
				   
							mean_gu    = D_VG*Mean_changed;
							var_gu     = D_VG*Error_changed*D_VG';
							
							mean_gu_d  = D_VG*Mean_changed_d;
							var_gu_d   = D_VG*Error_changed_d*D_VG';
				   
						    om     =  (diag(var_gu));
							omncd  = (diag(var_gu_d));
							
							mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
							mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
				   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
							
							mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					        mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					   
					        var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
					        var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1],1));
					  
				   
							 shi_r_unq = {};
					         for ishi(1,rows(var_final_d)-1,1);
							      shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d)];
					         endfor;
					         
							num_tote  = All_Nominal[1,g1] + (All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5);
							num_mene  = All_Nominal[1,g1] ;
							num_vare  = All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5;
							
							p1_up   = Store_ogcn[pair_ogcn_count,1];
	                        p1_low  = Store_ogcn[pair_ogcn_count,1+num_tote+1];
	                        p_diff  = p1_up - p1_low;
					
			                if(p_diff > upper_limit);
								p3_dd_temp = (1/p_diff) *(Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d' + Store_ogcn[pair_ogcn_count,1+num_mene+1:1+num_mene+num_vare] * shi_r_unq' - Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d' - Store_ogcn[pair_ogcn_count,1+num_tote+1+num_mene+1:1+num_tote+1+num_mene+num_vare] * shi_r_unq');
								p3_dd = p3_dd + p3_dd_temp;
							endif;			
							
							 clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g11,w2,g2;
					         clear omncd,var_gu_d,var_final_d,shi_r_unq;						 
						  endfor;
					 endfor;
				 else;
					 p3_dd = 0 ;
				 endif;
		 
		         			 
				 p4_dd = 0;
				 if(num_nominal > 1);
					for g1(1,num_nominal-1,1);
						for g2(g1+1,num_nominal,1);
							R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_ogc+Alternative_all-num_nominal);
				
							pair_nn_count = pair_nn_count + 1;
							if(g1 == 1);
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   R_GG[1:M_mat_Track[1,g1],nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_ogc+M_mat_Track_csum[g2-1,1]+1:nvar_ogc+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
							
							mean_gu    = -(R_GG*Mean_changed);
							mean_gu_d  = -(R_GG*Mean_changed_d);
													
							var_gu     = R_GG*Error_changed*R_GG';
							var_gu_d   = R_GG*Error_changed_d*R_GG';
							
							om     = (diag(var_gu));
							omncd  = (diag(var_gu_d));
							
							mean_final = mean_gu./sqrt(om);
					   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
							
							mean_final_d  = (  sqrt(om') .* mean_gu_d' -  mean_gu' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
						  
					   
							shi_r_unq = {};
							for ishi(1,rows(var_final_d)-1,1);
									  shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
							endfor;
						   
							num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
							
							if(Store_nn[pair_nn_count,1] > upper_limit);
							  p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  ( Store_nn[pair_nn_count,2:1+num_element] * mean_final_d' + Store_nn[pair_nn_count,1+num_element+1:1+num_element+cols(shi_r_unq)] * shi_r_unq' )  )  ;
							endif;
							
							clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d,var_gu_d,var_final_d,shi_r_unq;
					endfor;
				 endfor;
		         endif;
				    					
				 gg = p1_dd + p2_dd + p3_dd + p4_dd;
				 gg_temp = gg_temp | gg;
				   
				 clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
             Lamda_gradient = Lamda_gradient ~ gg_temp;   
	 endif;
endfor;
retp(Lamda_gradient);
endp;

proc(1)=lgd_threshold1(upper_threshold_K1);
	local upper_threshold_gradient,iupper_th,d_chol_lamda,Lamdad,Lamda_dd,GP_Global_d,Phi_All,Phi_mat,temp_arr,ME_Error_Mat_d,icheck,jcheck,row_all,row_all_sq,denom,denom1,d_chol_alpha_corr,Alpha_corrd,Alpha_matd,Udiff_Errord,zd,zsd,Z_matd,yd,j,Utilityd,Total_g,pair_ogc_count,pair_ogcn_count,pair_nn_count,Full_error,U_Y,U_Yd,rho_low_g2,mean_up_final_d,mean_final;
	local pair1,pair2,M,Mq,Alt_chosen,iden_matrix,one_negative,temp1,ch,obs_pairs,temp_check,pair2_all,pair2_index,Y_pair1,U_pair1,Y_pair2,U_pair2,Y_pair1d,U_pair1d,Y_pair2d,U_pair2d;
	local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Full_error_pair1,Full_error_pair2,Full_error_pair12;
	local B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Diff_Mean_mu_d,Mean_changed_d,Error_changed_d,Full_error_pair1d,Full_error_pair2d,Full_error_pair12d;		
	local Curr_Lower_Threshold,Curr_Upper_Threshold,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp11,p2_temp22,p2_temp33,p2_temp44,gg_d,rho_low_g1,g1,g2,g3,g4,g11,g22;
	local p1_dd,p2_dd,p3_dd,p4_dd,p1,p1_d,p1_dm,p1_dr,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,mean_gu_d,om,mean_low_final,mean_up_final,var_final,mean_low_final_d,R_GG,num_element;
	local rho_up_g1,rho_up_g2,mean_final_d,var_g1g2,var_g1g2_d,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4,row_num,col_num,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m;
	local Full_error_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,Shi_r_unq,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md;
	local var_gu_d,omncd,var_final_d,diff_cdf,w1,w2,Count_Threshold_d,Curr_Lower_Threshold_d,Curr_Upper_Threshold_d,delta_d,Gamma_X_d,Lambda_count_d,dgam_smallC,dgam_term1,curr_ele;
	local y2_d,countObs,smallCObs,term2,threshUpper,threshLower,PhiUpper,PhiLower,rho_low_g3_d,rho_up_g3_d,zs,C_Arrow_d,Gamma_Phi_d,ZGPD,temp_store,Lambda_mat_d,temp_num1,temp_num2;
	local upper_threshold_d,lower_threshold_matrix_d,upper_threshold_matrix_d,upper_threshold_K1_d,S1A1,S1A2,S12A12,corr_mat,S1A1d,S1A2d,S12A12d,corr_matd;
    local gg_temp,e1,e12,e2,e1_d,e12_d,e2_d,gg,pair_cc_count,num_tote,num_mene,num_vare,p1_up,p1_low,p_diff,p3_dd_temp,Lambda_mat;
	
upper_threshold_gradient = {};
for iupper_th(1,num_ordl_cat_req,1);
	if(_max_active[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+iupper_th] == 0);
		upper_threshold_gradient = upper_threshold_gradient ~ zeros(nobs,1);
	else;
		  		  
		  upper_threshold_d = zeros(num_ordl_cat_req,1);
		  upper_threshold_d[iupper_th] = 1;
		  
		  upper_threshold_K1_d   = zeros(nvar_mear_ordl,Highest_scale);
		    for i(1,nvar_mear_ordl,1);
		        if(num_ordl_cat_req1[i]>0);
					if(i==1);
					 upper_threshold_K1_d[i,1:num_ordl_cat_req1[i]] = (upper_threshold_d[1:num_ordl_cat_req_csum[i]])';
					else;
					 upper_threshold_K1_d[i,1:num_ordl_cat_req1[i]] = (upper_threshold_d[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
					endif;
	            endif;
			endfor;
	      
		  if(Parametrized == 1);
		       upper_threshold_K1_d = upper_threshold_K1_d .* upper_threshold_K1;
		       upper_threshold_d = (cumsumc(upper_threshold_K1_d'))';
		  elseif(Parametrized == 0);
		       upper_threshold_d = upper_threshold_K1_d;
		  endif;
		   
		   for i(1,nvar_mear_ordl,1);
	            if(num_ordl_cat_req1[i] < Highest_scale);
	             upper_threshold_d[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity_d*ones(1,Highest_scale-num_ordl_cat_req1[i]);
		        endif;
		   endfor;
		  
		  
		  upper_threshold_d = negative_infinity_d*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold_d ~ positive_infinity_d*ones(nvar_mear_ordl,1); 
		  
		  lower_threshold_matrix_d = zeros(nind,nvar_mear_ordl);
	      upper_threshold_matrix_d = zeros(nind,nvar_mear_ordl);
	
			for i(1,nobs,1);
				for j(1,nvar_mear_ordl,1);
					for k(1,num_ordl_cat[j],1);
					    if(Main_data[i,Ordinal_Index[j]] == k);
					        lower_threshold_matrix_d[i,j] = upper_threshold_d[j,k];
					        upper_threshold_matrix_d[i,j] = upper_threshold_d[j,k+1];
					    endif;
				    endfor;
			   endfor;
		   endfor;

            gg_temp = {};
			pair_cc_count  = 0;
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;

            for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0; 
				   Full_error = {}; e1 = {}; e12 = {}; e2 = {}; 
	               
				   Lambda_mat = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
				   
				   e1   = e1  ~  ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
				   e12  = e12 ~ ( D_matrix * Alpha_mat * Lambda_mat');
				   e2   = e2  ~ ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
				   
                   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e12'~e2);
				   
				   U_Y   = U_Y | Y_vec[i,.]'| Utility[i,.]';  
				   
				   M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   
				   Alt_chosen = (Main_data[i,Altchm])';
				   
				   for j(1,num_nominal,1);
					   iden_matrix = eye(All_Nominal[1,j]-1);
					   one_negative = -1*ones(All_Nominal[1,j]-1,1);
					   if(Alt_chosen[j] eq 1);
						temp1 = one_negative ~ iden_matrix;
					   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
						temp1 = iden_matrix ~ one_negative;
					   else;
						ch = Alt_chosen[j];
						temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
					   endif;
					
					   if(j == 1);
						  M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
					   else;
						  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
					   endif;
					  
					   clear temp1;
				   endfor;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];                              
				   
				   if(nvar_mear_cont > 0);
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];     
				   endif;
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];  
				   
				   if(nvar_mear_cont > 0);
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];  
				   Diff_Mean     = (Main_data[i,Continous_Index])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
			       endif;
			   
				   if(nvar_mear_cont > 0);
				   Mean_changed   =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed  = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   else;		   
				   Mean_changed =  BU_Tild ;
				   Error_changed = Error_U_Tild ;
				   endif;		   
				   
				   			   
				   Curr_Lower_Threshold = {};
		           Curr_Upper_Threshold = {};
				   
				   Curr_Lower_Threshold_d = {};
		           Curr_Upper_Threshold_d = {};
				   
				   Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
		           Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
				   
				   Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ lower_threshold_matrix_d[i,.] ;
		           Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ upper_threshold_matrix_d[i,.] ;
		
		           				   
				   if(nvar_mear_count > 0);
				      Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
		              Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
					  
					  Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*Count_Threshold[i,1:nvar_mear_count] ;
		              Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
				   endif;					  
				   
				    Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
					
					Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ (zeros(1,Alternative_all-num_nominal)) ;
		            Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ (zeros(1,Alternative_all-num_nominal));
		         				   
				   			   
				   if(nvar_ogc > 1);	   			   
					   p2_dd = 0; 
					   for g1(1,nvar_ogc-1,1);
		                   for g2(g1+1,nvar_ogc,1);
							   
							   pair_ogc_count = pair_ogc_count + 1;
							   
							   rho_low_g1d =  (Curr_Lower_Threshold_d[1,g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2d =  (Curr_Lower_Threshold_d[1,g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1d =   (Curr_Upper_Threshold_d[1,g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2d =   (Curr_Upper_Threshold_d[1,g2] ) / sqrt(Error_changed[g2,g2]);
					   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
							   
							   if(Store_ogc[pair_ogc_count,13] > upper_limit);
							      p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
							   endif;		   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   endfor;
					   endfor;
				   else;
					   p2_dd = 0 ;
				   endif;
			   
                  
					p3_dd = 0; 
					for v1(1,nvar_ogc,1);
						for g1(1,num_nominal,1);
							pair_ogcn_count = pair_ogcn_count + 1;
							D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
							D_VG[1,v1] = 1;
							
							if(g1 == 1);
							   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
						    rho_low_g3 = D_VG*Curr_Lower_Threshold';
							rho_up_g3  = D_VG*Curr_Upper_Threshold';
							rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
							
							rho_low_g3_d = D_VG*Curr_Lower_Threshold_d';
							rho_up_g3_d  = D_VG*Curr_Upper_Threshold_d';
				   
							mean_gu    = D_VG*Mean_changed;
							var_gu     = D_VG*Error_changed*D_VG';
							
											   
						    om  = sqrt(diag(var_gu));
							mean_low_final = (rho_low_g3 - mean_gu)./om;
							mean_up_final  = (rho_up_g3 - mean_gu)./om;
				   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
							
							mean_low_final_d = (rho_low_g3_d )./om;
					        mean_up_final_d  = (rho_up_g3_d )./om;
				   
							num_tote  = All_Nominal[1,g1] + (All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5);
							num_mene  = All_Nominal[1,g1] ;
							num_vare  = All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5;
							
							p1_up   = Store_ogcn[pair_ogcn_count,1];
	                        p1_low  = Store_ogcn[pair_ogcn_count,1+num_tote+1];
	                        p_diff  = p1_up - p1_low;							
							if(p_diff > upper_limit);
								p3_dd_temp = (1/p_diff) *(Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d - Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d);
							    p3_dd = p3_dd + p3_dd_temp;
							endif;
				            
							 clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
						     clear rho_low_g3_d,rho_up_g3_d;
						 endfor;
					 endfor;
				 
		 		         				 
				 gg = p2_dd + p3_dd ;
				 gg_temp = gg_temp | gg;
				   
				 clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
          upper_threshold_gradient = upper_threshold_gradient ~ gg_temp;   
     endif;
endfor; 
retp(upper_threshold_gradient);
endp;

proc(1)=lgd_Phi1(Phi_coeff_K1);
	local Phi_gradient,iphi,Phi_d,Lamdad,Lamda_dd,GP_Global_d,Phi_All,Phi_mat,temp_arr,ME_Error_Mat_d,icheck,jcheck,row_all,row_all_sq,denom,denom1,d_chol_alpha_corr,Alpha_corrd,Alpha_matd,Udiff_Errord,zd,zsd,Z_matd,yd,j,Utilityd,Total_g,pair_ogc_count,pair_ogcn_count,pair_nn_count,Full_error,U_Y,U_Yd,rho_low_g2,mean_up_final_d,mean_final;
	local pair1,pair2,M,Mq,Alt_chosen,iden_matrix,one_negative,temp1,ch,obs_pairs,temp_check,pair2_all,pair2_index,Y_pair1,U_pair1,Y_pair2,U_pair2,Y_pair1d,U_pair1d,Y_pair2d,U_pair2d;
	local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Full_error_pair1,Full_error_pair2,Full_error_pair12;
	local B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Diff_Mean_mu_d,Mean_changed_d,Error_changed_d,Full_error_pair1d,Full_error_pair2d,Full_error_pair12d;		
	local Curr_Lower_Threshold,Curr_Upper_Threshold,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp11,p2_temp22,p2_temp33,p2_temp44,gg_d,rho_low_g1,g1,g2,g3,g4,g11,g22;
	local p1_dd,p2_dd,p3_dd,p4_dd,p1,p1_d,p1_dm,p1_dr,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,mean_gu_d,om,mean_low_final,mean_up_final,var_final,mean_low_final_d,R_GG,num_element;
	local rho_up_g1,rho_up_g2,mean_final_d,var_g1g2,var_g1g2_d,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4,row_num,col_num,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m;
	local Full_error_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,Shi_r_unq,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md;
	local var_gu_d,omncd,var_final_d,diff_cdf,w1,w2,Count_Threshold_d,Curr_Lower_Threshold_d,Curr_Upper_Threshold_d,delta_d,Gamma_X_d,Lambda_count_d,dgam_smallC,dgam_term1,curr_ele;
	local y2_d,countObs,smallCObs,term2,threshUpper,threshLower,PhiUpper,PhiLower,rho_low_g3_d,rho_up_g3_d,zs,C_Arrow_d,Gamma_Phi_d,ZGPD,temp_store,Lambda_mat_d,temp_num1,temp_num2;
	local upper_threshold_d,lower_threshold_matrix_d,upper_threshold_matrix_d,upper_threshold_K1_d,dthet_smallC,dthet_term1,dthet_term2,dthet_threshUpper,dthet_threshLower,Lambda_mat;
	local Phi_K1_d,xPhiMat_d,S1A1,S1A2,S12A12,corr_mat,S1A1d,S1A2d,S12A12d,corr_matd,gg_temp,e1,e12,e2,e1_d,e12_d,e2_d,gg,pair_cc_count,num_tote,num_mene,num_vare,p1_up,p1_low,p_diff,p3_dd_temp;


Phi_gradient = {};
for iphi(1,Total_Phi,1);
	if(_max_active[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+iphi] == 0);
		Phi_gradient = Phi_gradient ~ zeros(nobs,1);
	else;
				
		Phi_d = zeros(Total_Phi,1);
		Phi_d[iphi] = 1;
		
		Phi_K1_d  = zeros(nvar_mear_count,Highest_Phi);
		for i(1,nvar_mear_count,1);
			if(i==1);
			   Phi_K1_d[i,1:Num_Phi[i]] = (Phi_d[1:num_Phi_csum[i]])';
			else;
			   Phi_K1_d[i,1:Num_Phi[i]] = (Phi_d[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
			endif;
		endfor;
		
		if(Parametrized == 1);
			Phi_K1_d = Phi_K1_d .* Phi_coeff_K1 ;
			Phi_d  = (cumsumc(Phi_K1_d'))';	
		elseif(Parametrized == 0);
			Phi_d  = Phi_K1_d;
		endif;
		
		for i(1,nvar_mear_count,1);
			if(Num_Phi[i] < Highest_Phi);
			   Phi_d[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
			endif;
		endfor;
		
		xPhiMat_d = zeros(nvar_mear_count,threshCountMax+1);
        for iCnt (1,nvar_mear_count,1);
		    xPhiMat_d[iCnt,2:1+Num_Phi[iCnt]] = Phi_d[iCnt,1:Num_Phi[iCnt]];
		endfor;
		
		for iCnt (1,nvar_mear_count,1);
           xPhiMat_d[iCnt,Num_Phi[iCnt]+2:threshCountMax+1] = Phi_d[iCnt,Num_Phi[iCnt]] .*. ones(1,threshCountMax+1-Num_Phi[iCnt]-1);
		endfor;
		
		Count_Threshold_d = zeros(nobs,nvar_mear_count*2);
		for iobs(1,nobs,1);
			for jcount(1,nvar_mear_count,1);
		        countObs = Main_data[iobs,Count_Index[jcount]];
				if(countObs gt 0); 
					phiUpper = (xPhiMat_d[jcount,countObs+1])';
					phiLower = (xPhiMat_d[jcount,countObs])';
				else; 
				    phiUpper = 0; 
				    phiLower = 0; 
			    endif;	
		
			    Count_Threshold_d[iobs,jcount] = phiLower;
		        Count_Threshold_d[iobs,nvar_mear_count+jcount] = phiUpper;
		    endfor;
		endfor;
        
		    gg_temp = {};
			pair_cc_count  = 0;
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;

            for i(1,nobs,1);
				   U_Y = {}; gg = 0; 
				   Full_error = {}; e1 = {}; e12 = {}; e2 = {};
	               
				   Lambda_mat = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
				   
				   e1   = e1  ~  ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
				   e12  = e12 ~ ( D_matrix * Alpha_mat * Lambda_mat');
				   e2   = e2  ~ ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
				   
                   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e12'~e2);
				   
				   U_Y   = U_Y | Y_vec[i,.]'| Utility[i,.]';  
				   			   
				   M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   
				   Alt_chosen = (Main_data[i,Altchm])';
				   
				   for j(1,num_nominal,1);
					   iden_matrix = eye(All_Nominal[1,j]-1);
					   one_negative = -1*ones(All_Nominal[1,j]-1,1);
					   if(Alt_chosen[j] eq 1);
						temp1 = one_negative ~ iden_matrix;
					   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
						temp1 = iden_matrix ~ one_negative;
					   else;
						ch = Alt_chosen[j];
						temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
					   endif;
					
					   if(j == 1);
						  M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
					   else;
						  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
					   endif;
					  
					   clear temp1;
				   endfor;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];                              
				   
				   if(nvar_mear_cont > 0);
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];     
				   endif;
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];  
				   
				   if(nvar_mear_cont > 0);
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];  
				   Diff_Mean     = (Main_data[i,Continous_Index])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   endif;
				   
				   if(nvar_mear_cont > 0);
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   else;		   
				   Mean_changed =  BU_Tild ;
				   Error_changed = Error_U_Tild ;
				   endif;
				   
				   
				   Curr_Lower_Threshold = {};
		           Curr_Upper_Threshold = {};
				   
				   Curr_Lower_Threshold_d = {};
		           Curr_Upper_Threshold_d = {};
		
		           if(nvar_mear_ordl > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
						
						Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*lower_threshold_matrix[i,.] ;
		                Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*upper_threshold_matrix[i,.] ;
					endif;
					
					Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
					
					Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ Count_Threshold_d[i,1:nvar_mear_count] ;
		            Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ Count_Threshold_d[i,nvar_mear_count+1:2*nvar_mear_count] ;
					
					Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
				   
				    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ (zeros(1,Alternative_all-num_nominal)) ;
		            Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ (zeros(1,Alternative_all-num_nominal));

		           
				    if(nvar_ogc > 1);	   			   
					   p2_dd = 0; 
					   for g1(1,nvar_ogc-1,1);
		                   for g2(g1+1,nvar_ogc,1);
							   
							   pair_ogc_count = pair_ogc_count + 1;
							   
							   rho_low_g1d =  (Curr_Lower_Threshold_d[1,g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2d =  (Curr_Lower_Threshold_d[1,g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1d =   (Curr_Upper_Threshold_d[1,g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2d =   (Curr_Upper_Threshold_d[1,g2] ) / sqrt(Error_changed[g2,g2]);
					   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
							   
							   if(Store_ogc[pair_ogc_count,13] > upper_limit);
							      p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
							   endif;   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   endfor;
					   endfor;
				  else;
					  p2_dd = 0; 
			      endif;
			   
                  if(nvar_ogc > 1);	 
					p3_dd = 0; 
					for v1(1,nvar_ogc,1);
						for g1(1,num_nominal,1);
							pair_ogcn_count = pair_ogcn_count + 1;
							D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
							D_VG[1,v1] = 1;
							
							if(g1 == 1);
							   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
						    rho_low_g3 = D_VG*Curr_Lower_Threshold';
							rho_up_g3  = D_VG*Curr_Upper_Threshold';
							rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
							
							rho_low_g3_d = D_VG*Curr_Lower_Threshold_d';
							rho_up_g3_d  = D_VG*Curr_Upper_Threshold_d';
				   
							mean_gu    = D_VG*Mean_changed;
							var_gu     = D_VG*Error_changed*D_VG';
							
							
						    om  = sqrt(diag(var_gu));
							mean_low_final = (rho_low_g3 - mean_gu)./om;
							mean_up_final  = (rho_up_g3 - mean_gu)./om;
				   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
							
							mean_low_final_d = (rho_low_g3_d )./om;
					        mean_up_final_d  = (rho_up_g3_d  )./om;
				   
							num_tote  = All_Nominal[1,g1] + (All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5);
							num_mene  = All_Nominal[1,g1] ;
							num_vare  = All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5;
							
							p1_up   = Store_ogcn[pair_ogcn_count,1];
	                        p1_low  = Store_ogcn[pair_ogcn_count,1+num_tote+1];
	                        p_diff  = p1_up - p1_low;							
							if(p_diff > upper_limit);
								p3_dd_temp = (1/p_diff) *(Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d - Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d);
							    p3_dd = p3_dd + p3_dd_temp;
							endif;
				            
							 clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
						     clear rho_low_g3_d,rho_up_g3_d;
						 endfor;
					 endfor;
				 else;
					 p3_dd = 0;
				 endif;
		 
		         gg = p2_dd + p3_dd ;
				 gg_temp = gg_temp | gg;
				   
				 clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
          Phi_gradient = Phi_gradient ~ gg_temp;   
          clear Count_Threshold_d;
	 endif;
endfor;
retp(Phi_gradient);
endp;

proc(1)=lgd_Theta(Theta_coeff);
	local Theta_gradient,itheta,d_chol_lamda,Lamdad,Lamda_dd,GP_Global_d,Phi_All,Phi_mat,temp_arr,ME_Error_Mat_d,icheck,jcheck,row_all,row_all_sq,denom,denom1,d_chol_alpha_corr,Alpha_corrd,Alpha_matd,Udiff_Errord,zd,zsd,Z_matd,yd,j,Utilityd,Total_g,pair_ogc_count,pair_ogcn_count,pair_nn_count,Full_error,U_Y,U_Yd,rho_low_g2,mean_up_final_d,mean_final;
	local pair1,pair2,M,Mq,Alt_chosen,iden_matrix,one_negative,temp1,ch,obs_pairs,temp_check,pair2_all,pair2_index,Y_pair1,U_pair1,Y_pair2,U_pair2,Y_pair1d,U_pair1d,Y_pair2d,U_pair2d;
	local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Full_error_pair1,Full_error_pair2,Full_error_pair12;
	local B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Diff_Mean_mu_d,Mean_changed_d,Error_changed_d,Full_error_pair1d,Full_error_pair2d,Full_error_pair12d;		
	local Curr_Lower_Threshold,Curr_Upper_Threshold,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp11,p2_temp22,p2_temp33,p2_temp44,gg_d,rho_low_g1,g1,g2,g3,g4,g11,g22;
	local p1_dd,p2_dd,p3_dd,p4_dd,p1,p1_d,p1_dm,p1_dr,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,mean_gu_d,om,mean_low_final,mean_up_final,var_final,mean_low_final_d,R_GG,num_element;
	local rho_up_g1,rho_up_g2,mean_final_d,var_g1g2,var_g1g2_d,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4,row_num,col_num,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m;
	local Full_error_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,Shi_r_unq,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md;
	local var_gu_d,omncd,var_final_d,diff_cdf,w1,w2,Count_Threshold_d,Curr_Lower_Threshold_d,Curr_Upper_Threshold_d,delta_d,Gamma_X_d,Lambda_count_d,dgam_smallC,dgam_term1,curr_ele;
	local y2_d,countObs,smallCObs,term2,threshUpper,threshLower,PhiUpper,PhiLower,rho_low_g3_d,rho_up_g3_d,zs,C_Arrow_d,Gamma_Phi_d,ZGPD,temp_store,Lambda_mat_d,temp_num1,temp_num2;
	local upper_threshold_d,lower_threshold_matrix_d,upper_threshold_matrix_d,upper_threshold_K1_d,dthet_smallC,dthet_term1,dthet_term2,dthet_threshUpper,dthet_threshLower,Lambda_mat;
    local S1A1,S1A2,S12A12,corr_mat,S1A1d,S1A2d,S12A12d,corr_matd,gg_temp,e1,e12,e2,e1_d,e12_d,e2_d,gg,pair_cc_count,num_tote,num_mene,num_vare,p1_up,p1_low,p_diff,p3_dd_temp;

Theta_gradient = {};
for itheta(1,nvar_mear_count,1);
	if(_max_active[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+itheta] == 0);
        Theta_gradient = Theta_gradient ~ zeros(nobs,1);
	else;
		
        if(Parametrized == 1);		
			dthet_smallC = -1*Theta_coeff[itheta,1]*smallC[.,itheta] ./ (Lambda_count[.,itheta]+ Theta_coeff[itheta,1]);
			dthet_term1 = term1[.,itheta] .* ((ln(1-smallC[.,itheta])*Theta_coeff[itheta,1]) + (Theta_coeff[itheta,1] *(-dthet_smallC) ./ (1-smallC[.,itheta])) ) - (1-smallC[.,itheta])^(Theta_coeff[itheta,1]) ./ gamma(Theta_coeff[itheta,1])^2 * digamma(Theta_coeff[itheta,1]) *gamma(Theta_coeff[itheta,1]) *Theta_coeff[itheta,1]; 
		elseif(Parametrized == 0);	
	        dthet_smallC = -1*smallC[.,itheta] ./ (Lambda_count[.,itheta]+ Theta_coeff[itheta,1]);
	        dthet_term1 = term1[.,itheta] .* ((ln(1-smallC[.,itheta])) + (Theta_coeff[itheta,1] *(-dthet_smallC) ./ (1-smallC[.,itheta])) ) - (1-smallC[.,itheta])^(Theta_coeff[itheta,1]) ./ gamma(Theta_coeff[itheta,1])^2 * digamma(Theta_coeff[itheta,1]) *gamma(Theta_coeff[itheta,1]); 
       	endif;	
        
		Count_Threshold_d = zeros(nobs,nvar_mear_count*2);
		for iobs(1,nobs,1);
			countObs = Main_data[iobs,Count_Index[1,itheta]];
			smallCObs = smallC[iobs,itheta];
			term2 = 0;
			dthet_term2 = 0;
			
			
			for icnt (0,countObs,1);
				term2 = term2 + (gamma(Theta_coeff[itheta,1] + iCnt)/(iCnt!) * smallCObs^iCnt);
				if(Parametrized == 1);
				  dthet_term2 = dthet_term2  + (digamma(Theta_coeff[itheta,1] + iCnt) *gamma(Theta_coeff[itheta,1] + iCnt) *Theta_coeff[itheta,1]/(iCnt!) * smallCObs^iCnt) + (gamma(Theta_coeff[itheta,1] + iCnt)/(iCnt!) * (iCnt*smallCObs^(iCnt-1) *dthet_smallC[iobs,.]) );
			    elseif(Parametrized == 0);	
				  dthet_term2 = dthet_term2  + (digamma(Theta_coeff[itheta,1] + iCnt) *gamma(Theta_coeff[itheta,1] + iCnt)/(iCnt!) * smallCObs^iCnt) + (gamma(Theta_coeff[itheta,1] + iCnt)/(iCnt!) * (iCnt*smallCObs^(iCnt-1) *dthet_smallC[iobs,.]) );
			    endif;
		    endfor;
			
			threshUpper = term1[iobs,itheta] * term2;
		    dthet_threshUpper = dthet_term1[iobs,.] * term2 + term1[iobs,itheta] * dthet_term2;
			
			if(countObs gt 0);  
				term2 = term2 - (gamma(Theta_coeff[itheta,1] + countObs)/(countObs!) * smallCObs^countObs);
				if(Parametrized == 1);
				   dthet_term2 = dthet_term2 - (digamma(Theta_coeff[itheta,1] + countObs) *gamma(Theta_coeff[itheta,1] + countObs) *Theta_coeff[itheta,1]/(countObs!) * smallCObs^countObs) - (gamma(Theta_coeff[itheta,1] + countObs)/(countObs!) * (countObs *smallCObs^(countObs-1) *dthet_smallC[iobs,.]) );
			    elseif(Parametrized == 0);	
				   dthet_term2 = dthet_term2 - (digamma(Theta_coeff[itheta,1] + countObs) *gamma(Theta_coeff[itheta,1] + countObs)/(countObs!) * smallCObs^countObs) - (gamma(Theta_coeff[itheta,1] + countObs)/(countObs!) * (countObs *smallCObs^(countObs-1) *dthet_smallC[iobs,.]) );
				endif;
				threshLower = term1[iobs,itheta] * term2;
				phiUpper = (xPhiMat[itheta,countObs+1])';
				phiLower = (xPhiMat[itheta,countObs])';
				dthet_threshLower = dthet_term1[iobs,.] * term2 + term1[iobs,itheta] * dthet_term2;
			else; 
				threshLower = 0;
				dthet_threshLower = 0;
				phiUpper = 0;
				phiLower = 0;
			endif;

            threshUpper = minc( threshUpper|0.99999999999999999);
		    threshLower = minc( threshLower|0.99999999999999999);
			
			dthet_threshUpper = 1/pdfn(cdfni(threshUpper )) *dthet_threshUpper;
		    dthet_threshLower = 1/pdfn(cdfni(threshLower)) *dthet_threshLower;
					   
		    Count_Threshold_d[iobs,itheta] = dthet_threshLower;
		    Count_Threshold_d[iobs,nvar_mear_count+itheta] = dthet_threshUpper;
		endfor;
        
		    gg_temp = {};
			pair_cc_count  = 0;
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;

            for i(1,nobs,1);
				   U_Y = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e2 = {};
	               
				   Lambda_mat = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
				   
				   e1   = e1  ~ ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
				   e12  = e12 ~ ( D_matrix * Alpha_mat * Lambda_mat');
				   e2   = e2  ~ ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
				   
                   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e12'~e2);
				   
				   
				   U_Y   = U_Y | Y_vec[i,.]'| Utility[i,.]';  
				   	   
				   M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   
				   Alt_chosen = (Main_data[i,Altchm])';
				   
				   for j(1,num_nominal,1);
					   iden_matrix = eye(All_Nominal[1,j]-1);
					   one_negative = -1*ones(All_Nominal[1,j]-1,1);
					   if(Alt_chosen[j] eq 1);
						temp1 = one_negative ~ iden_matrix;
					   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
						temp1 = iden_matrix ~ one_negative;
					   else;
						ch = Alt_chosen[j];
						temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
					   endif;
					
					   if(j == 1);
						  M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
					   else;
						  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
					   endif;
					  
					   clear temp1;
				   endfor;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];                              
				   
				   if(nvar_mear_cont > 0);
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];     
				   endif;
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];  
				   
				   if(nvar_mear_cont > 0);
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];  
				   Diff_Mean     = (Main_data[i,Continous_Index])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   endif;
				   
				   if(nvar_mear_cont > 0);
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   else;		   
				   Mean_changed =  BU_Tild ;
				   Error_changed = Error_U_Tild ;
				   endif;
				   
				   Curr_Lower_Threshold = {};
		           Curr_Upper_Threshold = {};
				   
				   Curr_Lower_Threshold_d = {};
		           Curr_Upper_Threshold_d = {};
		
		            if(nvar_mear_ordl > 0);
						Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
						Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
						
						Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*lower_threshold_matrix[i,.] ;
		                Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*upper_threshold_matrix[i,.] ;
					endif;
					
									
					Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
					
					Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ Count_Threshold_d[i,1:nvar_mear_count] ;
		            Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ Count_Threshold_d[i,nvar_mear_count+1:2*nvar_mear_count] ;
					
					Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
					Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
				   
				   	Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ (zeros(1,Alternative_all-num_nominal)) ;
		            Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ (zeros(1,Alternative_all-num_nominal));
                    
					
								   
				   if(nvar_ogc > 1);	   			   
					   p2_dd = 0; 
					   for g1(1,nvar_ogc-1,1);
		                   for g2(g1+1,nvar_ogc,1);
							   
							   pair_ogc_count = pair_ogc_count + 1;
							   
							   rho_low_g1d =  (Curr_Lower_Threshold_d[1,g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2d =  (Curr_Lower_Threshold_d[1,g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1d =   (Curr_Upper_Threshold_d[1,g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2d =   (Curr_Upper_Threshold_d[1,g2] ) / sqrt(Error_changed[g2,g2]);
					   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
							   
							   if(Store_ogc[pair_ogc_count,13] > upper_limit);
							      p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
							   endif;		   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   endfor;
					   endfor;
				  else;
					  p2_dd = 0; 
			      endif;
			   
                   if(nvar_ogc > 0);	 
					p3_dd = 0; 
					for v1(1,nvar_ogc,1);
						for g1(1,num_nominal,1);
							pair_ogcn_count = pair_ogcn_count + 1;
							D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
							D_VG[1,v1] = 1;
							
							if(g1 == 1);
							   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
							else;
							   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
							endif;
						   
							rho_low_g3 = D_VG*Curr_Lower_Threshold';
							rho_up_g3  = D_VG*Curr_Upper_Threshold';
							rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
							
							rho_low_g3_d = D_VG*Curr_Lower_Threshold_d';
							rho_up_g3_d  = D_VG*Curr_Upper_Threshold_d';
				   
							mean_gu    = D_VG*Mean_changed;
							var_gu     = D_VG*Error_changed*D_VG';
							
										   
						    om  = sqrt(diag(var_gu));
							mean_low_final = (rho_low_g3 - mean_gu)./om;
							mean_up_final  = (rho_up_g3 - mean_gu)./om;
				   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
							
							mean_low_final_d = (rho_low_g3_d )./om;
					        mean_up_final_d  = (rho_up_g3_d )./om;
				   
							num_tote  = All_Nominal[1,g1] + (All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5);
							num_mene  = All_Nominal[1,g1] ;
							num_vare  = All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5;
							
							p1_up   = Store_ogcn[pair_ogcn_count,1];
	                        p1_low  = Store_ogcn[pair_ogcn_count,1+num_tote+1];
	                        p_diff  = p1_up - p1_low;							
							if(p_diff > upper_limit);
								p3_dd_temp = (1/p_diff) *(Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d - Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d);
							    p3_dd = p3_dd + p3_dd_temp;
							endif;
				            
							 clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
						     clear rho_low_g3_d,rho_up_g3_d;
						 endfor;
					 endfor;
				 else;
					 p3_dd = 0 ;
				 endif;
		 
		         gg = p2_dd + p3_dd ;
				 gg_temp = gg_temp | gg;
				   
				 clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
          Theta_gradient = Theta_gradient ~ gg_temp;   
         clear Count_Threshold_d;
	 endif;
endfor; 
retp(Theta_gradient);
endp;


proc(1) = User_Hess(dta,parm);
	    local Alpha_coeff,Chol_Alpha_corr,delta_coeff,d_matrix_coeff,Chol_Psi_matrix,Beta_coeff,Lambda_coeff,Chol_Lamda,upper_threshold_K,upper_threshold_K1,upper_threshold,upper_threshold_decider;
		local Theta_coeff,Phi_coeff1,Phi_coeff_K1,Phi_coeff,delta,dd_delta,i,j,Alpha_corr,count,Psi_matrix,temp_num1,temp_num2,curr_mat,HCap,iparm,jparm;
		local ialpha,alphad,AlphaWd,zd,zsd,Z_matd,temp1_hess,temp2_hess,temp3_hess,temp4_hess,temp5_hess,temp6_hess;
		local ia_corr,d_chol_alpha_corr1,Alpha_corrd,Alpha_matd,idel,delta_d,Gamma_X_d,y2_d,Lambda_count_d,dgam_smallC,dgam_term1,iobs,jcount,countObs,smallCObs,dthet_term2,dthet_threshUpper,dthet_threshLower,dgam_term2,dgam_threshUpper,dgam_threshLower;
		local threshUpper,threshLower,term2,phiUpper,phiLower,idmat,d_matrix_coeff_d,D_matrix_d1,zs,C_Arrow_d,ipsi,d_chol_psi,Psidd,Psi_matrix_big_dd,ME_Error_Mat_d,ibeta,betad,Beta_coeff_expand_d;
		local Xbetad,i1,ilambda,d_lambda,GP_Global_d,Phi_All,Phi_mat,k,temp_arr,Gamma_Phi_d,ZGPD,temp_store,Lambda_mat_d,ilamda,d_chol_lamda,Lamdad,Lamda_dd,iupper_th,upper_threshold_d;
		local upper_threshold_K1_d,itheta,dthet_smallC,dthet_term1,iphi,Phi_d,Phi_K1_d,xPhiMat_d,del_required,delta_bar_d,d_sq1,S_mat_d,row_add,Gamma_Phi,ZGP,Y_pair2d1,mean_final,mean_final_d1,mean_final_d2,mean_final_d;
		local Alpha_mat_d,Z_mat_d,Total_g,Lambda_mat1,Lambda_mat2,LambdaZd,Lambda_matdF,Lambda_mat1d,Lambda_mat2d,D_matrixF,Psi_matrix_bigF,LamdaF;
		
	     Alpha_coeff         = parm[1:nvarml];
		 Chol_Alpha_corr     = xpnd(parm[nvarml+1:nvarml+nCholOmega]);
		 delta_coeff         = parm[nvarml+nCholOmega+1:nvarml+nCholOmega+nvarmC];
		 d_matrix_coeff      = parm[nvarml+nCholOmega+nvarmC+1:nvarml+nCholOmega+nvarmC+ME_Element];
		 
		 Chol_Psi_matrix     = parm[nvarml+nCholOmega+nvarmC+ME_Element+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear];
		 
	   
		 Beta_coeff          = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma];
		 Lambda_coeff        = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat];
		 
		 if(Num_MNP > 0);
			 Chol_Lamda      = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr];
		 endif;
		
		 if(nvar_mear_ordl > 0);
			  upper_threshold_K    = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req];
			  upper_threshold_K1   = zeros(nvar_mear_ordl,Highest_scale);
				for i(1,nvar_mear_ordl,1);
					if(num_ordl_cat_req1[i]>0);
						if(i==1);
						   upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[1:num_ordl_cat_req_csum[i]])';
						else;
						   upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
						endif;
				    endif;
				endfor;
		
				upper_threshold      =  upper_threshold_K1;
				for i(1,nvar_mear_ordl,1);
					if(num_ordl_cat_req1[i] < Highest_scale);
					  upper_threshold[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity*ones(1,Highest_scale-num_ordl_cat_req1[i]);
					endif;
				endfor;
			  upper_threshold_decider = negative_infinity*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold ~ positive_infinity*ones(nvar_mear_ordl,1); 
		 endif;
		
		 if(nvar_mear_count > 0); 
			Phi_coeff1      = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi];
			Phi_coeff_K1    = zeros(nvar_mear_count,Highest_Phi);
			for i(1,nvar_mear_count,1);
				if(i==1);
				   Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[1:num_Phi_csum[i]])';
				else;
				   Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
				endif;
			endfor;
		
			Phi_coeff      =  Phi_coeff_K1;
			for i(1,nvar_mear_count,1);
				if(Num_Phi[i] < Highest_Phi);
				   Phi_coeff[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
				endif;
			endfor;
		 Theta_coeff	    = parm[nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+1:nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+nvar_mear_count];
		endif;
		
		 Alpha_corr = Chol_Alpha_corr;
	
	
		 D_matrix   = zeros(nvar_mear,nvar_latent);
		 count = 0;
		 for i(1,nvar_mear,1);
			for j(1,nvar_latent,1);
				if(ME_Matrix[i,j]==1);
					count = count + 1;
					D_matrix[i,j] = d_matrix_coeff[count];
				endif;
				
			endfor;
		 endfor;
		 D_matrixF = D_matrix;
		 
		 Psi_matrix = Chol_Psi_matrix;
		 Psi_matrix_big = eye(nvar_mear);
		 Psi_matrix_big = diagrv(Psi_matrix_big,Psi_matrix);
	     Psi_matrix_bigF = Psi_matrix_big;
		
	     Lamda      = zeros(Alternative_all,Alternative_all);
		 if(Num_MNP > 0);
		 for i(1,Num_MNP,1);
			
			if(i == 1);
			 temp_num1 = 1;
			 temp_num2 = nCholerr_csum[i,1];
			else;
			 temp_num1 = nCholerr_csum[i-1,1] + 1;
			 temp_num2 = nCholerr_csum[i,1];
			endif;
			
			curr_mat = xpnd(Chol_Lamda[temp_num1:temp_num2]);
			
			if(i == 1);
			   Lamda[2:Nominal_csum[i],2:Nominal_csum[i]] = curr_mat;
			else;
			   Lamda[Nominal_csum[i-1,1]+2:Nominal_csum[i],Nominal_csum[i-1,1]+2:Nominal_csum[i]] = curr_mat;  
			endif;
		 endfor;
		 endif;
		
		 if(num_nominal > Num_MNP);
		  if(Num_MNP > 0);
				for i(Num_MNP+1,num_nominal,1);
					Lamda[Nominal_csum[Num_MNP]+2*(i-Num_MNP),Nominal_csum[Num_MNP]+2*(i-Num_MNP)] = 1;
				endfor;
		  else;
			   for i(Num_MNP+1,num_nominal,1);
					if(i == 1);
					  Lamda[2,2] = 1;
					else;
					  Lamda[Nominal_csum[i-1]+2,Nominal_csum[i-1]+2] = 1;
					endif;
				endfor;
		  endif;
		 endif;
	     LamdaF = Lamda;
		 
	     HCap = zeros(rows(_max_active),rows(_max_active));
		 
		 for iparm(1,rows(_max_active),1);
		 
			 if(_max_active[iparm] ne 0);
							 
					 if(iparm <= nvarml);
						   ialpha = iparm;
						   alphad = zeros(nvarml,1); alphad[ialpha] = 1;
						   AlphaWd = (ones(nvar_latent,1) .*. alphad  )*~(dta[.,ivgenvl])';
						   zd = {}; j = 1;
							
						   do until j > nvar_latent;
							   zd = zd~(sumc(AlphaWd[(j-1)*nvarml+1:(j*nvarml),.]));                // Z stores the latent variables value for each observation. nobs X nvar_latent. 1st col has z1, 2nd z2 and so on for all observations.
							   j = j+1;
						   endo;
						   clear AlphaWd;
						   zsd    = zd;
						   							
							yd1 = {}; j = 1;
							
							do until j > nobs;
							   yd1 = yd1| (D_matrix * zsd[j,.]' )'  ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
							   j = j+1;
							endo;

							Utilityd1 = {}; j = 1;
   
							do until j > nobs;
							   Utilityd1 = Utilityd1|(GP_Global[(j-1)*Alternative_all+1:(j-1)*Alternative_all+Alternative_all,.] * zsd[j,.]' )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
							   j = j+1;
							endo;
							clear zsd;
							
							Alpha_matd1        =  zeros(nvar_latent,nvar_latent);
							D_matrixFd1        =  zeros(nvar_mear,nvar_latent);
							GP_Global_Fd1      =  zeros(nobs*Alternative_all,nvar_latent);
							Psi_matrix_bigFd1  =  zeros(nvar_mear,nvar_mear);
							LamdaFd1           =  zeros(Alternative_all,Alternative_all);					
							if(nvar_mear_count > 0);
							  Count_Threshold_d1 = zeros(nobs,nvar_mear_count*2);
							endif;
							if(nvar_mear_ordl > 0);
								lower_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
								upper_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
							endif;
					  elseif(iparm > nvarml and iparm <= (nvarml+nCholOmega));
							ia_corr   = iparm - nvarml;
							d_chol_alpha_corr1 = zeros(nCholOmega,1);    
							d_chol_alpha_corr1[ia_corr]=1;                         
							Alpha_corrd   = xpnd(d_chol_alpha_corr1);
							Alpha_matd1   = Alpha_corrd;
							clear Alpha_corrd;
							
							yd1       = zeros(nobs,nvar_mear);
							Utilityd1 = zeros(nobs,Alternative_all);
							
							D_matrixFd1        =  zeros(nvar_mear,nvar_latent);
							GP_Global_Fd1      =  zeros(nobs*Alternative_all,nvar_latent);
							Psi_matrix_bigFd1  =  zeros(nvar_mear,nvar_mear);
							LamdaFd1           =  zeros(Alternative_all,Alternative_all);
							
							if(nvar_mear_count > 0);
							  Count_Threshold_d1 = zeros(nobs,nvar_mear_count*2);
							endif;
							if(nvar_mear_ordl > 0);
								lower_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
								upper_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
							endif;
					  elseif(iparm > (nvarml+nCholOmega) and iparm <= (nvarml+nCholOmega+nvarmC));
								idel    = iparm - nvarml - nCholOmega ;
								delta_d = zeros(nvarmC,1);
								delta_d[idel] = 1;
								
								Gamma_X_d = (ones(nvar_mear,1) .*. delta_d  )*~(dta[.,ivgenvC])';
								y2_d = {}; j = 1;
								
								do until j > nvar_mear;
								   y2_d = y2_d~(sumc(Gamma_X_d[(j-1)*nvarmC+1:(j*nvarmC),.]));           // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
								   j = j+1;
								endo;
								clear Gamma_X_d;
								yd1 = {};
								if(nvar_mear_count > 0);
									yd1 =  yd1 ~ y2_d[.,1:(nvar_mear_cont+nvar_mear_ordl)] ~ zeros(nobs,nvar_mear_count);
									Lambda_count_d = Lambda_count .* y2_d[.,nvar_mear_cont+nvar_mear_ordl+1:nvar_mear] ;
									
									dgam_smallC = Lambda_count_d ./ (Lambda_count + Theta_coeff') + - Lambda_count ./ (Lambda_count + Theta_coeff')^2 .* Lambda_count_d;	
									dgam_term1  = ( Theta_coeff'.* ( (1-smallC)^(Theta_coeff'-1) ./ gamma(Theta_coeff') ) ) .* (-dgam_smallC);
									
									Count_Threshold_d1 = zeros(nobs,nvar_mear_count*2);
									for iobs(1,nobs,1);
										for jcount(1,nvar_mear_count,1);
											countObs = dta[iobs,Count_Index[1,jcount]];
											smallCObs = smallC[iobs,jcount];
																						
											term2 = 0;
											dthet_term2 = 0;
											dgam_term2 = 0;
											
											for icnt (0,countObs,1);
												term2 = term2 + (gamma(Theta_coeff[jcount,1] + iCnt)/(iCnt!) * smallCObs^iCnt);
												dgam_term2  = dgam_term2 + ( ( gamma(Theta_coeff[jcount,1] + iCnt)/(iCnt!) * (iCnt)*smallCObs^(iCnt-1) ) * dgam_smallC[iobs,jcount]);
											endfor;
											
											threshUpper = term1[iobs,jcount] * term2;
											dgam_threshUpper  = dgam_term1[iobs,jcount] * term2  +  term1[iobs,jcount] * dgam_term2;
											
											if(countObs gt 0);  
												term2 = term2 - (gamma(Theta_coeff[jcount,1] + countObs)/(countObs!) * smallCObs^countObs);
												dgam_term2 = dgam_term2 - (gamma(Theta_coeff[jcount,1] + countObs)/(countObs!) * countObs*smallCObs^(countObs-1) *dgam_smallC[iobs,jcount]);
												threshLower = term1[iobs,jcount] * term2;
												phiUpper = (xPhiMat[jcount,countObs+1])';
												phiLower = (xPhiMat[jcount,countObs])';
												dgam_threshLower  = dgam_term1[iobs,jcount] * term2  +  term1[iobs,jcount] * dgam_term2;
											else; 
												threshLower = 0;
												dgam_threshLower = 0;
												phiUpper = 0;
												phiLower = 0;
											endif;

											threshUpper = minc( threshUpper|0.99999999999999999);
											threshLower = minc( threshLower|0.99999999999999999);
										
											dgam_threshUpper = 1/pdfn(cdfni(threshUpper ))*dgam_threshUpper;
											dgam_threshLower = 1/pdfn(cdfni(threshLower))*dgam_threshLower;
													   
											Count_Threshold_d1[iobs,jcount] = dgam_threshLower;
											Count_Threshold_d1[iobs,nvar_mear_count+jcount] = dgam_threshUpper;
										endfor;
									endfor;
								    clear Lambda_count_d,dgam_smallC,dgam_term1;
								else;
									yd1 =  yd1 ~ y2_d;
								endif;
								
								Utilityd1          = zeros(nobs,Alternative_all);
								Alpha_matd1        =  zeros(nvar_latent,nvar_latent);
								D_matrixFd1        =  zeros(nvar_mear,nvar_latent);
								GP_Global_Fd1      =  zeros(nobs*Alternative_all,nvar_latent);
								Psi_matrix_bigFd1  =  zeros(nvar_mear,nvar_mear);
								LamdaFd1           =  zeros(Alternative_all,Alternative_all);
								if(nvar_mear_ordl > 0);
									lower_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
									upper_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
								endif;
					  elseif(iparm > (nvarml+nCholOmega+nvarmC) and iparm <= (nvarml+nCholOmega+nvarmC+ME_Element));
									idmat = iparm - nvarml - nCholOmega - nvarmC ;
									d_matrix_coeff_d = zeros(ME_Element,1);  d_matrix_coeff_d[idmat] = 1; 
									D_matrix_d1   = zeros(nvar_mear,nvar_latent);
									count = 0;
									for i(1,nvar_mear,1);
									for j(1,nvar_latent,1);
										if(ME_Matrix[i,j]==1);
											count = count + 1;
											D_matrix_d1[i,j] = d_matrix_coeff_d[count];
										endif;
									endfor;
									endfor;
									
									yd1 = {}; j = 1;
									zs = Z_mat;	
									do until j > nobs;
									  yd1 = yd1| (D_matrix_d1 * zs[j,.]' )'  ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
									  j = j+1;
									endo;
																			
									clear zs,C_Arrow_d;

									Utilityd1          = zeros(nobs,Alternative_all);
									Alpha_matd1        =  zeros(nvar_latent,nvar_latent);
									D_matrixFd1        =  D_matrix_d1;
									GP_Global_Fd1      =  zeros(nobs*Alternative_all,nvar_latent);
									Psi_matrix_bigFd1  =  zeros(nvar_mear,nvar_mear);
									LamdaFd1           =  zeros(Alternative_all,Alternative_all);
								
									if(nvar_mear_count > 0);
									  Count_Threshold_d1 = zeros(nobs,nvar_mear_count*2);
									endif;
									if(nvar_mear_ordl > 0);
										lower_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
										upper_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
									endif;
					  elseif(iparm > (nvarml+nCholOmega+nvarmC+ME_Element) and iparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear));
									ipsi = iparm - nvarml - nCholOmega - nvarmC - ME_Element ;
									d_chol_psi = zeros(nvar_mear,1);    
									d_chol_psi[ipsi]=1;                         
									Psidd = zeros(nvar_mear,nvar_mear);
									Psidd = diagrv(Psidd,d_chol_psi);
																											
									yd1                = zeros(nobs,nvar_mear);
									Utilityd1          = zeros(nobs,Alternative_all);
									Alpha_matd1        =  zeros(nvar_latent,nvar_latent);
									D_matrixFd1        =  zeros(nvar_mear,nvar_latent);
									GP_Global_Fd1      =  zeros(nobs*Alternative_all,nvar_latent);
									Psi_matrix_bigFd1  =  Psidd;
									LamdaFd1           =  zeros(Alternative_all,Alternative_all);
									
									if(nvar_mear_count > 0);
									  Count_Threshold_d1 = zeros(nobs,nvar_mear_count*2);
									endif;
									if(nvar_mear_ordl > 0);
										lower_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
										upper_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
									endif;
					  elseif(iparm > (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear) and iparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma));
									ibeta = iparm - nvarml - nCholOmega - nvarmC - ME_Element - nvar_mear;
									betad = zeros(nvarma,1);  betad[ibeta] = 1;
				
									Beta_coeff_expand_d = {};
									   for j(1,num_nominal,1);
											 if(j == 1);
												Beta_coeff_expand_d = Beta_coeff_expand_d | (ones(All_Nominal[1,j],1) .*. betad[1:nvarma_csum[j]]);
											else;
												Beta_coeff_expand_d = Beta_coeff_expand_d | (ones(All_Nominal[1,j],1) .*. betad[nvarma_csum[j-1]+1:nvarma_csum[j]]);
											endif;
									   endfor;
										
									   
									   Xbetad = (Beta_coeff_expand_d)*~(dta[.,ivgenva])';
									   
									   Utilityd1 = {};
									   for i1(1,num_nominal,1);
											j = 1;
											
											if(i1 == 1);
												row_add = 0;
											else;
												row_add = sumr(All_Nominal[1,1:i1-1] .* nvarma_all[1,1:i1-1]);
											endif;
								
											do until j > All_Nominal[1,i1];
											   Utilityd1 = Utilityd1~(sumc(Xbetad[row_add+(j-1)*nvarma_all[1,i1]+1:row_add+(j*nvarma_all[1,i1]),.]));
											   j = j+1;
											endo;
									   endfor;
									   
										yd1                =  zeros(nobs,nvar_mear);
										Alpha_matd1        =  zeros(nvar_latent,nvar_latent);
										D_matrixFd1        =  zeros(nvar_mear,nvar_latent);
										GP_Global_Fd1      =  zeros(nobs*Alternative_all,nvar_latent);
										Psi_matrix_bigFd1  =  zeros(nvar_mear,nvar_mear);
										LamdaFd1           =  zeros(Alternative_all,Alternative_all);	
										if(nvar_mear_count > 0);
										  Count_Threshold_d1 = zeros(nobs,nvar_mear_count*2);
										endif;
										if(nvar_mear_ordl > 0);
											lower_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
											upper_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
										endif;
					  elseif(iparm > (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma) and iparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat));
										ilambda = iparm - nvarml - nCholOmega - nvarmC - ME_Element - nvar_mear - nvarma;
										d_lambda = zeros(TN_mat,1);   d_lambda[ilambda] = 1; zs = Z_mat;
						                LambdaZd = {}; GP_Global_Fd1 = {}; j = 1;
										do until j > nobs;
											   Phi_All = Main_data[j,ivgephi];
											   Phi_mat = {};
											   
											   for k(1,rows(N_mat),1);
												 if(k==1);
													 temp_arr = Phi_All[1,1:N_mat_csum[k]*nvar_latent];
												 else;
													 temp_arr = Phi_All[1,N_mat_csum[k-1]*nvar_latent+1:N_mat_csum[k]*nvar_latent];
												 endif;
													 
												 temp_arr = reshape(temp_arr,N_mat[k],nvar_latent);
												 Phi_mat  = Phi_mat | temp_arr;
												 clear temp_arr;
											   endfor;
											   
											   Gamma_Phi_d = d_lambda .* Phi_mat;
											   ZGPD       = Gamma_Phi_d * (zs[j,.])' ;
											   
											   temp_store = {};		   
											   for k(1,Alternative_all,1);
												   if(k == 1);
													  GP_Global_Fd1   = GP_Global_Fd1  | (sumc(Gamma_Phi_d[1:N_mat_csum[k],.]))';
													  temp_store  = temp_store ~ (sumc(ZGPD[1:N_mat_csum[k],.]));
												   else;
													  GP_Global_Fd1   = GP_Global_Fd1 | (sumc(Gamma_Phi_d[N_mat_csum[k-1]+1:N_mat_csum[k],.]))';
													  temp_store  = temp_store ~ (sumc(ZGPD[N_mat_csum[k-1]+1:N_mat_csum[k],.]));
												   endif;
											   endfor;
												LambdaZd = LambdaZd | temp_store;
													
											j = j+1;
										endo;
												  
										Utilityd1 = LambdaZd;
										clear LambdaZd,zs;
										
										Alpha_matd1        =  zeros(nvar_latent,nvar_latent);
										D_matrixFd1        =  zeros(nvar_mear,nvar_latent);
										Psi_matrix_bigFd1  =  zeros(nvar_mear,nvar_mear);
										LamdaFd1           =  zeros(Alternative_all,Alternative_all);	
																				  
										yd1 = zeros(nobs,nvar_mear);
										if(nvar_mear_count > 0);
										  Count_Threshold_d1 = zeros(nobs,nvar_mear_count*2);
										endif;
										if(nvar_mear_ordl > 0);
											lower_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
											upper_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
										endif;
					  elseif(iparm > (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat) and iparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr));
										ilamda = iparm - nvarml - nCholOmega - nvarmC - ME_Element - nvar_mear - nvarma - TN_mat;
										d_chol_lamda = zeros(All_nCholerr,1);    d_chol_lamda[ilamda]=1;       
										Lamdad      = zeros(Alternative_all,Alternative_all);
										for i(1,Num_MNP,1);
									
											if(i == 1);
											 temp_num1 = 1;
											 temp_num2 = nCholerr_csum[i,1];
											else;
											 temp_num1 = nCholerr_csum[i-1,1] + 1;
											 temp_num2 = nCholerr_csum[i,1];
											endif;
											
											curr_mat = xpnd(d_chol_lamda[temp_num1:temp_num2]);
															
											if(i == 1);
											   Lamdad[2:Nominal_csum[i],2:Nominal_csum[i]] = curr_mat ;
											else;
											   Lamdad[Nominal_csum[i-1,1]+2:Nominal_csum[i],Nominal_csum[i-1,1]+2:Nominal_csum[i]] = curr_mat ;  
											endif;
										endfor;
												     			                
										yd1                =  zeros(nobs,nvar_mear);
										Utilityd1          =  zeros(nobs,Alternative_all); 
										
										Alpha_matd1        =  zeros(nvar_latent,nvar_latent);
										D_matrixFd1        =  zeros(nvar_mear,nvar_latent);
										GP_Global_Fd1      =  zeros(nobs*Alternative_all,nvar_latent);
										Psi_matrix_bigFd1  =  zeros(nvar_mear,nvar_mear);
										LamdaFd1           =  Lamdad;
										
										if(nvar_mear_count > 0);
										  Count_Threshold_d1 = zeros(nobs,nvar_mear_count*2);
										endif;
										if(nvar_mear_ordl > 0);
											lower_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
											upper_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
										endif;
					  elseif(iparm > (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr) and iparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req) and nvar_mear_ordl > 0);
										  yd1       = zeros(nobs,nvar_mear);
										  Utilityd1 = zeros(nobs,Alternative_all); 
										  
										  iupper_th = iparm - nvarml - nCholOmega - nvarmC - ME_Element - nvar_mear - nvarma - TN_mat - All_nCholerr ;
										  upper_threshold_d = zeros(num_ordl_cat_req,1);
										  upper_threshold_d[iupper_th] = 1;
										  
										  upper_threshold_K1_d   = zeros(nvar_mear_ordl,Highest_scale);
											for i(1,nvar_mear_ordl,1);
												if(num_ordl_cat_req1[i]>0);
													if(i==1);
													 upper_threshold_K1_d[i,1:num_ordl_cat_req1[i]] = (upper_threshold_d[1:num_ordl_cat_req_csum[i]])';
													else;
													 upper_threshold_K1_d[i,1:num_ordl_cat_req1[i]] = (upper_threshold_d[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
													endif;
											    endif;
											endfor;
									
											upper_threshold_d = upper_threshold_K1_d;
											for i(1,nvar_mear_ordl,1);
												if(num_ordl_cat_req1[i] < Highest_scale);
												 upper_threshold_d[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity_d*ones(1,Highest_scale-num_ordl_cat_req1[i]);
												endif;
											endfor;
										  
										  
										  upper_threshold_d = negative_infinity_d*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold_d ~ positive_infinity_d*ones(nvar_mear_ordl,1); 
										  
										  lower_threshold_matrix_d1 = zeros(nind,nvar_mear_ordl);
										  upper_threshold_matrix_d1 = zeros(nind,nvar_mear_ordl);
									
											for i(1,nobs,1);
												for j(1,nvar_mear_ordl,1);
													for k(1,num_ordl_cat[j],1);
														if(dta[i,Ordinal_Index[j]] == k);
															lower_threshold_matrix_d1[i,j] = upper_threshold_d[j,k];
															upper_threshold_matrix_d1[i,j] = upper_threshold_d[j,k+1];
														endif;
													endfor;
											   endfor;
										   endfor;
										   
										   Alpha_matd1        =  zeros(nvar_latent,nvar_latent);
										   D_matrixFd1        =  zeros(nvar_mear,nvar_latent);
										   GP_Global_Fd1      =  zeros(nobs*Alternative_all,nvar_latent);
										   Psi_matrix_bigFd1  =  zeros(nvar_mear,nvar_mear);
										   LamdaFd1           =  zeros(Alternative_all,Alternative_all);	
								
											if(nvar_mear_count > 0);
											  Count_Threshold_d1 = zeros(nobs,nvar_mear_count*2);
											endif;
											
					  elseif(iparm > (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req) and iparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi) and nvar_mear_count > 0);
							                iphi = iparm - nvarml - nCholOmega - nvarmC - ME_Element - nvar_mear - nvarma - TN_mat - All_nCholerr - num_ordl_cat_req ;
											yd1 =  zeros(nobs,nvar_mear);
											Utilityd1 = zeros(nobs,Alternative_all);
											
											Phi_d = zeros(Total_Phi,1);
											Phi_d[iphi] = 1;
											
											Phi_K1_d  = zeros(nvar_mear_count,Highest_Phi);
											for i(1,nvar_mear_count,1);
												if(i==1);
												   Phi_K1_d[i,1:Num_Phi[i]] = (Phi_d[1:num_Phi_csum[i]])';
												else;
												   Phi_K1_d[i,1:Num_Phi[i]] = (Phi_d[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
												endif;
											endfor;
											
											Phi_d  = Phi_K1_d;
											
											for i(1,nvar_mear_count,1);
												if(Num_Phi[i] < Highest_Phi);
												   Phi_d[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
												endif;
											endfor;
											
											xPhiMat_d = zeros(nvar_mear_count,threshCountMax+1);
											for iCnt (1,nvar_mear_count,1);
												xPhiMat_d[iCnt,2:1+Num_Phi[iCnt]] = Phi_d[iCnt,1:Num_Phi[iCnt]];
											endfor;
											
											for iCnt (1,nvar_mear_count,1);
											   xPhiMat_d[iCnt,Num_Phi[iCnt]+2:threshCountMax+1] = Phi_d[iCnt,Num_Phi[iCnt]] .*. ones(1,threshCountMax+1-Num_Phi[iCnt]-1);
											endfor;
											
											Count_Threshold_d1 = zeros(nobs,nvar_mear_count*2);
											for iobs(1,nobs,1);
												for jcount(1,nvar_mear_count,1);
													countObs = dta[iobs,Count_Index[jcount]];
													if(countObs gt 0); 
														phiUpper = (xPhiMat_d[jcount,countObs+1])';
														phiLower = (xPhiMat_d[jcount,countObs])';
													else; 
														phiUpper = 0; 
														phiLower = 0; 
													endif;	
											
													Count_Threshold_d1[iobs,jcount] = phiLower;
													Count_Threshold_d1[iobs,nvar_mear_count+jcount] = phiUpper;
												endfor;
											endfor;
											
											Alpha_matd1        =  zeros(nvar_latent,nvar_latent);
										    D_matrixFd1        =  zeros(nvar_mear,nvar_latent);
										    GP_Global_Fd1      =  zeros(nobs*Alternative_all,nvar_latent);
										    Psi_matrix_bigFd1  =  zeros(nvar_mear,nvar_mear);
										    LamdaFd1           =  zeros(Alternative_all,Alternative_all);	
											if(nvar_mear_ordl > 0);
												lower_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
												upper_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
											endif;				
                          
					  elseif(iparm > (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi) and iparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+nvar_mear_count) and nvar_mear_count > 0);
									        itheta = iparm - nvarml - nCholOmega - nvarmC - ME_Element - nvar_mear - nvarma - TN_mat - All_nCholerr - num_ordl_cat_req - Total_Phi;
											
											yd1 =  zeros(nobs,nvar_mear);
											Utilityd1 = zeros(nobs,Alternative_all);
											
											 
											dthet_smallC = -1*smallC[.,itheta] ./ (Lambda_count[.,itheta]+ Theta_coeff[itheta,1]);
											dthet_term1 = term1[.,itheta] .* ((ln(1-smallC[.,itheta])) + (Theta_coeff[itheta,1] *(-dthet_smallC) ./ (1-smallC[.,itheta])) ) - (1-smallC[.,itheta])^(Theta_coeff[itheta,1]) ./ gamma(Theta_coeff[itheta,1])^2 * digamma(Theta_coeff[itheta,1]) *gamma(Theta_coeff[itheta,1]); 
										   
											Count_Threshold_d1 = zeros(nobs,nvar_mear_count*2);
											for iobs(1,nobs,1);
												countObs = dta[iobs,Count_Index[1,itheta]];
												smallCObs = smallC[iobs,itheta];
												term2 = 0;
												dthet_term2 = 0;
												
												
												for icnt (0,countObs,1);
													term2 = term2 + (gamma(Theta_coeff[itheta,1] + iCnt)/(iCnt!) * smallCObs^iCnt);
													dthet_term2 = dthet_term2  + (digamma(Theta_coeff[itheta,1] + iCnt) *gamma(Theta_coeff[itheta,1] + iCnt)/(iCnt!) * smallCObs^iCnt) + (gamma(Theta_coeff[itheta,1] + iCnt)/(iCnt!) * (iCnt*smallCObs^(iCnt-1) *dthet_smallC[iobs,.]) );
													
												endfor;
												
												threshUpper = term1[iobs,itheta] * term2;
												dthet_threshUpper = dthet_term1[iobs,.] * term2 + term1[iobs,itheta] * dthet_term2;
												
												if(countObs gt 0);  
													term2 = term2 - (gamma(Theta_coeff[itheta,1] + countObs)/(countObs!) * smallCObs^countObs);
													dthet_term2 = dthet_term2 - (digamma(Theta_coeff[itheta,1] + countObs) *gamma(Theta_coeff[itheta,1] + countObs)/(countObs!) * smallCObs^countObs) - (gamma(Theta_coeff[itheta,1] + countObs)/(countObs!) * (countObs *smallCObs^(countObs-1) *dthet_smallC[iobs,.]) );
													
													threshLower = term1[iobs,itheta] * term2;
													phiUpper = (xPhiMat[itheta,countObs+1])';
													phiLower = (xPhiMat[itheta,countObs])';
													dthet_threshLower = dthet_term1[iobs,.] * term2 + term1[iobs,itheta] * dthet_term2;
												else; 
													threshLower = 0;
													dthet_threshLower = 0;
													phiUpper = 0;
													phiLower = 0;
												endif;

												threshUpper = minc( threshUpper|0.99999999999999999);
												threshLower = minc( threshLower|0.99999999999999999);
												
												dthet_threshUpper = 1/pdfn(cdfni(threshUpper )) *dthet_threshUpper;
												dthet_threshLower = 1/pdfn(cdfni(threshLower)) *dthet_threshLower;
														   
												Count_Threshold_d1[iobs,itheta] = dthet_threshLower;
												Count_Threshold_d1[iobs,nvar_mear_count+itheta] = dthet_threshUpper;
											endfor;
											clear dthet_smallC,dthet_term1;
											
											Alpha_matd1        =  zeros(nvar_latent,nvar_latent);
										    D_matrixFd1        =  zeros(nvar_mear,nvar_latent);
										    GP_Global_Fd1      =  zeros(nobs*Alternative_all,nvar_latent);
										    Psi_matrix_bigFd1  =  zeros(nvar_mear,nvar_mear);
										    LamdaFd1           =  zeros(Alternative_all,Alternative_all);	
											if(nvar_mear_ordl > 0);
												lower_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
												upper_threshold_matrix_d1 = zeros(nobs,nvar_mear_ordl);
											endif;		
					  endif;
								
			          for jparm(iparm,rows(_max_active),1);
							if(_max_active[jparm] ne 0);
												                    
								  if(jparm <= nvarml);
									   ialpha = jparm;
									   alphad = zeros(nvarml,1); alphad[ialpha] = 1;
									   AlphaWd = (ones(nvar_latent,1) .*. alphad  )*~(dta[.,ivgenvl])';
									   zd = {}; j = 1;
										
									   do until j > nvar_latent;
										   zd = zd~(sumc(AlphaWd[(j-1)*nvarml+1:(j*nvarml),.]));                // Z stores the latent variables value for each observation. nobs X nvar_latent. 1st col has z1, 2nd z2 and so on for all observations.
										   j = j+1;
									   endo;
									   clear AlphaWd;
									   zsd    = zd;
									   clear Z_matd;
										
										yd2 = {}; j = 1;
										
										do until j > nobs;
										   yd2 = yd2| (D_matrix * zsd[j,.]' )'  ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
										   j = j+1;
										endo;

										Utilityd2 = {}; j = 1;
   
										do until j > nobs;
										   Utilityd2 = Utilityd2|(GP_Global[(j-1)*Alternative_all+1:(j-1)*Alternative_all+Alternative_all,.] * zsd[j,.]' )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
										   j = j+1;
										endo;
										clear zsd;
										   
										   Alpha_matd2        =  zeros(nvar_latent,nvar_latent);
					                       D_matrixFd2        =  zeros(nvar_mear,nvar_latent);
										   GP_Global_Fd2      =  zeros(nobs*Alternative_all,nvar_latent);
										   Psi_matrix_bigFd2  =  zeros(nvar_mear,nvar_mear);
										   LamdaFd2           =  zeros(Alternative_all,Alternative_all);					
										if(nvar_mear_count > 0);
										  Count_Threshold_d2 = zeros(nobs,nvar_mear_count*2);
										endif;
										if(nvar_mear_ordl > 0);
											lower_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
											upper_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
										endif;
								  elseif(jparm > nvarml and jparm <= (nvarml+nCholOmega));
										ia_corr   = jparm - nvarml;
										d_chol_alpha_corr1 = zeros(nCholOmega,1);    
										d_chol_alpha_corr1[ia_corr]=1;                         
										Alpha_corrd  = xpnd(d_chol_alpha_corr1);
										Alpha_matd2  = Alpha_corrd;
										clear Alpha_corrd;
										
										yd2       = zeros(nobs,nvar_mear);
										Utilityd2 = zeros(nobs,Alternative_all);
										
										D_matrixFd2        =  zeros(nvar_mear,nvar_latent);
										GP_Global_Fd2      =  zeros(nobs*Alternative_all,nvar_latent);
										Psi_matrix_bigFd2  =  zeros(nvar_mear,nvar_mear);
										LamdaFd2           =  zeros(Alternative_all,Alternative_all);
										
										if(nvar_mear_count > 0);
										  Count_Threshold_d2 = zeros(nobs,nvar_mear_count*2);
										endif;
										if(nvar_mear_ordl > 0);
											lower_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
											upper_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
										endif;
								  elseif(jparm > (nvarml+nCholOmega) and jparm <= (nvarml+nCholOmega+nvarmC));
											idel    = jparm - nvarml - nCholOmega ;
											delta_d = zeros(nvarmC,1);
											delta_d[idel] = 1;
											
											Gamma_X_d = (ones(nvar_mear,1) .*. delta_d  )*~(dta[.,ivgenvC])';
											y2_d = {}; j = 1;
											
											do until j > nvar_mear;
											   y2_d = y2_d~(sumc(Gamma_X_d[(j-1)*nvarmC+1:(j*nvarmC),.]));           // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
											   j = j+1;
											endo;
											clear Gamma_X_d;
											
											yd2 = {};
											if(nvar_mear_count > 0);
												yd2 =  yd2 ~ y2_d[.,1:(nvar_mear_cont+nvar_mear_ordl)] ~ zeros(nobs,nvar_mear_count);
												Lambda_count_d = Lambda_count .* y2_d[.,nvar_mear_cont+nvar_mear_ordl+1:nvar_mear] ;
												
												dgam_smallC = Lambda_count_d ./ (Lambda_count + Theta_coeff') + - Lambda_count ./ (Lambda_count + Theta_coeff')^2 .* Lambda_count_d;	
												dgam_term1  = ( Theta_coeff'.* ( (1-smallC)^(Theta_coeff'-1) ./ gamma(Theta_coeff') ) ) .* (-dgam_smallC);
												
												Count_Threshold_d2 = zeros(nobs,nvar_mear_count*2);
												for iobs(1,nobs,1);
													for jcount(1,nvar_mear_count,1);
														countObs = dta[iobs,Count_Index[1,jcount]];
														smallCObs = smallC[iobs,jcount];
																												
														term2 = 0;
														dthet_term2 = 0;
														dgam_term2 = 0;
														
														for icnt (0,countObs,1);
															term2 = term2 + (gamma(Theta_coeff[jcount,1] + iCnt)/(iCnt!) * smallCObs^iCnt);
															dgam_term2  = dgam_term2 + ( ( gamma(Theta_coeff[jcount,1] + iCnt)/(iCnt!) * (iCnt)*smallCObs^(iCnt-1) ) * dgam_smallC[iobs,jcount]);
														endfor;
														
														threshUpper = term1[iobs,jcount] * term2;
														dgam_threshUpper  = dgam_term1[iobs,jcount] * term2  +  term1[iobs,jcount] * dgam_term2;
														
														if(countObs gt 0);  
															term2 = term2 - (gamma(Theta_coeff[jcount,1] + countObs)/(countObs!) * smallCObs^countObs);
															dgam_term2 = dgam_term2 - (gamma(Theta_coeff[jcount,1] + countObs)/(countObs!) * countObs*smallCObs^(countObs-1) *dgam_smallC[iobs,jcount]);
															threshLower = term1[iobs,jcount] * term2;
															phiUpper = (xPhiMat[jcount,countObs+1])';
															phiLower = (xPhiMat[jcount,countObs])';
															dgam_threshLower  = dgam_term1[iobs,jcount] * term2  +  term1[iobs,jcount] * dgam_term2;
														else; 
															threshLower = 0;
															dgam_threshLower = 0;
															phiUpper = 0;
															phiLower = 0;
														endif;

														threshUpper = minc( threshUpper|0.99999999999999999);
														threshLower = minc( threshLower|0.99999999999999999);
													
														dgam_threshUpper = 1/pdfn(cdfni(threshUpper ))*dgam_threshUpper;
														dgam_threshLower = 1/pdfn(cdfni(threshLower))*dgam_threshLower;
																   
														Count_Threshold_d2[iobs,jcount] = dgam_threshLower;
														Count_Threshold_d2[iobs,nvar_mear_count+jcount] = dgam_threshUpper;
													endfor;
												endfor;
												clear Lambda_count_d,dgam_smallC,dgam_term1;
											else;
												yd2 =  yd2 ~ y2_d;
											endif;
											
											Utilityd2          = zeros(nobs,Alternative_all);
											Alpha_matd2        =  zeros(nvar_latent,nvar_latent);
										    D_matrixFd2        =  zeros(nvar_mear,nvar_latent);
											GP_Global_Fd2      =  zeros(nobs*Alternative_all,nvar_latent);
											Psi_matrix_bigFd2  =  zeros(nvar_mear,nvar_mear);
											LamdaFd2           =  zeros(Alternative_all,Alternative_all);
											if(nvar_mear_ordl > 0);
												lower_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
												upper_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
											endif;
								  elseif(jparm > (nvarml+nCholOmega+nvarmC) and jparm <= (nvarml+nCholOmega+nvarmC+ME_Element));
												idmat = jparm - nvarml - nCholOmega - nvarmC ;
												d_matrix_coeff_d = zeros(ME_Element,1);  d_matrix_coeff_d[idmat] = 1; 
												D_matrix_d1   = zeros(nvar_mear,nvar_latent);
												count = 0;
												for i(1,nvar_mear,1);
												for j(1,nvar_latent,1);
													if(ME_Matrix[i,j]==1);
														count = count + 1;
														D_matrix_d1[i,j] = d_matrix_coeff_d[count];
													endif;
												endfor;
												endfor;
												
												yd2 = {}; j = 1;
												zs = Z_mat;	
												do until j > nobs;
												  yd2 = yd2| (D_matrix_d1 * zs[j,.]' )'  ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
												  j = j+1;
												endo;
																									
												Alpha_matd2        =  zeros(nvar_latent,nvar_latent);
											    D_matrixFd2        =  D_matrix_d1;
											    GP_Global_Fd2      =  zeros(nobs*Alternative_all,nvar_latent);
											    Psi_matrix_bigFd2  =  zeros(nvar_mear,nvar_mear);
											    LamdaFd2           =  zeros(Alternative_all,Alternative_all);
												clear zs,C_Arrow_d;

												Utilityd2    = zeros(nobs,Alternative_all);
												if(nvar_mear_count > 0);
												  Count_Threshold_d2 = zeros(nobs,nvar_mear_count*2);
												endif;
												if(nvar_mear_ordl > 0);
													lower_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
													upper_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
												endif;
								  elseif(jparm > (nvarml+nCholOmega+nvarmC+ME_Element) and jparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear));
												ipsi = jparm - nvarml - nCholOmega - nvarmC - ME_Element ;
												d_chol_psi = zeros(nvar_mear,1);    
												d_chol_psi[ipsi]=1;                         
												Psidd = zeros(nvar_mear,nvar_mear);
												Psidd = diagrv(Psidd,d_chol_psi);
																								
												yd2                = zeros(nobs,nvar_mear);
												Utilityd2          = zeros(nobs,Alternative_all);
												
												Alpha_matd2        =  zeros(nvar_latent,nvar_latent);
												D_matrixFd2        =  zeros(nvar_mear,nvar_latent);
												GP_Global_Fd2      =  zeros(nobs*Alternative_all,nvar_latent);
												Psi_matrix_bigFd2  =  Psidd;
												LamdaFd2           =  zeros(Alternative_all,Alternative_all);
												
												if(nvar_mear_count > 0);
												  Count_Threshold_d2 = zeros(nobs,nvar_mear_count*2);
												endif;
												if(nvar_mear_ordl > 0);
													lower_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
													upper_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
												endif;
								  elseif(jparm > (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear) and jparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma));
												ibeta = jparm - nvarml - nCholOmega - nvarmC - ME_Element - nvar_mear;
												betad = zeros(nvarma,1);  betad[ibeta] = 1;
							
												Beta_coeff_expand_d = {};
												   for j(1,num_nominal,1);
														 if(j == 1);
															Beta_coeff_expand_d = Beta_coeff_expand_d | (ones(All_Nominal[1,j],1) .*. betad[1:nvarma_csum[j]]);
														else;
															Beta_coeff_expand_d = Beta_coeff_expand_d | (ones(All_Nominal[1,j],1) .*. betad[nvarma_csum[j-1]+1:nvarma_csum[j]]);
														endif;
												   endfor;
													
												   
												   Xbetad = (Beta_coeff_expand_d)*~(dta[.,ivgenva])';
												   
												   Utilityd2 = {};
												   for i1(1,num_nominal,1);
														j = 1;
														
														if(i1 == 1);
															row_add = 0;
														else;
															row_add = sumr(All_Nominal[1,1:i1-1] .* nvarma_all[1,1:i1-1]);
														endif;
											
														do until j > All_Nominal[1,i1];
														   Utilityd2 = Utilityd2~(sumc(Xbetad[row_add+(j-1)*nvarma_all[1,i1]+1:row_add+(j*nvarma_all[1,i1]),.]));
														   j = j+1;
														endo;
												   endfor;
												   clear Xbetad;
													yd2                = zeros(nobs,nvar_mear);
													Alpha_matd2        =  zeros(nvar_latent,nvar_latent);
													D_matrixFd2        =  zeros(nvar_mear,nvar_latent);
													GP_Global_Fd2      =  zeros(nobs*Alternative_all,nvar_latent);
													Psi_matrix_bigFd2  =  zeros(nvar_mear,nvar_mear);
													LamdaFd2           =  zeros(Alternative_all,Alternative_all);
													if(nvar_mear_count > 0);
													  Count_Threshold_d2 = zeros(nobs,nvar_mear_count*2);
													endif;
													if(nvar_mear_ordl > 0);
														lower_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
														upper_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
													endif;
								  elseif(jparm > (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma) and jparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat));
													ilambda = jparm - nvarml - nCholOmega - nvarmC - ME_Element - nvar_mear - nvarma;
													d_lambda = zeros(TN_mat,1);   d_lambda[ilambda] = 1; zs = Z_mat;
									                												
													LambdaZd = {}; GP_Global_Fd2 = {}; j = 1;
													do until j > nobs;
														   Phi_All = Main_data[j,ivgephi];
														   Phi_mat = {};
														   
														   for k(1,rows(N_mat),1);
															 if(k==1);
																 temp_arr = Phi_All[1,1:N_mat_csum[k]*nvar_latent];
															 else;
																 temp_arr = Phi_All[1,N_mat_csum[k-1]*nvar_latent+1:N_mat_csum[k]*nvar_latent];
															 endif;
																 
															 temp_arr = reshape(temp_arr,N_mat[k],nvar_latent);
															 Phi_mat  = Phi_mat | temp_arr;
															 clear temp_arr;
														   endfor;
														   
														   Gamma_Phi_d = d_lambda .* Phi_mat;
														   ZGPD       = Gamma_Phi_d * (zs[j,.])' ;
														   
														   temp_store = {};		   
														   for k(1,Alternative_all,1);
															   if(k == 1);
																  GP_Global_Fd2   = GP_Global_Fd2  | (sumc(Gamma_Phi_d[1:N_mat_csum[k],.]))';
																  temp_store  = temp_store ~ (sumc(ZGPD[1:N_mat_csum[k],.]));
															   else;
																  GP_Global_Fd2   = GP_Global_Fd2 | (sumc(Gamma_Phi_d[N_mat_csum[k-1]+1:N_mat_csum[k],.]))';
																  temp_store  = temp_store ~ (sumc(ZGPD[N_mat_csum[k-1]+1:N_mat_csum[k],.]));
															   endif;
														   endfor;
															LambdaZd = LambdaZd | temp_store;
																
														j = j+1;
													endo;
															  
													Utilityd2 = LambdaZd;
													clear LambdaZd;
													clear zs;
													  
													yd2                = zeros(nobs,nvar_mear);
													Alpha_matd2        =  zeros(nvar_latent,nvar_latent);
													D_matrixFd2        =  zeros(nvar_mear,nvar_latent);
													Psi_matrix_bigFd2  =  zeros(nvar_mear,nvar_mear);
													LamdaFd2           =  zeros(Alternative_all,Alternative_all);		
													if(nvar_mear_count > 0);
													  Count_Threshold_d2 = zeros(nobs,nvar_mear_count*2);
													endif;
													if(nvar_mear_ordl > 0);
														lower_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
														upper_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
													endif;
								  elseif(jparm > (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat) and jparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr));
													ilamda = jparm - nvarml - nCholOmega - nvarmC - ME_Element - nvar_mear - nvarma - TN_mat;
													d_chol_lamda = zeros(All_nCholerr,1);    d_chol_lamda[ilamda]=1;       
													Lamdad      = zeros(Alternative_all,Alternative_all);
													for i(1,Num_MNP,1);
												
														if(i == 1);
														 temp_num1 = 1;
														 temp_num2 = nCholerr_csum[i,1];
														else;
														 temp_num1 = nCholerr_csum[i-1,1] + 1;
														 temp_num2 = nCholerr_csum[i,1];
														endif;
														
														curr_mat = xpnd(d_chol_lamda[temp_num1:temp_num2]);
																		
														if(i == 1);
														   Lamdad[2:Nominal_csum[i],2:Nominal_csum[i]] = curr_mat ;
														else;
														   Lamdad[Nominal_csum[i-1,1]+2:Nominal_csum[i],Nominal_csum[i-1,1]+2:Nominal_csum[i]] = curr_mat ;  
														endif;
													endfor;
													
													yd2                = zeros(nobs,nvar_mear);
													Utilityd2          = zeros(nobs,Alternative_all); 
													Alpha_matd2        =  zeros(nvar_latent,nvar_latent);
													D_matrixFd2        =  zeros(nvar_mear,nvar_latent);
													GP_Global_Fd2      =  zeros(nobs*Alternative_all,nvar_latent);
													Psi_matrix_bigFd2  =  zeros(nvar_mear,nvar_mear);
													LamdaFd2           =  Lamdad;
													if(nvar_mear_count > 0);
													  Count_Threshold_d2 = zeros(nobs,nvar_mear_count*2);
													endif;
													if(nvar_mear_ordl > 0);
														lower_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
														upper_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
													endif;
								  elseif(jparm > (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr) and jparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req) and nvar_mear_ordl > 0);
													  yd2 = zeros(nobs,nvar_mear);
													  Utilityd2 = zeros(nobs,Alternative_all); 
													  
													  
													  iupper_th = jparm - nvarml - nCholOmega - nvarmC - ME_Element - nvar_mear - nvarma - TN_mat - All_nCholerr ;
													  upper_threshold_d = zeros(num_ordl_cat_req,1);
													  upper_threshold_d[iupper_th] = 1;
													  
													  upper_threshold_K1_d   = zeros(nvar_mear_ordl,Highest_scale);
														for i(1,nvar_mear_ordl,1);
															if(num_ordl_cat_req1[i]>0);
																if(i==1);
																 upper_threshold_K1_d[i,1:num_ordl_cat_req1[i]] = (upper_threshold_d[1:num_ordl_cat_req_csum[i]])';
																else;
																 upper_threshold_K1_d[i,1:num_ordl_cat_req1[i]] = (upper_threshold_d[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
																endif;
														     endif;
														endfor;
												
														upper_threshold_d = upper_threshold_K1_d;
														for i(1,nvar_mear_ordl,1);
															if(num_ordl_cat_req1[i] < Highest_scale);
															 upper_threshold_d[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity_d*ones(1,Highest_scale-num_ordl_cat_req1[i]);
															endif;
														endfor;
													  
													  
													  upper_threshold_d = negative_infinity_d*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold_d ~ positive_infinity_d*ones(nvar_mear_ordl,1); 
													  
													  lower_threshold_matrix_d2 = zeros(nind,nvar_mear_ordl);
													  upper_threshold_matrix_d2 = zeros(nind,nvar_mear_ordl);
												
														for i(1,nobs,1);
															for j(1,nvar_mear_ordl,1);
																for k(1,num_ordl_cat[j],1);
																	if(dta[i,Ordinal_Index[j]] == k);
																		lower_threshold_matrix_d2[i,j] = upper_threshold_d[j,k];
																		upper_threshold_matrix_d2[i,j] = upper_threshold_d[j,k+1];
																	endif;
																endfor;
														   endfor;
													   endfor;
													   Alpha_matd2        =  zeros(nvar_latent,nvar_latent);
													   D_matrixFd2        =  zeros(nvar_mear,nvar_latent);
													   GP_Global_Fd2      =  zeros(nobs*Alternative_all,nvar_latent);
													   Psi_matrix_bigFd2  =  zeros(nvar_mear,nvar_mear);
													   LamdaFd2           =  zeros(Alternative_all,Alternative_all);
														
														if(nvar_mear_count > 0);
														  Count_Threshold_d2 = zeros(nobs,nvar_mear_count*2);
														endif;
														
								  elseif(jparm > (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req) and jparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi) and nvar_mear_count > 0);
														iphi = jparm - nvarml - nCholOmega - nvarmC - ME_Element - nvar_mear - nvarma - TN_mat - All_nCholerr - num_ordl_cat_req ;
														yd2 =  zeros(nobs,nvar_mear);
														Utilityd2 = zeros(nobs,Alternative_all);
														
														Phi_d = zeros(Total_Phi,1);
														Phi_d[iphi] = 1;
														
														Phi_K1_d  = zeros(nvar_mear_count,Highest_Phi);
														for i(1,nvar_mear_count,1);
															if(i==1);
															   Phi_K1_d[i,1:Num_Phi[i]] = (Phi_d[1:num_Phi_csum[i]])';
															else;
															   Phi_K1_d[i,1:Num_Phi[i]] = (Phi_d[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
															endif;
														endfor;
														
														Phi_d  = Phi_K1_d;
														
														for i(1,nvar_mear_count,1);
															if(Num_Phi[i] < Highest_Phi);
															   Phi_d[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
															endif;
														endfor;
														
														xPhiMat_d = zeros(nvar_mear_count,threshCountMax+1);
														for iCnt (1,nvar_mear_count,1);
															xPhiMat_d[iCnt,2:1+Num_Phi[iCnt]] = Phi_d[iCnt,1:Num_Phi[iCnt]];
														endfor;
														
														for iCnt (1,nvar_mear_count,1);
														   xPhiMat_d[iCnt,Num_Phi[iCnt]+2:threshCountMax+1] = Phi_d[iCnt,Num_Phi[iCnt]] .*. ones(1,threshCountMax+1-Num_Phi[iCnt]-1);
														endfor;
														
														Count_Threshold_d2 = zeros(nobs,nvar_mear_count*2);
														for iobs(1,nobs,1);
															for jcount(1,nvar_mear_count,1);
																countObs = dta[iobs,Count_Index[jcount]];
																if(countObs gt 0); 
																	phiUpper = (xPhiMat_d[jcount,countObs+1])';
																	phiLower = (xPhiMat_d[jcount,countObs])';
																else; 
																	phiUpper = 0; 
																	phiLower = 0; 
																endif;	
														
																Count_Threshold_d2[iobs,jcount] = phiLower;
																Count_Threshold_d2[iobs,nvar_mear_count+jcount] = phiUpper;
															endfor;
														endfor;
														
														Alpha_matd2        =  zeros(nvar_latent,nvar_latent);
													    D_matrixFd2        =  zeros(nvar_mear,nvar_latent);
													    GP_Global_Fd2      =  zeros(nobs*Alternative_all,nvar_latent);
													    Psi_matrix_bigFd2  =  zeros(nvar_mear,nvar_mear);
													    LamdaFd2           =  zeros(Alternative_all,Alternative_all);
														if(nvar_mear_ordl > 0);
															lower_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
															upper_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
														endif;
                                      
								  elseif(jparm > (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi) and jparm <= (nvarml+nCholOmega+nvarmC+ME_Element+nvar_mear+nvarma+TN_mat+All_nCholerr+num_ordl_cat_req+Total_Phi+nvar_mear_count) and nvar_mear_count > 0);
														itheta = jparm - nvarml - nCholOmega - nvarmC - ME_Element - nvar_mear - nvarma - TN_mat - All_nCholerr - num_ordl_cat_req - Total_Phi;
														
														yd2 =  zeros(nobs,nvar_mear);
														Utilityd2 = zeros(nobs,Alternative_all);
														
														dthet_smallC = -1*smallC[.,itheta] ./ (Lambda_count[.,itheta]+ Theta_coeff[itheta,1]);
														dthet_term1 = term1[.,itheta] .* ((ln(1-smallC[.,itheta])) + (Theta_coeff[itheta,1] *(-dthet_smallC) ./ (1-smallC[.,itheta])) ) - (1-smallC[.,itheta])^(Theta_coeff[itheta,1]) ./ gamma(Theta_coeff[itheta,1])^2 * digamma(Theta_coeff[itheta,1]) *gamma(Theta_coeff[itheta,1]); 
													   
														Count_Threshold_d2 = zeros(nobs,nvar_mear_count*2);
														for iobs(1,nobs,1);
															countObs = dta[iobs,Count_Index[1,itheta]];
															smallCObs = smallC[iobs,itheta];
															term2 = 0;
															dthet_term2 = 0;
															
															
															for icnt (0,countObs,1);
																term2 = term2 + (gamma(Theta_coeff[itheta,1] + iCnt)/(iCnt!) * smallCObs^iCnt);
																dthet_term2 = dthet_term2  + (digamma(Theta_coeff[itheta,1] + iCnt) *gamma(Theta_coeff[itheta,1] + iCnt)/(iCnt!) * smallCObs^iCnt) + (gamma(Theta_coeff[itheta,1] + iCnt)/(iCnt!) * (iCnt*smallCObs^(iCnt-1) *dthet_smallC[iobs,.]) );
																
															endfor;
															
															threshUpper = term1[iobs,itheta] * term2;
															dthet_threshUpper = dthet_term1[iobs,.] * term2 + term1[iobs,itheta] * dthet_term2;
															
															if(countObs gt 0);  
																term2 = term2 - (gamma(Theta_coeff[itheta,1] + countObs)/(countObs!) * smallCObs^countObs);
																dthet_term2 = dthet_term2 - (digamma(Theta_coeff[itheta,1] + countObs) *gamma(Theta_coeff[itheta,1] + countObs)/(countObs!) * smallCObs^countObs) - (gamma(Theta_coeff[itheta,1] + countObs)/(countObs!) * (countObs *smallCObs^(countObs-1) *dthet_smallC[iobs,.]) );
																
																threshLower = term1[iobs,itheta] * term2;
																phiUpper = (xPhiMat[itheta,countObs+1])';
																phiLower = (xPhiMat[itheta,countObs])';
																dthet_threshLower = dthet_term1[iobs,.] * term2 + term1[iobs,itheta] * dthet_term2;
															else; 
																threshLower = 0;
																dthet_threshLower = 0;
																phiUpper = 0;
																phiLower = 0;
															endif;

															threshUpper = minc( threshUpper|0.99999999999999999);
															threshLower = minc( threshLower|0.99999999999999999);
															
															dthet_threshUpper = 1/pdfn(cdfni(threshUpper )) *dthet_threshUpper;
															dthet_threshLower = 1/pdfn(cdfni(threshLower)) *dthet_threshLower;
																	   
															Count_Threshold_d2[iobs,itheta] = dthet_threshLower;
															Count_Threshold_d2[iobs,nvar_mear_count+itheta] = dthet_threshUpper;
														endfor;
														clear dthet_smallC,dthet_term1;
														
														Alpha_matd2        =  zeros(nvar_latent,nvar_latent);
													    D_matrixFd2        =  zeros(nvar_mear,nvar_latent);
													    GP_Global_Fd2      =  zeros(nobs*Alternative_all,nvar_latent);
													    Psi_matrix_bigFd2  =  zeros(nvar_mear,nvar_mear);
													    LamdaFd2           =  zeros(Alternative_all,Alternative_all);
														if(nvar_mear_ordl > 0);
															lower_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
															upper_threshold_matrix_d2 = zeros(nobs,nvar_mear_ordl);
														endif;
								  endif;
                                  
								  ThreadBegin;
								  temp1_hess = User_Hess_T1(Data_Split[1,1],Data_Split[1,2]);
								  ThreadEnd;
								  ThreadBegin;
								  temp2_hess = User_Hess_T1(Data_Split[2,1],Data_Split[2,2]);
								  ThreadEnd;
								  ThreadBegin;
								  temp3_hess = User_Hess_T1(Data_Split[3,1],Data_Split[3,2]);
								  ThreadEnd;
								  ThreadBegin;
								  temp4_hess = User_Hess_T1(Data_Split[4,1],Data_Split[4,2]);
								  ThreadEnd;
								  ThreadBegin;
								  temp5_hess = User_Hess_T1(Data_Split[5,1],Data_Split[5,2]);
								  ThreadEnd;
								  ThreadBegin;
								  temp6_hess = User_Hess_T1(Data_Split[6,1],Data_Split[6,2]);
								  ThreadEnd;
								  ThreadJoin;
								  
								  Total_g = temp1_hess + temp2_hess + temp3_hess + temp4_hess + temp5_hess + temp6_hess ;
								  									
					HCap[iparm,jparm] = Total_g;
					if(iparm ne jparm);
					   HCap[jparm,iparm] = Total_g;
				   endif;
				   clear yd2,Utilityd2,Alpha_matd2,Count_Threshold_d2,lower_threshold_matrix_d2,upper_threshold_matrix_d2,D_matrixFd2,GP_Global_Fd2,Psi_matrix_bigFd2,LamdaFd2;
			    endif;
		   endfor;
	   clear yd1,Utilityd1,Alpha_matd1,Count_Threshold_d1,lower_threshold_matrix_d1,upper_threshold_matrix_d1,D_matrixFd1,GP_Global_Fd1,Psi_matrix_bigFd1,LamdaFd1;
	   endif;
 endfor;
 HCap = -HCap;
 HCap = selif(HCap,_max_active);
 HCap = selif(HCap',_max_active);
 retp(HCap);
endp;  

proc(1) = User_Hess_T1(r_st,r_end);
      local Total_g,pair_cc_count,pair_ogc_count,pair_ogcn_count,pair_nn_count,pair1,Y_pair1,U_pair1,Y_pair2,U_pair2,Y_pair1d1,U_pair1d1,Y_pair1d2,U_pair1d2,Full_error_pair1,Full_error_pair1d1;
	  local Full_error_pair1d2,M,Mq,Alt_chosen,iden_matrix,one_negative,temp1,ch,obs_pairs,temp_check,pair2_all,pair2_index,pair2,Full_error_pair2,Full_error_pair12,Full_error_pair2d1,Full_error_pair12d1;
	  local Full_error_pair2d2,Full_error_pair12d2,Full_error,Full_error_d1,Full_error_d2,U_Y,U_Yd1,U_Yd2,B_Tild,B_Tild_d1,B_Tild_d2,Error_Tild,Error_Tild_d1,Error_Tild_d2,BU_Tild,BU_Tild_d1,BU_Tild_d2;
	  local Error_YU_Tild,Error_YU_Tild_d1,Error_YU_Tild_d2,Error_U_Tild,Error_U_Tild_d1,Error_U_Tild_d2,Error_Y,Error_Y_d1,Error_Y_d2,Diff_Mean,Diff_Mean_mu,Diff_Mean_mu_d1,Diff_Mean_mu_d2,Mean_changed;
	  local Mean_changed_d1,Mean_changed_d2,Error_changed,Error_changed_d1,Error_changed_d2,f1,f1d1,f1d2,f1d2d1,f1x1,f1x2,ME1,ME2,cont_ele,hd,i2,f1x2x1,Curr_Lower_Threshold,Curr_Lower_Threshold_d1,Curr_Lower_Threshold_d2;
	  local Curr_Upper_Threshold,Curr_Upper_Threshold_d1,Curr_Upper_Threshold_d2,g1,g2,g3,g4,g11,g22,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd1_low_g1,omncd1_low_g2,omncd1_up_g1,omncd1_up_g2;
	  local rho_low1_g1md,rho_low1_g2md,rho_up1_g1md,rho_up1_g2md,omncd2_low_g1,omncd2_low_g2,omncd2_up_g1,omncd2_up_g2,rho_low2_g1md,rho_low2_g2md,rho_up2_g1md,rho_up2_g2md,rho_low1_g1m,rho_low1_g2m,rho_up1_g1m,rho_up1_g2m;
	  local rho_low1_g1d,rho_low1_g2d,rho_up1_g1d,rho_up1_g2d,rho_low2_g1d,rho_low2_g2d,rho_up2_g1d,rho_up2_g2d,var_g1g2_d1,var_g1g2_d2,p2_temp11_1,p2_temp22_1,p2_temp33_1,p2_temp44_1,p2_temp11_2,p2_temp22_2,p2_temp33_2,p2_temp44_2;
	  local f1d,i3,cc_grad,v1,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,rho_low_g3_d1,rho_up_g3_d1,mean_gu_d1,var_gu_d1,rho_low_g3_d2,rho_up_g3_d2,mean_gu_d2,var_gu_d2,om,omncd1,omncd2,mean_up_final,var_final;
	  local mean_up_final_d1,var_final_d1,mean_up_final_d2,var_final_d2,num_element,shi_r_unq1,shi_r_unq2,ogc_grad,ogcn_grad,R_GG,nn_grad,U_pair2d1,U_pair2d2,Y_pair2d2;
	  local rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,Y_pair2d1,mean_final,mean_final_d1,mean_final_d2;
	  local S1A1,S1A2,S12A12,corr_mat,S1A1_d1,S1A2_d1,S12A12_d1,corr_mat_d1,S1A1_d2,S1A2_d2,S12A12_d2,corr_mat_d2;
	  local num_tote,num_mene,num_vare,f11,f22,f2x1,f2x2,ME11,ME12,ME21,ME22,hd1,hd2,f2x2x1,mean_low_final_d1,mean_low_final_d2,p_diff;
	  local nc,Lambda_mat,Lambda_mat_d1,Lambda_mat_d2,e1,e12,e2,e1_d1,e12_d1,e2_d1,e1_d2,e12_d2,e2_d2,temp,nchocc;

 Total_g = 0;
 if(r_st == 1);
   pair_cc_count = 0;
   pair_ogc_count = 0;
   pair_ogcn_count = 0;
   pair_nn_count = 0;
 else;
	 if(nvar_mear_cont > 0);
	    pair_cc_count    = r_st-1;
     endif;
	 if(nvar_ogc > 1);
	    pair_ogc_count   = Com_ogc_r1*(r_st-1);
	 endif;
	 if(nvar_ogc > 0);
	   pair_ogcn_count  = Com_ogcn_r1*(r_st-1);
     endif;
	 if(num_nominal > 1);
	 	 pair_nn_count   = Com_nn_r1*(r_st-1);
	 endif;
endif;


for i(r_st,r_end,1);
	U_Y = {}; U_Yd1 = {}; U_Yd2 = {}; 
	Full_error_d1 = {}; Full_error_d2 = {}; Full_error = {}; 			   
		
	Lambda_mat    = GP_Global[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
	Lambda_mat_d1 = GP_Global_Fd1[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
	Lambda_mat_d2 = GP_Global_Fd2[(i-1)*Alternative_all+1:(i-1)*Alternative_all+Alternative_all,.];
	  
	e1   = ( D_matrix * Alpha_mat * D_matrix' + Psi_matrix_big );
	e12  = ( D_matrix * Alpha_mat * Lambda_mat');
	e2   = ( Lambda_mat * Alpha_mat * Lambda_mat' + Lamda);
	
	e1_d1   = D_matrixFd1*Alpha_mat*D_matrix'     + D_matrix*Alpha_mat*D_matrixFd1'     + D_matrix*Alpha_matd1*D_matrix' + Psi_matrix_bigFd1;
	e12_d1  = D_matrixFd1*Alpha_mat*Lambda_mat'   + D_matrix*Alpha_mat*Lambda_mat_d1'   + D_matrix*Alpha_matd1*Lambda_mat' ;
	e2_d1   = Lambda_mat_d1*Alpha_mat*Lambda_mat' + Lambda_mat*Alpha_mat*Lambda_mat_d1' + Lambda_mat*Alpha_matd1*Lambda_mat' +  LamdaFd1;
		   
	e1_d2   = D_matrixFd2*Alpha_mat*D_matrix'     + D_matrix*Alpha_mat*D_matrixFd2'     + D_matrix*Alpha_matd2*D_matrix' + Psi_matrix_bigFd2;
	e12_d2  = D_matrixFd2*Alpha_mat*Lambda_mat'   + D_matrix*Alpha_mat*Lambda_mat_d2'   + D_matrix*Alpha_matd2*Lambda_mat' ;
	e2_d2   = Lambda_mat_d2*Alpha_mat*Lambda_mat' + Lambda_mat*Alpha_mat*Lambda_mat_d2' + Lambda_mat*Alpha_matd2*Lambda_mat' +  LamdaFd2;
	
	Full_error = Full_error | (e1~e12);
	Full_error = Full_error | (e12'~e2);
	
	Full_error_d1 = Full_error_d1 | (e1_d1~e12_d1);
	Full_error_d1 = Full_error_d1 | (e12_d1'~e2_d1);
	
	Full_error_d2 = Full_error_d2 | (e1_d2~e12_d2);
	Full_error_d2 = Full_error_d2 | (e12_d2'~e2_d2);
	
	U_Y    = U_Y   | Y_vec[i,.]'  | Utility[i,.]'; 
	U_Yd1  = U_Yd1 | yd1[i,.]'    | Utilityd1[i,.]'; 
    U_Yd2  = U_Yd2 | yd2[i,.]'    | Utilityd2[i,.]'; 

    M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
	M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
	 
	Alt_chosen = (Main_data[i,Altchm])';
	 
	for j(1,num_nominal,1);
	   iden_matrix = eye(All_Nominal[1,j]-1);
         one_negative = -1*ones(All_Nominal[1,j]-1,1);
	   if(Alt_chosen[j] eq 1);
		temp1 = one_negative ~ iden_matrix;
	   elseif(Alt_chosen[j] eq All_Nominal[1,j]);
		temp1 = iden_matrix ~ one_negative;
	   else;
		ch = Alt_chosen[j];
		temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
	   endif;
	
	     if(j == 1);
	      M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
	   else;
		  M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
	   endif;
	  
	   clear temp1;
	endfor;

    B_Tild = M * U_Y;  
	Error_Tild = M * Full_error * M';
	
	B_Tild_d1 = M * U_Yd1;
	Error_Tild_d1 = M * Full_error_d1 * M';
    
	B_Tild_d2 = M * U_Yd2;
	Error_Tild_d2 = M * Full_error_d2 * M';
    
	if(nvar_mear_cont < nvar_mear);
		BU_Tild        = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
		BU_Tild_d1     = B_Tild_d1[nvar_mear_cont+1:rows(B_Tild)];
		BU_Tild_d2     = B_Tild_d2[nvar_mear_cont+1:rows(B_Tild)];
    endif;

    if(nvar_mear_cont > 0);
		Error_YU_Tild    = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont]; 
		Error_YU_Tild_d1 = Error_Tild_d1[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
		Error_YU_Tild_d2 = Error_Tild_d2[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];					
	endif;
	
    if(nvar_mear_cont > 0 and nvar_ogc > 0);	
		Error_U_Tild     = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)]; 
		Error_U_Tild_d1  = Error_Tild_d1[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)]; 	
		Error_U_Tild_d2  = Error_Tild_d2[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)]; 	
    endif;

    if(nvar_mear_cont > 0);
	 Error_Y         = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
	 Error_Y_d1      = Error_Tild_d1[1:nvar_mear_cont,1:nvar_mear_cont]; 
	 Error_Y_d2      = Error_Tild_d2[1:nvar_mear_cont,1:nvar_mear_cont]; 
	 Diff_Mean       = (Main_data[i,Continous_Index])' ;
	 Diff_Mean_mu    = B_Tild[1:nvar_mear_cont];
	 Diff_Mean_mu_d1 = B_Tild_d1[1:nvar_mear_cont];
	 Diff_Mean_mu_d2 = B_Tild_d2[1:nvar_mear_cont];
    endif;
    
	if(nvar_mear_cont > 0);
		Mean_changed    =  BU_Tild   + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
		Mean_changed_d1 =  BU_Tild_d1 + ( Error_YU_Tild_d1 * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d1 * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d1 ) ;
		Mean_changed_d2 =  BU_Tild_d2 + ( Error_YU_Tild_d2 * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d2 * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d2 ) ;
	
		Error_changed    = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
		Error_changed_d1 = Error_U_Tild_d1 - ( Error_YU_Tild_d1 * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d1 * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d1');
		Error_changed_d2 = Error_U_Tild_d2 - ( Error_YU_Tild_d2 * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d2 * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d2');
		 
	else;
		Mean_changed    =  BU_Tild ;
		Mean_changed_d1 =  BU_Tild_d1;
		Mean_changed_d2 =  BU_Tild_d2;
		
		Error_changed    = Error_U_Tild ;
		Error_changed_d1 = Error_U_Tild_d1;
		Error_changed_d2 = Error_U_Tild_d2;
	endif;
    
	
	if(nvar_mear_cont > 0);
		pair_cc_count = pair_cc_count + 1;
		f1     = Store_cc[pair_cc_count,1];
		f1d1   = Store_cc[pair_cc_count,2:cc_elem1+1];
		f1d2   = Store_cc[pair_cc_count,cc_elem1+2:cc_elem1+1+cc_eler1];
		f1d2d1 = Hess_cc[pair_cc_count,1:h_cc_c];
		
		f1x1   = f1d1 * (-Diff_Mean_mu_d1) + f1d2 * vech(Error_Y_d1);
		f1x2   = f1d1 * (-Diff_Mean_mu_d2) + f1d2 * vech(Error_Y_d2);
		
		ME1 = (-Diff_Mean_mu_d1)' ;
		ME2 = (-Diff_Mean_mu_d2)' ;
		
		for icont(1,nvar_mear_cont,1);
			ME1 = ME1 ~ Error_Y_d1[icont,icont:cols(Error_Y_d1)];
			ME2 = ME2 ~ Error_Y_d2[icont,icont:cols(Error_Y_d2)];
		endfor;
		
		cont_ele = cols(ME1);
		hd = {};
							   
		for i1(1,cont_ele,1);
			for i2(i1,cont_ele,1);
				   hd = hd | (ME1[1,i1]*ME2[1,i2]);
			endfor;
		endfor;
	
		f1x2x1  = f1d2d1*hd ;
		if(f1 > upper_limit);
			cc_grad = -((f1x1*f1x2)/f1^2) + (f1x2x1/f1);
			Total_g = Total_g + cc_grad ;
		endif;
	endif;
    
	
	Curr_Lower_Threshold = {};  Curr_Lower_Threshold_d1 = {};  Curr_Lower_Threshold_d2 = {};
	Curr_Upper_Threshold = {};  Curr_Upper_Threshold_d1 = {};  Curr_Upper_Threshold_d2 = {};
	
	
	if(nvar_mear_ordl > 0);
		Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.]  ;
		Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.]  ;
	
	    Curr_Lower_Threshold_d1 = Curr_Lower_Threshold_d1 ~ lower_threshold_matrix_d1[i,.] ;
		Curr_Upper_Threshold_d1 = Curr_Upper_Threshold_d1 ~ upper_threshold_matrix_d1[i,.] ;	
	    
		Curr_Lower_Threshold_d2 = Curr_Lower_Threshold_d2 ~ lower_threshold_matrix_d2[i,.]  ;
		Curr_Upper_Threshold_d2 = Curr_Upper_Threshold_d2 ~ upper_threshold_matrix_d2[i,.] ;
	endif;
    
	if(nvar_mear_count > 0);
		Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
		Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
	    
		Curr_Lower_Threshold_d1 = Curr_Lower_Threshold_d1 ~ Count_Threshold_d1[i,1:nvar_mear_count]  ;
		Curr_Upper_Threshold_d1 = Curr_Upper_Threshold_d1 ~ Count_Threshold_d1[i,nvar_mear_count+1:2*nvar_mear_count] ;
      
		Curr_Lower_Threshold_d2 = Curr_Lower_Threshold_d2 ~ Count_Threshold_d2[i,1:nvar_mear_count] ;
		Curr_Upper_Threshold_d2 = Curr_Upper_Threshold_d2 ~ Count_Threshold_d2[i,nvar_mear_count+1:2*nvar_mear_count] ;
	endif;
						
    Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,(Alternative_all-num_nominal))) ;
	Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,(Alternative_all-num_nominal)));
	
	Curr_Lower_Threshold_d1 = Curr_Lower_Threshold_d1 ~ (zeros(1,(Alternative_all-num_nominal))) ;
	Curr_Upper_Threshold_d1 = Curr_Upper_Threshold_d1 ~ (zeros(1,(Alternative_all-num_nominal)));
	
	Curr_Lower_Threshold_d2 = Curr_Lower_Threshold_d2 ~ (zeros(1,(Alternative_all-num_nominal))) ;
	Curr_Upper_Threshold_d2 = Curr_Upper_Threshold_d2 ~ (zeros(1,(Alternative_all-num_nominal)));

    if(nvar_ogc > 1);	   			   
		  for g1(1,nvar_ogc-1,1);
	          for g2(g1+1,nvar_ogc,1);
				   
				       pair_ogc_count = pair_ogc_count + 1;
				   
				       om_low_g1   =   Error_changed[g1,g1];
					   om_low_g2   =   Error_changed[g2,g2];
					   om_up_g1    =   Error_changed[g1,g1];
					   om_up_g2    =   Error_changed[g2,g2];
					   
					   omncd1_low_g1   =   Error_changed_d1[g1,g1];
					   omncd1_low_g2   =   Error_changed_d1[g2,g2];
					   omncd1_up_g1    =   Error_changed_d1[g1,g1];
					   omncd1_up_g2    =   Error_changed_d1[g2,g2];
					   
					   rho_low1_g1md  =  Curr_Lower_Threshold_d1[1,g1] - Mean_changed_d1[g1] ;
					   rho_low1_g2md  =  Curr_Lower_Threshold_d1[1,g2] - Mean_changed_d1[g2] ;
					   rho_up1_g1md   =  Curr_Upper_Threshold_d1[1,g1] - Mean_changed_d1[g1] ;
					   rho_up1_g2md   =  Curr_Upper_Threshold_d1[1,g2] - Mean_changed_d1[g2] ;
					   
					   omncd2_low_g1   =   Error_changed_d2[g1,g1];
					   omncd2_low_g2   =   Error_changed_d2[g2,g2];
					   omncd2_up_g1    =   Error_changed_d2[g1,g1];
					   omncd2_up_g2    =   Error_changed_d2[g2,g2];
					   
					   rho_low2_g1md  =  Curr_Lower_Threshold_d2[1,g1] - Mean_changed_d2[g1] ;
					   rho_low2_g2md  =  Curr_Lower_Threshold_d2[1,g2] - Mean_changed_d2[g2] ;
					   rho_up2_g1md   =  Curr_Upper_Threshold_d2[1,g1] - Mean_changed_d2[g1] ;
					   rho_up2_g2md   =  Curr_Upper_Threshold_d2[1,g2] - Mean_changed_d2[g2] ;
					   
					   rho_low_g1m  =  (Curr_Lower_Threshold[1,g1] - Mean_changed[g1] ) ;
					   rho_low_g2m  =  (Curr_Lower_Threshold[1,g2] - Mean_changed[g2] ) ;
					   rho_up_g1m   =  (Curr_Upper_Threshold[1,g1] - Mean_changed[g1] ) ;
					   rho_up_g2m   =  (Curr_Upper_Threshold[1,g2] - Mean_changed[g2] ) ;
					   
					   rho_low1_g1d =  ( sqrt(om_low_g1)*  rho_low1_g1md -  rho_low_g1m * omncd1_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
					   rho_low1_g2d =  ( sqrt(om_low_g2)*  rho_low1_g2md -  rho_low_g2m * omncd1_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
					   rho_up1_g1d =   ( sqrt(om_up_g1)*   rho_up1_g1md -   rho_up_g1m *  omncd1_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
					   rho_up1_g2d =   ( sqrt(om_up_g2)*   rho_up1_g2md -   rho_up_g2m *  omncd1_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
					   
					   rho_low2_g1d =  ( sqrt(om_low_g1)*  rho_low2_g1md -  rho_low_g1m * omncd2_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
					   rho_low2_g2d =  ( sqrt(om_low_g2)*  rho_low2_g2md -  rho_low_g2m * omncd2_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
					   rho_up2_g1d =   ( sqrt(om_up_g1)*   rho_up2_g1md -   rho_up_g1m *  omncd2_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
					   rho_up2_g2d =   ( sqrt(om_up_g2)*   rho_up2_g2md -   rho_up_g2m *  omncd2_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
					   
					   var_g1g2_d1    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d1[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d1[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d1[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
				       var_g1g2_d2    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d2[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d2[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d2[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
				   
				   
					   p2_temp11_1 = rho_up1_g1d  | rho_up1_g2d  | var_g1g2_d1;
					   p2_temp22_1 = rho_up1_g1d  | rho_low1_g2d | var_g1g2_d1;
					   p2_temp33_1 = rho_low1_g1d | rho_up1_g2d  | var_g1g2_d1;
					   p2_temp44_1 = rho_low1_g1d | rho_low1_g2d | var_g1g2_d1;
					  
					   p2_temp11_2 = rho_up2_g1d  | rho_up2_g2d  | var_g1g2_d2;
					   p2_temp22_2 = rho_up2_g1d  | rho_low2_g2d | var_g1g2_d2;
					   p2_temp33_2 = rho_low2_g1d | rho_up2_g2d  | var_g1g2_d2;
					   p2_temp44_2 = rho_low2_g1d | rho_low2_g2d | var_g1g2_d2; 
					   
					   f1     = Store_ogc[pair_ogc_count,13];
					   f1d    = Store_ogc[pair_ogc_count,1:12];
					   f1d2d1 = Hess_ogc[pair_ogc_count,1:24];
					   
					   f1x1   = (f1d[1,1:3]*p2_temp11_1) - (f1d[1,4:6]*p2_temp22_1) - (f1d[1,7:9]*p2_temp33_1) + (f1d[1,10:12]*p2_temp44_1) ;
					   f1x2   = (f1d[1,1:3]*p2_temp11_2) - (f1d[1,4:6]*p2_temp22_2) - (f1d[1,7:9]*p2_temp33_2) + (f1d[1,10:12]*p2_temp44_2) ;
						
					   ME1 = p2_temp11_1' | p2_temp22_1' | p2_temp33_1' | p2_temp44_1' ;
					   ME2 = p2_temp11_2' | p2_temp22_2' | p2_temp33_2' | p2_temp44_2' ;
						
					   cont_ele = rows(ME1);
					   hd = {};
											   
					   for i1(1,cont_ele,1);
							for i2(1,cols(ME1),1);
							    for i3(i2,cols(ME2),1);
								     hd = hd | (ME1[i1,i2]*ME2[i1,i3]);
								 endfor;
							endfor;
						endfor;
		   
						f1x2x1  = f1d2d1[1,1:6]*hd[1:6,1] - f1d2d1[1,7:12]*hd[7:12,1] - f1d2d1[1,13:18]*hd[13:18,1] + f1d2d1[1,19:24]*hd[19:24,1] ;
						if(f1 > upper_limit);
							ogc_grad = -((f1x1*f1x2)/f1^2) + (f1x2x1/f1);
							Total_g = Total_g + ogc_grad ;
						endif;				   
				endfor;
		   endfor;
   endif;
   
   if(nvar_ogc > 0);	 
	  for v1(1,nvar_ogc,1);
		  for g1(1,num_nominal,1);
						pair_ogcn_count = pair_ogcn_count + 1;
						D_VG = zeros(All_Nominal[1,g1],(nvar_ogc+Alternative_all-num_nominal));
						D_VG[1,v1] = 1;
						
						if(g1 == 1);
						   D_VG[2:rows(D_VG),nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
						else;
						   D_VG[2:rows(D_VG),nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
						endif;
					   
						    rho_low_g3 = D_VG*Curr_Lower_Threshold';
							rho_up_g3  = D_VG*Curr_Upper_Threshold';
							rho_low_g3[2:rows(rho_low_g3)] = zeros(rows(rho_low_g3)-1,1);
						   
							mean_gu    = D_VG*Mean_changed;
							var_gu     = D_VG*Error_changed*D_VG';
							
							rho_low_g3_d1 = D_VG*Curr_Lower_Threshold_d1';
		                    rho_up_g3_d1  = D_VG*Curr_Upper_Threshold_d1';
							
							rho_low_g3_d2 = D_VG*Curr_Lower_Threshold_d2';
		                    rho_up_g3_d2  = D_VG*Curr_Upper_Threshold_d2';
							
							mean_gu_d1  = D_VG*Mean_changed_d1;
							var_gu_d1   = D_VG*Error_changed_d1*D_VG';
							
							mean_gu_d2  = D_VG*Mean_changed_d2;
							var_gu_d2   = D_VG*Error_changed_d2*D_VG';
						   
							om      =  (diag(var_gu));
							omncd1  = (diag(var_gu_d1));
							omncd2  = (diag(var_gu_d2));
							
							mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
						   
							var_final      = corrvc(var_gu);
							var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
							
							mean_up_final_d1  = (  - sqrt(om') .* (rho_up_g3_d1-mean_gu_d1)' - (rho_up_g3 - mean_gu)' .* omncd1' ./ sqrt(om') ./2   ) ./ (om');
							mean_up_final_d2  = (  - sqrt(om') .* (rho_up_g3_d2-mean_gu_d2)' - (rho_up_g3 - mean_gu)' .* omncd2' ./ sqrt(om') ./2   ) ./ (om');
							
							mean_low_final_d1  = (  - sqrt(om') .* (rho_low_g3_d1-mean_gu_d1)' - (rho_low_g3 - mean_gu)' .* omncd1' ./ sqrt(om') ./2   ) ./ (om');
							mean_low_final_d2  = (  - sqrt(om') .* (rho_low_g3_d2-mean_gu_d2)' - (rho_low_g3 - mean_gu)' .* omncd2' ./ sqrt(om') ./2   ) ./ (om');
							
							var_final_d1      = ( (var_gu_d1./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd1 )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd1 ) ;
							var_final_d2      = ( (var_gu_d2./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd2 )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd2 ) ;
							
							var_final_d1      = diagrv(var_final_d1 ,ones(All_Nominal[1,g1],1));
							var_final_d2      = diagrv(var_final_d2 ,ones(All_Nominal[1,g1],1));
						    
							
							shi_r_unq1 = {}; shi_r_unq2 = {};
							for ishi(1,rows(var_final_d1)-1,1);
								  shi_r_unq1 = shi_r_unq1 ~ var_final_d1[ishi,ishi+1:cols(var_final_d1)];
								  shi_r_unq2 = shi_r_unq2 ~ var_final_d2[ishi,ishi+1:cols(var_final_d2)];
							endfor;
							
							num_tote  = All_Nominal[1,g1] + (All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5);
							num_mene  = All_Nominal[1,g1] ;
							num_vare  = All_Nominal[1,g1]*(All_Nominal[1,g1]-1)*0.5;
					 
							 f11   = Store_ogcn[pair_ogcn_count,1];
							 f1x1  = (Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d1') + (Store_ogcn[pair_ogcn_count,1+num_mene+1:1+num_mene+num_vare] * shi_r_unq1' );
							 f1x2  = (Store_ogcn[pair_ogcn_count,2:num_mene+1] * mean_up_final_d2') + (Store_ogcn[pair_ogcn_count,1+num_mene+1:1+num_mene+num_vare] * shi_r_unq2' );
							 
							 f22  = Store_ogcn[pair_ogcn_count,1+num_tote+1];
							 f2x1 = (Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d1') + (Store_ogcn[pair_ogcn_count,1+num_tote+1+num_mene+1:1+num_tote+1+num_mene+num_vare] * shi_r_unq1' );
							 f2x2 = (Store_ogcn[pair_ogcn_count,1+num_tote+1+1:1+num_tote+1+num_mene] * mean_low_final_d2') + (Store_ogcn[pair_ogcn_count,1+num_tote+1+num_mene+1:1+num_tote+1+num_mene+num_vare] * shi_r_unq2' );
							 
							 ME11 = mean_up_final_d1~shi_r_unq1 ;
							 ME12 = mean_up_final_d2~shi_r_unq2 ;
							 
							 ME21 = mean_low_final_d1~shi_r_unq1 ;
							 ME22 = mean_low_final_d2~shi_r_unq2 ;
												   
							 cont_ele = cols(ME11);
							 hd1 = {}; hd2 = {};
												   
							 for i1(1,cont_ele,1);
								for i2(i1,cont_ele,1);
									   hd1 = hd1 | (ME11[1,i1]*ME12[1,i2]);
									   hd2 = hd2 | (ME21[1,i1]*ME22[1,i2]);
								endfor;
							 endfor;
												   
							 f1x2x1  = Hess_ogcn[pair_ogcn_count,1:rows(hd1)]*hd1 ;  
							 f2x2x1  = Hess_ogcn[pair_ogcn_count,rows(hd1)+1:rows(hd1)+rows(hd2)]*hd2;
							 
                             p_diff  = 	f11-f22;						 
							 if(p_diff > upper_limit);
								ogcn_grad     = -((f1x1*f1x2 - f2x1*f2x2)/p_diff^2) + ((f1x2x1-f2x2x1)/p_diff);
								Total_g     = Total_g + ogcn_grad ;
							 endif;					 
			endfor;
		endfor;
    endif;
    
	if(num_nominal > 1);
    for g1(1,num_nominal-1,1);
			for g2(g1+1,num_nominal,1);
				
				pair_nn_count = pair_nn_count + 1;
				R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_ogc+Alternative_all-num_nominal);
								
				if(g1 == 1);
				   R_GG[1:M_mat_Track[1,g1],nvar_ogc+1:nvar_ogc+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
			    else;
				   R_GG[1:M_mat_Track[1,g1],nvar_ogc+M_mat_Track_csum[g1-1,1]+1:nvar_ogc+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
			    endif;
			   
				R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_ogc+M_mat_Track_csum[g2-1,1]+1:nvar_ogc+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
										
				
				mean_gu     = -(R_GG*Mean_changed);
				mean_gu_d1  = -(R_GG*Mean_changed_d1);
				mean_gu_d2  = -(R_GG*Mean_changed_d2);
									
				var_gu      = R_GG*Error_changed*R_GG';
				var_gu_d1   = R_GG*Error_changed_d1*R_GG';
				var_gu_d2   = R_GG*Error_changed_d2*R_GG';
				
				om      = diag(var_gu);
				omncd1  = diag(var_gu_d1);
				omncd2  = diag(var_gu_d2);
				
				mean_final = mean_gu./sqrt(om);
				
				var_final      = corrvc(var_gu);
				var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
				
				mean_final_d1  = (  sqrt(om') .* mean_gu_d1' -  mean_gu' .* omncd1' ./ sqrt(om') ./2   ) ./ (om');
				mean_final_d2  = (  sqrt(om') .* mean_gu_d2' -  mean_gu' .* omncd2' ./ sqrt(om') ./2   ) ./ (om');
				
				var_final_d1   = ( (var_gu_d1./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd1 )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd1 ) ;
				var_final_d2   = ( (var_gu_d2./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd2 )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd2 ) ;
				
				
				var_final_d1   = diagrv(var_final_d1 ,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
				var_final_d2   = diagrv(var_final_d2 ,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
				
				shi_r_unq1 = {}; shi_r_unq2 = {};
				for ishi(1,rows(var_final_d1)-1,1);
				     shi_r_unq1 = shi_r_unq1 ~ var_final_d1[ishi,ishi+1:cols(var_final_d1)];
					 shi_r_unq2 = shi_r_unq2 ~ var_final_d2[ishi,ishi+1:cols(var_final_d2)];
				endfor;
				
				num_element = All_Nominal[1,g1]+All_Nominal[1,g2]-2	;
				
				f1   = Store_nn[pair_nn_count,1];
				f1x1 = (Store_nn[pair_nn_count,2:1+num_element] * mean_final_d1') + (Store_nn[pair_nn_count,1+num_element+1:1+num_element+cols(shi_r_unq1)] * shi_r_unq1' );
				f1x2 = (Store_nn[pair_nn_count,2:1+num_element] * mean_final_d2') + (Store_nn[pair_nn_count,1+num_element+1:1+num_element+cols(shi_r_unq2)] * shi_r_unq2' );
				 
				 ME1 = mean_final_d1~shi_r_unq1 ;
				 ME2 = mean_final_d2~shi_r_unq2 ;
									   
				 cont_ele = cols(ME1);
				 hd = {};
									   
				 for i1(1,cont_ele,1);
					for i2(i1,cont_ele,1);
						   hd = hd | (ME1[1,i1]*ME2[1,i2]);
					endfor;
				 endfor;
									   
				 f1x2x1  = (Hess_nn[pair_nn_count,1:rows(hd)]*hd) ;
																						
				 if(f1 > upper_limit);
					nn_grad     = -((f1x1*f1x2)/f1^2) + (f1x2x1/f1);
					Total_g     = Total_g + nn_grad ;
				 endif;
															
				clear R_GG,mean_gu,var_gu,om,mean_final,var_final;
		endfor;
  endfor;
  endif;
  
  clear Lambda_mat,Lambda_mat_d1,Lambda_mat_d2,e1,e12,e2,e1_d1,e12_d1,e2_d1,e1_d2,e12_d2,e2_d2;
  endfor;
  retp(Total_g);
 endp;
//---------------------------------------------------------------------------------------------------------------------------------------
proc(1)= pdfmvn(x,mu,s);
	 local d,p,p1,p2;
	 d = rows(x);
	 p1 = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
	 p2 = ((2*pi)^(d/2))*sqrt(det(s));
	 p = p1/p2;
	 retp(p);
 endp;
 

proc(1)=pdfgmean(x,mu,s);
    local d,p,p1,p2,p3,grad1,grad,store,ie;
	 d = rows(x);
	 p1 = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
	 p2 = ((2*pi)^(d/2))*sqrt(det(s));
	 p3 = inv(s);
	 p = p1/p2;
	 store = zeros(d,1);
	 for ie(1,d,1);
		  grad = -1*((x-mu).*p3[.,ie]);
		  grad1 = sumc(grad);
		  grad1 = p*grad1;
		  store[ie] = grad1;
	 endfor;
	 retp(store);
endp;

proc(1)=pdfgcov(x,mu,r);
	local d,p1,p2,p,p4,out,i,j,diff_matrix,part11,part12,part13,part1,s,ncholerr,diff_matrix1;
    local part21,part22,part23,part24,part2,gradient;
    d = rows(x);
    s = xpnd(r);
	ncholerr = d*(d+1)*0.5;
    p1 = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
    p2 = ((2*pi)^(d/2));
    p = p1/p2;
    p4 = inv(s);
    out = {};
    for i(1,ncholerr,1);
        
            diff_matrix1 = zeros(ncholerr,1);
			diff_matrix1[i,1]= 1;
			diff_matrix = xpnd(diff_matrix1);
            
            part11 = p4*diff_matrix;
            part12 = diag(part11);
            part13 = sumc(part12);
            part1 = -0.5*part13;
            part1 = part1/sqrt(det(s));
            
            part21 = (((p4*(x-mu))*(x-mu)')*p4);
            part22 = part21*diff_matrix;
            part23 = diag(part22);
            part24 = sumc(part23);
            part2 = 0.5*part24;
            part2 = part2/sqrt(det(s));
            
            gradient = p*(part1 + part2);
            out = out | gradient;
        
    endfor;
    retp(out);
endp;


proc(1)=cdfbvn_grad(a,b,corr);
    local d_a,d_b,d_corr;
    d_a     = pdfn(a) .* cdfn((b- corr .* a) ./ sqrt(1-corr .* corr) );
    d_b     = pdfn(b) .* cdfn((a- corr .* b) ./ sqrt(1-corr .* corr) );
    d_corr  = (exp(-0.5*((a^2 + b^2 - 2*corr .* a .* b   ) ./ (1-corr .* corr) ))) ./ ((2*pi) * sqrt(1-corr .* corr));
    retp(d_a|d_b|d_corr);
endp;

proc(1) = gettime();
	local y,timesec;
	y = time;
	timesec = y[1,1]*3600 + y[2,1]*60 + y[3,1];
	retp(timesec);
endp;


proc (3) = pdfmvnac(a,r,s,callCntr);
local m,w,s1,n1,p,j,x,rho,y,z,z1,z3,z2,cond,k,omega21,omega11,omega55,condk,pcomb,cm,int_count;
local rhovec,c,rho1,rho2,g3,g5,g10,g11,g12,g13,g14,g15,g20,g25,g30,g53,g31,g35,g36,g40,g45,g46,g47,g50,g51;
local grff,gw,condpass,sk,l,ab,ir,jr,res2,g80,g81,g59,kk,g49,g65,g55,mm,res,res1,aaa1,g56,g57,g58,g60,g61,g62,gr,gr1,gw1;
local gw2,gr2,gr3,aaa,gwf,grf,gwfinal,grfinal,invomg11,nnnn,gggg,ssss1,aa,t,newper,rnum,ss,r_1;

callCntr = callCntr + 1;

if(callCntr gt 25);
     { nnnn,gggg,ssss1 } = pdfmvnGHK(a,r,s);
	 retp(nnnn,gggg,ssss1);
else;
	  m = cols(a);
	  w = {};
	  { rnum, ss } = rndn(1,m,s);
	  aa = seqa(1,1,m)~(rnum)';
	  aa = sortc(aa,2);
	  w  = w|((aa[.,1])');
	  s  = ss;	
	  w  = w';

	n1 = cols(w);
	p = 0;
	j = 1;

	a = a.*(a .<5.7)+5.7*(a.>=5.7);     
	a = a.*(a .>-5.7)-5.7*(a.<=-5.7);  

	ab = a';
	condpass={};
	do until j > n1;
	  x = ab[w[.,j]];
	  rho = submat(r,w[.,j],w[.,j]);
	  y = reshape(((ones(m,1).*.x)'),m,m);
	  z = cdfbvn(x,y,rho);
	  z = diagrv(z,cdfn(x));
	  z1 = cdfn(x).*cdfn(y);
	  z3 = cdfn(x);
	  z2 = 1-z3;
	  cond = 1;
	  k = 3;
	  do until k > m;
		omega21 = z[k,1:k-1]-z1[k,1:k-1];
		omega11 = z[1:k-1,1:k-1]-z1[1:k-1,1:k-1];
		trap 1;
		cm = invpd(omega11);
		if scalerr(cm);
		  cm=inv(omega11);
		endif;
		trap 0;
		condk = z3[k]+omega21*(cm)*z2[1:k-1];  
		cond=cond*condk;
		k = k+1;
	  endo;
	  pcomb = z[1,2]*cond;
	  condpass = condpass~cond;
	  p = p+pcomb;    
	  j=j+1;
	endo;

	gwfinal = zeros(1,m);
	grfinal = zeros(1,((m-1)*(m)/2));
	j=1;
	do until j > n1;
	  x = ab[w[.,j]];
	  rho = submat(r,w[.,j],w[.,j]);
	  rhovec = {};
	  c=1;
	  do until c==cols(rho);
		 rhovec = rhovec~rho[c,c+1:cols(rho)];
		 c=c+1;
	  endo;
	  y = reshape(((ones(m,1).*.x)'),m,m);
	  z = cdfbvn(x,y,rho);
	  z = diagrv(z,cdfn(x));
	  z1 = cdfn(x).*cdfn(y);
	  z3 = cdfn(x);
	  z2 = 1-z3;
	  rho1 = diagrv(rho,zeros(m,1));
	  rho2 = sqrt(1-rho1^2);
	  g3 = pdfn(x);
	  g5 = (y-rho1.*x)./rho2;
	  g10 = g3.*cdfn(g5);
	  g11 = g3.*cdfn(y);
	  g12 = g10-g11;
	  g13 = g12;
	  g14 = g3.*(1-2*cdfn(x));
	  g15 = diagrv(g13,g14);
	  g20 = -g3;

	  g25 = (1/rho2).*g3.*pdfn(g5);
	  g25 = diagrv(g25,zeros(m,1));
	  

	  g30 = g10[1,2]~g10[2,1]~zeros(1,m-2);
	  g53 = g25[1,2]~zeros(1,cols(rhovec)-1);


	  k = 3;
	  gw1 = zeros(1,m);
	  gr1 = zeros(1,cols(rhovec));
	  do until k > m;
		omega21 = z[k,1:k-1]-z1[k,1:k-1];
		omega11 = z[1:k-1,1:k-1]-z1[1:k-1,1:k-1];
		trap 1;
		invomg11 = invpd(omega11); 
		if scalerr(invomg11);
		  invomg11=inv(omega11);
		endif;
		trap 0;  
		condk = z3[k]+omega21*invomg11*z2[1:k-1];
		g31 = zeros(1,m);
		g31[k] = g3[k];
		l = 1;
		g40={};
		g46={};
		g51={};
		g81 = z2[1:k-1];    
		do until l == k;
		  g35 = zeros(k-1,k-1);
		  g35[l,1:k-1] = g15[l,1:k-1];
		  g35=g35+g35';
		  g35 = diagrv(g35,(diag(g35)/2));
		  g36 = -invomg11*g35*invomg11;
		  g36 = omega21*g36*g81;
		  g40=g40~g36;

		  g45 = zeros(1,k-1);
		  g45[l] = g15[l,k];
		  g46 = g46~(g45*invomg11*g81);

		  g50 = zeros(k-1,1);
		  g50[l]=g20[l];
		  g51 = g51~(omega21*invomg11*g50);
		  l=l+1;
		endo;

		g40 = g40~zeros(1,m-(k-1));
		
		g49 = g15[k,1:k-1];
		g46 = g46~(g49*invomg11*g81);

		g47 = zeros(1,m);
		g47[1:cols(g46)] = g46;

		g51 =g51~zeros(1,m-(k-1));

		gw = (g31+g40+g47+g51)*((condpass[j])/condk).*z[1,2];
	 
		/* Start here for gradients with respect to rho parameters */


		l=1;
		kk = cols(rhovec);
		g60={};
		g65={};
		do until l>kk;
		  g55 = zeros(1,kk);
		  g55[l]=1; 
		  mm = 1;
		  sk=0;
		  g56 = zeros(m,m);
		  do until mm>m-1;
			g56[mm,mm+1:m] = (g55[sk+1:sk+m-mm]);
			sk=sk+m-mm;
			mm=mm+1;
		  endo; 
		  g57=g56+g56';
		  g59 = g57.*g25;
		  g59 = g59[1:k-1,1:k-1];
		  g58 = -invomg11*g59*invomg11;
		  g58 = omega21*g58*z2[1:k-1];
		  g60 = g60~g58;

		  g61 = g57[k,1:k-1].*g25[k,1:k-1];
		  g62 = g61*invomg11*z2[1:k-1];
		  g65 = g65~g62;      
		  l=l+1;
		endo;
	  
		gr = (g60+g65)*((condpass[j])/condk).*z[1,2];
		gw1 = gw+gw1;
		gr1 = gr+gr1;
		k=k+1;
	  endo;
	  gw2 = (g30.*condpass[j])+gw1;
	  gr2 = (g53.*condpass[j])+gr1;

	  mm=1;
	  sk=0;
	  gr3 = zeros(m,m);
	  do until mm>m-1;
		gr3[mm,mm+1:m] = (gr2[sk+1:sk+m-mm]);
		sk=sk+m-mm;
		mm=mm+1;
	  endo; 

	  /* commands below to resequence gradients based on permutation */
	  
	  aaa = indnv(seqa(1,1,m),w[.,j]);
	  gwf = gw2[aaa];
	  grf = submat(gr3,aaa,aaa); 

	  res = {};
	  ir = 1;
	  do until ir == m;
		jr = ir+1;
		res = res|((ones(m-ir,1).*.w[ir,j])~w[jr:m,j]);
		ir=ir+1;
	  endo;

	  res=res';
	  res2={};
	  t=1;
	  do until t>cols(res);
		res2 = res2~sortc(res[.,t],1);
		t=t+1;
	  endo;

	  res2=res2';
	  res1 = combinate(m,2);
	  res1 = res1[.,1] .*(10^(trunc (ln(res1[.,2])./ln(10))+1)) + res1[.,2];
	  res2 = res2[.,1] .*(10^(trunc (ln(res2[.,2])./ln(10))+1)) + res2[.,2];
	 
	  aaa1 = indnv(res1,res2);
	  grf = gr2[aaa1];
	  gwfinal = gwfinal+gwf;
	  grfinal = grfinal+grf;
	  j=j+1;
	endo;
	if ((p/n1) >0 and (p/n1) <=1);
	  retp(p/n1,(gwfinal~grfinal)/n1,s);
	else;
	 { nnnn,gggg,ssss1 } = pdfmvnac(a,r,s,callCntr);
	  retp(nnnn,gggg,ssss1);
	endif;
endif;
endp;

proc(3) = pdfmvnGHK(a,r,s);
	local nintegdim,uniRands,probab,chol_r,ghkArr,etaArr,ghkElem,gggg,gg_b_elem,gg_sig_elem,startRow,ghkElem1,d_ghkElem1,rnum,ss;
	
	if(abscissae_trunc eq 1);
		a = a.*(a .<5.7)+5.7*(a.>=5.7);      
        a = a.*(a .>-5.7)-5.7*(a.<=-5.7); 
	endif;
	
	nintegdim = rows(r);
	{ rnum, ss } = rndu(1,1,s);
	s = ss;
	startRow = ceil(rnum*(_halt_maxdraws-_halt_numdraws-1));
	uniRands = allHaltDraws[startRow:startRow+_halt_numdraws-1,1:nintegdim];
	chol_r = chol(r);
	ghkArr = zeros(nrep,nintegdim);
	etaArr = zeros(nrep,(nintegdim-1));
	ghkArr[.,1] = ones(nrep,1) .*. (cdfn( a[1,1]/chol_r[1,1]));  
    
	/*Probability Calculation */
	for iintegdim (1,nintegdim-1,1);
		etaArr[.,iintegdim]= cdfni(uniRands[.,iintegdim] .* ghkArr[.,iintegdim]);
		ghkElem = a[1,iintegdim+1];
        ghkElem1 = 0;
		for jintegdim (1,iintegdim,1);
			ghkElem1 = ghkElem1 - chol_r[jintegdim,iintegdim+1]*etaArr[.,jintegdim];
		endfor;
		ghkElem1 = ghkElem1 + ghkElem;
		ghkArr[.,(iintegdim+1)]=cdfn(ghkElem1/chol_r[(iintegdim+1),(iintegdim+1)]);
	endfor;
	probab = ghkArr[.,1];
	for iintegdim(2,nintegdim,1);
		probab = probab .* ghkArr[.,iintegdim];
	endfor;
	
	/*Gradient w.r.t x elements */
	ThreadBegin;
	gg_b_elem   = GHK_xgrad(a,r,probab,chol_r,etaArr,uniRands,ghkArr);
	ThreadEnd;
	
	/*Gradient w.r.t r elements */
	ThreadBegin;
	gg_sig_elem = GHK_rgrad(a,r,probab,chol_r,etaArr,uniRands,ghkArr);
	ThreadEnd;
	ThreadJoin;
	
	probab = meanc(probab);
	gggg = gg_b_elem~gg_sig_elem;
	retp(probab,gggg,s);
endp;

	
	proc(1) = GHK_xgrad(a,r,probab,chol_r,etaArr,uniRands,ghkArr);
	local d_ghkArr,d_etaArr,d_ghkElem,d_ll1,d_dutilALL,nintegdim,gg_b_elem,ghkElem,ghkElem1,d_ghkElem1;
	
	nintegdim = rows(r);
	d_dutilALL = reshape(eye(nintegdim),1,nintegdim*nintegdim);
	gg_b_elem = {};
    for ivar (1,nintegdim,1);    
		d_ghkArr = ones(nrep,1) * pdfn( a[1,1]/chol_r[1,1]) * (d_dutilALL[1,(ivar-1)*(nintegdim)+1]/chol_r[1,1]);
		d_etaArr = {};

        for iintegdim (1,nintegdim-1,1);
			ghkElem = a[1,iintegdim+1];
			ghkElem1 = 0;
            for jintegdim (1,iintegdim,1);
				ghkElem1 = ghkElem1 - chol_r[jintegdim,iintegdim+1]*etaArr[.,jintegdim];
            endfor;
			
			ghkElem = ghkElem + ghkElem1;
            d_etaArr = d_etaArr~(   (1/pdfn(etaArr[.,iintegdim]))  .*  ( uniRands[.,iintegdim] .* d_ghkArr[.,iintegdim])   );
            d_ghkElem = d_dutilALL[1,(ivar-1)*nintegdim+iintegdim+1];
			d_ghkElem1 = 0;
            for jintegdim (1,iintegdim,1);
				d_ghkElem1 = d_ghkElem1 - chol_r[jintegdim,iintegdim+1]*d_etaArr[.,jintegdim];
            endfor;
			d_ghkElem = d_ghkElem + d_ghkElem1;
			d_ghkArr = d_ghkArr~(   pdfn(ghkElem/chol_r[iintegdim+1,iintegdim+1]) .* (d_ghkElem/chol_r[iintegdim+1,iintegdim+1])  );
		endfor; 
            
        d_ll1 = 0;
        for iintegdim (1,nintegdim,1);
			d_ll1 = d_ll1 + probab .*  d_ghkArr[.,iintegdim]./ ghkArr[.,iintegdim];
        endfor;    
        gg_b_elem = gg_b_elem~(d_ll1);
	endfor;   
	gg_b_elem = meanc(gg_b_elem)';
	retp(gg_b_elem);
    endp;

	proc(1) = GHK_rgrad(a,r,probab,chol_r,etaArr,uniRands,ghkArr);
		local d_omega11,d_omega,d_chol_omega,temp_sub,d_temp_sub,gg_sig_elem,tempcntr,icov,chol_omega,nintegdim,d_ghkArr,d_etaArr,ghkElem,ghkElem1,d_ghkElem,d_ll1;
        
		nintegdim = rows(r);
		gg_sig_elem = {};
        
        chol_omega= zeros(nintegdim,nintegdim);
		icov = 0;
        for irow (1,nintegdim-1,1); 
		for icol (irow+1,nintegdim,1); 
			icov = icov+1;

			d_omega = zeros(nintegdim,nintegdim);
			d_omega[irow,icol]=1;d_omega[icol,irow]=1;
			
            d_chol_omega = zeros(nintegdim,nintegdim);
            for idim (1,nintegdim,1);                    
                temp_sub = 0;d_temp_sub = 0;
                for kdim (1,idim-1,1);
                    temp_sub = temp_sub + chol_omega[kdim,idim]*chol_omega[kdim,idim];
                    d_temp_sub = d_temp_sub + d_chol_omega[kdim,idim]*chol_omega[kdim,idim] + chol_omega[kdim,idim]*d_chol_omega[kdim,idim];
                endfor;
                chol_omega[idim,idim] = sqrt(r[idim,idim] - temp_sub);
                d_chol_omega[idim,idim] = (1/2/chol_omega[idim,idim])*(d_omega[idim,idim] - d_temp_sub);
                
                for jdim(idim+1,nintegdim,1);
                    temp_sub = 0;d_temp_sub = 0;
                    for kdim (1,idim-1,1);
                        temp_sub = temp_sub + chol_omega[kdim,idim]*chol_omega[kdim,jdim];
                        d_temp_sub = d_temp_sub + d_chol_omega[kdim,idim]*chol_omega[kdim,jdim] + chol_omega[kdim,idim]*d_chol_omega[kdim,jdim];
                    endfor;
                    chol_omega[idim,jdim] = (r[idim,jdim] - temp_sub)/chol_omega[idim,idim];
                    d_chol_omega[idim,jdim] = (d_omega[idim,jdim] - d_temp_sub)/chol_omega[idim,idim] + (r[idim,jdim] - temp_sub)/(-(chol_omega[idim,idim]^2))*d_chol_omega[idim,idim]  ;
                endfor;
            endfor;
            d_ghkArr = ones(nrep,1) * pdfn( a[1,1]/chol_omega[1,1]) * (-a[1,1]/((chol_omega[1,1])^2)) * d_chol_omega[1,1]    ;
            d_etaArr = {};
    
            for iintegdim (1,nintegdim-1,1);
                ghkElem = a[1,iintegdim+1];
				ghkElem1 = 0;
                for jintegdim (1,iintegdim,1);
                    ghkElem1 = ghkElem1 - chol_omega[jintegdim,iintegdim+1]*etaArr[.,jintegdim];
                endfor;
                
				ghkElem = ghkElem + ghkElem1;
                d_etaArr = d_etaArr~(    1/pdfn( cdfni(uniRands[.,iintegdim] .* ghkArr[.,iintegdim]) ) .*  ( uniRands[.,iintegdim] .* d_ghkArr[.,iintegdim])         );
                d_ghkElem = 0;
                for jintegdim (1,iintegdim,1);
                    d_ghkElem = d_ghkElem - d_chol_omega[jintegdim,iintegdim+1]*etaArr[.,jintegdim] - chol_omega[jintegdim,iintegdim+1]*d_etaArr[.,jintegdim];
                endfor;
                d_ghkArr = d_ghkArr~(   pdfn(ghkElem/chol_omega[iintegdim+1,iintegdim+1]) .* (   d_ghkElem/chol_omega[iintegdim+1,iintegdim+1] - ghkElem/(chol_omega[iintegdim+1,iintegdim+1]^2)*d_chol_omega[iintegdim+1,iintegdim+1]    )  );

            endfor; 

            d_ll1 = 0;
            for iintegdim (1,nintegdim,1);
                d_ll1 = d_ll1 + probab .*  d_ghkArr[.,iintegdim]./ ghkArr[.,iintegdim];
            endfor; 
                          
            gg_sig_elem = gg_sig_elem~(d_ll1);
        endfor;
		endfor;
	gg_sig_elem = meanc(gg_sig_elem)';
	retp(gg_sig_elem);
endp;

proc(1)=cdfbvn_Hess(a,b,corr);
    local d_a,d_b,d_corr,d_aa,d_ab,d_acorr,d_bb,d_bcorr,d_c1,d_c2,d_corrcorr;
	
    d_a     = pdfn(a) .* cdfn((b- corr .* a) ./ sqrt(1-corr .* corr) );
    d_b     = pdfn(b) .* cdfn((a- corr .* b) ./ sqrt(1-corr .* corr) );
    d_corr  = (exp(-0.5*((a^2 + b^2 - 2*corr .* a .* b   ) ./ (1-corr .* corr) ))) ./ ((2*pi) * sqrt(1-corr .* corr));
    
	d_aa     = -(a*d_a) - (corr*d_corr) ; 
	d_ab     = d_corr ;
    d_acorr  = ( (corr*b - a)/(1-corr .* corr) ) * d_corr ;

    d_bb     = -(b*d_b) - (corr*d_corr) ;
    d_bcorr  = ( (corr*a - b)/(1-corr .* corr) ) * d_corr ;	
	
	d_c1       = corr * ( (a^2 + b^2 - 2*corr .* a .* b   ) ./ (1-corr .* corr) ) ;
	d_c2       = ( (a*b) + corr - d_c1 ) / (1-corr .* corr) ;
	d_corrcorr = d_corr*d_c2;
	
	retp(d_aa|d_ab|d_acorr|d_bb|d_bcorr|d_corrcorr);
endp;

proc(1)=pdfHess(x,mu,r);
	
	local d,p1,p2,p,p4,out,i,j,diff_matrix,part11,part12,part13,part1,s,ncholerr,diff_matrix1,temp1,temp2,Hess_veh;
    local part21,part22,part23,part24,part2,gradient,grad2_2,i1,j1,grad1_d,grad12,col_req,m1,m2,row_req,p4d,diff_matrix2;
	local p21,pmean,perr,smod,total_parm,Hess_out,x_id,grad1,grad2,grad,part3,part4,part34,grad1_1,grad2_1,perrd;
	local part14,part11_d,part12_d,part13_d,part14_d,part1d,part25,part25_d,part21_d,part22_d,part23_d,part24_d,part2d,part21e,part22e,part23e,part24e,part25e,part2e;
    
	d = rows(x);
    s = xpnd(r);
	ncholerr = d*(d+1)*0.5;
    p1  = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
    p2  = ((2*pi)^(d/2));
	p21 = ((2*pi)^(d/2))*sqrt(det(s));
    pmean   = p1/p21 ;
	perr    = p1/p2 ;
    p4 = inv(s);
	smod = det(s);
    total_parm = d + ncholerr ;
	Hess_out = zeros(total_parm,total_parm);
    
	for j(1,total_parm,1);
		for i(j,total_parm,1);
	        
			if(j <= d and i <= d);
			   
			   x_id = zeros(d,1);
			   x_id[i,1] = 1;
			   
			   grad1    = -1*((x-mu).*p4[.,j]);
			   grad12   = -1*((x-mu).*p4[.,i]);
               grad1_d  = -1*(x_id.*p4[.,j]);

               grad1   = sumc(grad1);
			   grad12  = sumc(grad12);
			   grad1_d = sumc(grad1_d);
			   		   
			   grad    = pmean*grad1*grad12 + pmean*grad1_d ;
		   
	        elseif(j > d and i > d);
		       
			   i1 = i - d;
			   j1 = j - d;
			   
			   diff_matrix1 = zeros(ncholerr,1);
			   diff_matrix1[j1,1]= 1;
			   diff_matrix1 = xpnd(diff_matrix1);
			   
			   part11 = p4*diff_matrix1;
               part12 = diag(part11);
               part13 = sumc(part12);
               part14 = -0.5*part13;
               part1 = part14/sqrt(det(s));
			   
			   diff_matrix2 = zeros(ncholerr,1);
			   diff_matrix2[i1,1]= 1;
			   diff_matrix2 = xpnd(diff_matrix2);
			   
			   part11_d   = -p4*diff_matrix2*p4*diff_matrix1;
               part12_d   = diag(part11_d);
               part13_d   = sumc(part12_d);
               part14_d   = -0.5*part13_d;
			   part1d     = sqrt(smod)*part14_d - part14*0.5*sqrt(smod)*sumc(diag(p4*diff_matrix2)) ;
			   part1d     = part1d/smod;
			   
			   
			   part21 = (((p4*(x-mu))*(x-mu)')*p4);
               part22 = part21*diff_matrix1;
               part23 = diag(part22);
               part24 = sumc(part23);
               part25 = 0.5*part24;
               part2 = part25/sqrt(det(s));
			   
			   part21_d = (-p4*diff_matrix2*p4*(x-mu)*(x-mu)'*p4) + (-p4*(x-mu)*(x-mu)'*p4*diff_matrix2*p4);
               part22_d = part21_d*diff_matrix1;
               part23_d = diag(part22_d);
               part24_d = sumc(part23_d);
               part25_d = 0.5*part24_d;
               part2d   = sqrt(smod)*part25_d - part25*0.5*sqrt(smod)*sumc(diag(p4*diff_matrix2)) ;
			   part2d   = part2d/smod;
			   
			   part21e = (((p4*(x-mu))*(x-mu)')*p4);
               part22e = part21e*diff_matrix2;
               part23e = diag(part22e);
               part24e = sumc(part23e);
               part25e = 0.5*part24e;
               part2e  = part25e*perr;
			   
			   grad    = perr*(part1d + part2d) + part2e*(part1 + part2);
		   
		   elseif(j <= d and i > d);
			   
			   if(i > d);
			      i1 = i - d;
			   else;
				  i1 = i ;
			   endif;
			  
			   diff_matrix1 = zeros(ncholerr,1);
			   diff_matrix1[i1,1]= 1;
			   diff_matrix1 = xpnd(diff_matrix1);
            
               part11 = p4*diff_matrix1;
               part12 = diag(part11);
               part13 = sumc(part12);
               part1 = -0.5*part13;
               part1 = part1/sqrt(det(s));
            
               part21 = (((p4*(x-mu))*(x-mu)')*p4);
               part22 = part21*diff_matrix1;
               part23 = diag(part22);
               part24 = sumc(part23);
               part2 = 0.5*part24;
               part2 = part2/sqrt(det(s));
               
			   x_id = zeros(d,1);
			   x_id[j,1] = 1;
			   
			   part21_d = p4*x_id*(x-mu)'*p4 + p4*(x-mu)*(x_id)'*p4;
               part22_d = part21_d*diff_matrix1;
               part23_d = diag(part22_d);
               part24_d = sumc(part23_d);
               part2d  = 0.5*part24_d;
               part2d   = part2d/sqrt(det(s));
			   
               perrd    =  -1*((x-mu).*p4[.,j]);
			   perrd    = sumc(perrd);
			   
			   grad     = perr*part2d + perr*perrd*(part1 + part2);
			   			   
		   endif;
		   
		   Hess_out[j,i] = grad;
		   Hess_out[i,j] = grad;
	    endfor;
    endfor;
    
	Hess_veh = {};
	for i(1,rows(Hess_out),1);
		Hess_veh = Hess_veh ~ Hess_out[i,i:cols(Hess_out)];
	endfor;
	
	retp(Hess_veh);
endp;

proc(4) = MVNcdfHess(a,corr,s);
    local prob,p_temp,i,VC_mat,cdf_diff,w,aa,ab,seedr,cm,r,xgrad,p1_dd,x_d,st_col,VC_mat_d,cdf_diffd,bvnd,ad,temp1,cmd,p_tempd,grad,row_req,callcntr;
    local ncholerr,cgrad,corrd,col_req,cgrad_arr,cgrad_up,total_parm,Hess_out,x_dj,x_di,f1_d,f2,f1_dd,f2_d,f2_dd,VC_mat_di,VC_mat_dj,VC_mat_dij,fake_prob;
	local cdf_diffdi,cdf_diffdj,cdf_diffdij,bvnd1,bvnd2,adi,adj,adij,tempi,tempj,tempij,cmdi,cmdj,cmdij,f1d,f2d,f3d,f1dd,f2dd,f3dd,p_tempdi,p_tempdij;
	local probkd,i1,j1,corrdj,corrdi,row_reqi,col_reqi,row_reqj,col_reqj,Hess_arr,Hess_outf,req_numparm,Hess_veh,Hess_out1,Hess_out2,Hess_out3,rnum,ss,a_arr,Preq;
	
	ncholerr = (cols(a)*(cols(a)+1))/2;
    total_parm = ncholerr + cols(a) ;
    callcntr = 0;
    Preq = 0;
    
    do until Preq > 0;
        w  = {};
        { rnum, ss } = rndn(1,cols(a),s);
        aa = seqa(1,1,cols(a))~(rnum)';
        aa = sortc(aa,2);
        w  = w|((aa[.,1])');
        w  = w';	
        s  = ss;	
            
        ab = a';
        a_arr  = ab[w];
        a_arr  = a_arr';
        r  = submat(corr,w,w);
              
        prob  = {};
        p_temp = cdfn(a_arr[1,1]);
        prob = prob | p_temp;
	
        /* Calculating Probability */
        for i(2,cols(a),1);
                
            VC_mat = zeros(i,i);
            cdf_diff = {};
            
            for k1(1,i,1);
                cdf_diff = cdf_diff | (1-cdfn(a_arr[1,k1])) ;
                for k2(k1,i,1);
                    VC_mat[k1,k2] = cdfbvn(a_arr[1,k1],a_arr[1,k2],r[k1,k2]) - ( cdfn(a_arr[1,k1])*cdfn(a_arr[1,k2]) ) ;
                    VC_mat[k2,k1] = VC_mat[k1,k2] ;
                endfor;
            endfor;
            
            trap 1;
            cm = invpd(VC_mat[1:i-1,1:i-1]);
            if scalerr(cm);
              cm=inv(VC_mat[1:i-1,1:i-1]);
            endif;
            trap 0;
            
            p_temp = cdfn(a_arr[1,i]) + ( VC_mat[i,1:i-1]*cm*cdf_diff[1:i-1,1] ) ;
            prob   = prob | p_temp;
        endfor;
	    Preq = prodc(prob);
        callcntr = callcntr + 1;
        
        if(callcntr > 25);
            Preq = 0.2;
        endif;
    endo;
    a     = a_arr;
    seedr = s ;
    
    if(prodc(prob) > 0.00001);
        /* Gradient w.r.t absicca elements */
        ThreadBegin;
        xgrad = Mean_cdfgrad(a,r,prob);
        ThreadEnd;
        
        /* Gradient w.r.t Correlation elements */
        ThreadBegin;
        cgrad = Rho_cdfgrad(a,r,prob);
        ThreadEnd;
        ThreadJoin;
        
        /* Hessian Calculation */
        ThreadBegin;
        Hess_out1 = MVNcdfhess_1(a,r,prob,xgrad,cgrad);	
        ThreadEnd;
        
        ThreadBegin;
        Hess_out2 = MVNcdfhess_2(a,r,prob,xgrad,cgrad);	
        ThreadEnd;
        
        ThreadBegin;
        Hess_out3 = MVNcdfhess_3(a,r,prob,xgrad,cgrad);	
        ThreadEnd;
        ThreadJoin;
        
        Hess_out = Hess_out1 + Hess_out2 + Hess_out3 ;
        clear Hess_out1,Hess_out2,Hess_out3;
	else;
        xgrad    = zeros(1,cols(a));
        cgrad    = zeros(cols(a),cols(a));
        Hess_out = zeros(total_parm,total_parm);
    endif;
    	
	grad = {};
	cgrad_arr = zeros(cols(a),cols(a));
	Hess_arr  = zeros(total_parm,total_parm);
	for i(1,cols(a),1);
		row_req = indexcat(w,i);
		grad    = grad ~ xgrad[1,row_req];
		cgrad_arr[i,row_req] = 1;
		Hess_arr[i,row_req]  = 1;
		Hess_arr[i+cols(a),cols(a)+row_req] = 1;
	endfor;
	cgrad     = cgrad_arr*cgrad*cgrad_arr';
	cgrad_up  = upmat(cgrad);
	Hess_outf = Hess_arr*Hess_out*Hess_arr';
	
	req_numparm = ones(cols(a),1);
	for i(1,cols(a),1);
		for j(1,i,1);
			if(i == j);
				req_numparm = req_numparm | 0;
			else;
				req_numparm = req_numparm | 1;
			endif;
		endfor;
	endfor;
	
	Hess_outf = selif(Hess_outf,req_numparm);
	Hess_outf = Hess_outf';
	Hess_outf = selif(Hess_outf,req_numparm);
	Hess_outf = Hess_outf';
	
	for i(1,cols(a)-1,1);
	     grad    = grad ~ cgrad_up[i,i+1:cols(a)] ;
	endfor;
	
	Hess_veh = {};	
	for i(1,rows(Hess_outf),1);
	    	Hess_veh = Hess_veh ~ Hess_outf[i,i:cols(Hess_outf)];
	endfor;
			
	if(prodc(prob) > 0.00001);	
	    retp(prodc(prob),grad,Hess_veh,seedr);
    else;
        fake_prob = 1e-05;
        retp(fake_prob,grad,Hess_veh,seedr);
    endif;
endp;

proc(1)=Mean_cdfgrad(a,r,prob);
	local p1_dd,x_d,st_col,j,VC_mat,cdf_diff,VC_mat_d,cdf_diffd,k1,k2,bvnd,ad,temp1,cmd,cm,p_tempd,xgradient;
	
	xgradient = {};
	for i(1,cols(a),1);
		p1_dd = 0;
		x_d   = zeros(1,cols(a));
		x_d[1,i] = 1;
		
		if(i==1);
			p1_dd    = p1_dd + (pdfn(a[1,1])*x_d[1,1])*(prodc(prob)/prob[i,1]) ;
			st_col   = i + 1;
		else;
			st_col   = i;
		endif;
		
		
		for j(st_col,cols(a),1);
		
			VC_mat = zeros(j,j);
		    cdf_diff = {};
			VC_mat_d = zeros(j,j);
			cdf_diffd = {};
			
			for k1(1,j,1);
				cdf_diff  = cdf_diff  | (1-cdfn(a[1,k1])) ;
				cdf_diffd = cdf_diffd | (-pdfn(a[1,k1])*x_d[1,k1]) ;
				for k2(k1,j,1);
					
					VC_mat[k1,k2] = cdfbvn(a[1,k1],a[1,k2],r[k1,k2]) - ( cdfn(a[1,k1])*cdfn(a[1,k2]) ) ;
				    VC_mat[k2,k1] = VC_mat[k1,k2] ;
					
					if(k1 ne k2);
					  bvnd  = cdfbvn_grad(a[1,k1],a[1,k2],r[k1,k2]) ;
					  ad    = x_d[1,k1]|x_d[1,k2]|0;
				    else;
					  bvnd  = (pdfn(a[1,k1])|0|0);
					  ad    = x_d[1,k1]|0|0;
					endif;
					
					temp1 = sumc(bvnd .* ad) ;
					
					VC_mat_d[k1,k2] = temp1 - (pdfn(a[1,k1])*x_d[1,k1]*cdfn(a[1,k2])) - (cdfn(a[1,k1])*pdfn(a[1,k2])*x_d[1,k2]);
					VC_mat_d[k2,k1] = VC_mat_d[k1,k2] ;
				endfor;
			endfor;
			
			cmd = VC_mat_d[1:j-1,1:j-1];
			
			trap 1;
			cm = invpd(VC_mat[1:j-1,1:j-1]);
			if scalerr(cm);
			  cm  = inv(VC_mat[1:j-1,1:j-1]);
			endif;
			trap 0;
			
			p_tempd = (pdfn(a[1,j])*x_d[1,j]) + (VC_mat_d[j,1:j-1]*cm*cdf_diff[1:j-1,1]) -  (VC_mat[j,1:j-1]*cm*cmd*cm*cdf_diff[1:j-1,1]) + (VC_mat[j,1:j-1]*cm*cdf_diffd[1:j-1,1]);
			p1_dd   = p1_dd + ((p_tempd*prodc(prob))/prob[j,1]);
		endfor;
		xgradient = xgradient ~ p1_dd ;
	endfor;
	retp(xgradient);
endp;

proc(1)=Rho_cdfgrad(a,r,prob);
	local cgradient,i,p1_dd,corrd,m1,m2,row_req,col_req,j,VC_mat,cdf_diff,VC_mat_d,cdf_diffd,k1,k2,bvnd,ad,temp1,cmd,cm,p_tempd,ncholerr; 
	
	cgradient = zeros(cols(a),cols(a));
    ncholerr  = (cols(a)*(cols(a)+1))/2;
	for i(1,ncholerr,1);
		p1_dd = 0;
		corrd      = zeros(ncholerr,1);
		corrd[i,1] = 1;
		corrd      = xpnd(corrd);
		
		for m1(1,rows(corrd),1);
			for m2(1,m1,1);
				if(corrd[m1,m2] == 1);
					row_req = m1;
					col_req = m2;
					break;
			    endif;
			endfor;
		endfor;
		
		if(row_req ne col_req);
		for j(2,cols(a),1);
		
			VC_mat = zeros(j,j);
		    cdf_diff = {};
			VC_mat_d = zeros(j,j);
			
			
			for k1(1,j,1);
				cdf_diff  = cdf_diff  | (1-cdfn(a[1,k1])) ;
				for k2(k1,j,1);
					
					VC_mat[k1,k2] = cdfbvn(a[1,k1],a[1,k2],r[k1,k2]) - ( cdfn(a[1,k1])*cdfn(a[1,k2]) ) ;
				    VC_mat[k2,k1] = VC_mat[k1,k2] ;
					
					if(k1 ne k2);
					  bvnd  = cdfbvn_grad(a[1,k1],a[1,k2],r[k1,k2]) ;
					  ad    = 0|0|corrd[k1,k2];
				    else;
					  bvnd  = (pdfn(a[1,k1])|0|0);
					  ad    = 0|0|0;
					endif;
					
					temp1 = sumc(bvnd .* ad) ;
					
					VC_mat_d[k1,k2] = temp1 ;
					VC_mat_d[k2,k1] = VC_mat_d[k1,k2] ;
				endfor;
			endfor;
			
			cmd = VC_mat_d[1:j-1,1:j-1];
			
			trap 1;
			cm = invpd(VC_mat[1:j-1,1:j-1]);
			if scalerr(cm);
			  cm  = inv(VC_mat[1:j-1,1:j-1]);
			endif;
			trap 0;
			
			p_tempd = (VC_mat_d[j,1:j-1]*cm*cdf_diff[1:j-1,1]) -  (VC_mat[j,1:j-1]*cm*cmd*cm*cdf_diff[1:j-1,1]) ;
			p1_dd   = p1_dd + ((p_tempd*prodc(prob))/prob[j,1]);
		endfor;
		cgradient[row_req,col_req] = p1_dd ;
		cgradient[col_req,row_req] = p1_dd ;
		endif;
	endfor;
	retp(cgradient);
endp;

proc(1)=MVNcdfhess_1(a,r,prob,xgrad,cgrad);	
	local ncholerr,total_parm,Hess_out,i,j,p1_dd,x_dj,x_di,f1_d,f2,f1_dd,f2_d,f2_dd,st_col,k,VC_mat,cdf_diff,VC_mat_di,VC_mat_dj,VC_mat_dij;
	local cdf_diffdi,cdf_diffdj,cdf_diffdij,k1,bvnd1,bvnd2,adi,adj,adij,tempi,tempj,tempij,cmdi,cmdj,cmdij,f1d,f2d,f3d,f1dd,f2dd,f3dd,p_tempdi;
	local p_tempdij,probkd,cm;
	
	ncholerr = (cols(a)*(cols(a)+1))/2;
	total_parm = ncholerr + cols(a) ;
	Hess_out = zeros(total_parm,total_parm);
	for i(1,total_parm,1);
		for j(i,total_parm,1);
			
			if(i <= cols(a) and j <= cols(a));
			      
				    p1_dd     = 0;
					x_dj      = zeros(1,cols(a));
					x_dj[1,j] = 1;
					
					x_di      = zeros(1,cols(a));
					x_di[1,i] = 1;
					
					if(i==1 );
						f1_d     =  pdfn(a[1,1])*x_di[1,1];
						f2       =  prodc(prob)/prob[i,1];
						f1_dd    =  pdfnd(a[1,1])*x_dj[1,1]*x_di[1,1]*f2;
						f2_dd    = ( (prob[i,1]*xgrad[1,j]) - (prodc(prob)*pdfn(a[1,1])*x_dj[1,1]) ) / (prob[i,1]^2);
						f2_dd    =  f2_dd*f1_d;   
						p1_dd    = p1_dd + f1_dd + f2_dd ;
						st_col   = i+1;
					else;
						st_col   = i;
					endif;
					
					
					for k(st_col,cols(a),1);
					    
						VC_mat = zeros(k,k);
						cdf_diff = {};
						
						VC_mat_di  = zeros(k,k);
						VC_mat_dj  = zeros(k,k);
						VC_mat_dij = zeros(k,k);
						
						cdf_diffdi  = {};
						cdf_diffdj  = {};
						cdf_diffdij = {};
						
						for k1(1,k,1);
							cdf_diff    = cdf_diff     | (1-cdfn(a[1,k1])) ;
							cdf_diffdi  = cdf_diffdi   | (-pdfn(a[1,k1])*x_di[1,k1]) ;
							cdf_diffdj  = cdf_diffdj   | (-pdfn(a[1,k1])*x_dj[1,k1]) ;
							cdf_diffdij = cdf_diffdij  | (-pdfnd(a[1,k1])*x_dj[1,k1]*x_di[1,k1]) ;
							
							for k2(k1,k,1);
								
								VC_mat[k1,k2] = cdfbvn(a[1,k1],a[1,k2],r[k1,k2]) - ( cdfn(a[1,k1])*cdfn(a[1,k2]) ) ;
								VC_mat[k2,k1] = VC_mat[k1,k2] ;
								
								if(k1 ne k2);
								  bvnd1  = cdfbvn_grad(a[1,k1],a[1,k2],r[k1,k2]) ;
								  bvnd2  = cdfbvn_Hess(a[1,k1],a[1,k2],r[k1,k2]) ;
								  adi    = x_di[1,k1]|x_di[1,k2]|0;
								  adij   = (x_di[1,k1]*x_dj[1,k1])| (x_di[1,k1]*x_dj[1,k2]) | 0 | (x_di[1,k2]*x_dj[1,k2]) | 0 | 0 ;
								  adj    = x_dj[1,k1]|x_dj[1,k2]|0;
								else;
								  bvnd1  = (pdfn(a[1,k1])|0|0);
								  bvnd2  = (pdfnd(a[1,k1])|0|0);
								  adi    = x_di[1,k1]|0|0;
								  adij   = (x_di[1,k1]*x_dj[1,k1])|0|0;
								  adj    = x_dj[1,k1]|0|0;
								endif;
								
								tempi  = sumc(bvnd1 .* adi) ;
								tempj  = sumc(bvnd1 .* adj) ;
								tempij = sumc(bvnd2 .* adij) ;
															
								VC_mat_di[k1,k2] = tempi - (pdfn(a[1,k1])*x_di[1,k1]*cdfn(a[1,k2])) - (cdfn(a[1,k1])*pdfn(a[1,k2])*x_di[1,k2]);
								if(k1 ne k2);
								VC_mat_di[k2,k1] = VC_mat_di[k1,k2] ;
								endif;
								
								VC_mat_dj[k1,k2] = tempj - (pdfn(a[1,k1])*x_dj[1,k1]*cdfn(a[1,k2])) - (cdfn(a[1,k1])*pdfn(a[1,k2])*x_dj[1,k2]);
								if(k1 ne k2);
								VC_mat_dj[k2,k1] = VC_mat_dj[k1,k2] ;
								endif;
								
								VC_mat_dij[k1,k2] = tempij - (pdfnd(a[1,k1])*x_dj[1,k1]*x_di[1,k1]*cdfn(a[1,k2])) - (pdfn(a[1,k1])*x_di[1,k1]*pdfn(a[1,k2])*x_dj[1,k2]) - (pdfn(a[1,k1])*x_dj[1,k1]*pdfn(a[1,k2])*x_di[1,k2]) - (cdfn(a[1,k1])*pdfnd(a[1,k2])*x_dj[1,k2]*x_di[1,k2]);
								if(k1 ne k2);
								VC_mat_dij[k2,k1] = VC_mat_dij[k1,k2] ;
							    endif;
							endfor;
						endfor;
						
						cmdi  = VC_mat_di[1:k-1,1:k-1];
						cmdj  = VC_mat_dj[1:k-1,1:k-1];
						cmdij = VC_mat_dij[1:k-1,1:k-1];
						
												
						trap 1;
						cm = invpd(VC_mat[1:k-1,1:k-1]);
						if scalerr(cm);
						  cm  = inv(VC_mat[1:k-1,1:k-1]);
						endif;
						trap 0;
						
						f1d       = (VC_mat_di[k,1:k-1]*cm*cdf_diff[1:k-1,1]) ;
						f2d       = (VC_mat[k,1:k-1]*cm*cmdi*cm*cdf_diff[1:k-1,1]);
						f3d       = (VC_mat[k,1:k-1]*cm*cdf_diffdi[1:k-1,1]) ;
						
						f1dd       = (VC_mat_dij[k,1:k-1]*cm*cdf_diff[1:k-1,1]) -  (VC_mat_di[k,1:k-1]*cm*cmdj*cm*cdf_diff[1:k-1,1]) + (VC_mat_di[k,1:k-1]*cm*cdf_diffdj[1:k-1,1]) ;
						f2dd       = (VC_mat_dj[k,1:k-1]*cm*cmdi*cm*cdf_diff[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdj*cm*cmdi*cm*cdf_diff[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdi*cm*cmdj*cm*cdf_diff[1:k-1,1]) + (VC_mat[k,1:k-1]*cm*cmdij*cm*cdf_diff[1:k-1,1]) + (VC_mat[k,1:k-1]*cm*cmdi*cm*cdf_diffdj[1:k-1,1]) ;
						f3dd       = (VC_mat_dj[k,1:k-1]*cm*cdf_diffdi[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdj*cm*cdf_diffdi[1:k-1,1]) + (VC_mat[k,1:k-1]*cm*cdf_diffdij[1:k-1,1]) ;
						
						p_tempdi  = (pdfn(a[1,k])*x_di[1,k]) +  f1d - f2d + f3d ;
						p_tempdij = (pdfnd(a[1,k])*x_dj[1,k]*x_di[1,k]) + f1dd - f2dd + f3dd ;
						 
						probkd    = (pdfn(a[1,k])*x_dj[1,k]) + (VC_mat_dj[k,1:k-1]*cm*cdf_diff[1:k-1,1]) -  (VC_mat[k,1:k-1]*cm*cmdj*cm*cdf_diff[1:k-1,1]) + (VC_mat[k,1:k-1]*cm*cdf_diffdj[1:k-1,1]);
						
						f1_d     =  p_tempdi;
						f2       =  prodc(prob)/prob[k,1];
						
						f1_dd    =  p_tempdij*f2;
						f2_d     = ( prob[k,1]*xgrad[1,j] - prodc(prob)*probkd ) / (prob[k,1]^2);
						f2_dd    = f2_d*f1_d;
						
						p1_dd    = p1_dd + f1_dd + f2_dd ;
					    
						
					endfor;
			
			        Hess_out[i,j] = p1_dd;
					if( i ne j);
						Hess_out[j,i] = p1_dd;
				    endif;
			endif;
		 endfor;
	endfor;
	retp(Hess_out);
endp;

			
proc(1)=MVNcdfhess_2(a,r,prob,xgrad,cgrad);	
	local ncholerr,total_parm,Hess_out,i,j,p1_dd,x_dj,x_di,f1_d,f2,f1_dd,f2_d,f2_dd,st_col,k,VC_mat,cdf_diff,VC_mat_di,VC_mat_dj,VC_mat_dij;
	local cdf_diffdi,cdf_diffdj,cdf_diffdij,k1,bvnd1,bvnd2,adi,adj,adij,tempi,tempj,tempij,cmdi,cmdj,cmdij,f1d,f2d,f3d,f1dd,f2dd,f3dd,p_tempdi;
	local p_tempdij,probkd,i1,j1,corrdj,corrdi,row_reqi,col_reqi,row_reqj,col_reqj,cm;
	
	ncholerr = (cols(a)*(cols(a)+1))/2;
	total_parm = ncholerr + cols(a) ;
	Hess_out = zeros(total_parm,total_parm);
	for i(1,total_parm,1);
		for j(i,total_parm,1);			
		    if(i > cols(a) and j > cols(a));
			       
				   i1 = i - cols(a);
				   j1 = j - cols(a);
				   
				   p1_dd        = 0;
				   corrdj       = zeros(ncholerr,1);
				   corrdj[j1,1] = 1;
				   corrdj       = xpnd(corrdj);
				
				   corrdi       = zeros(ncholerr,1);
				   corrdi[i1,1] = 1;
				   corrdi       = xpnd(corrdi);
				   
				   for m1(1,rows(corrdi),1);
					   for m2(1,m1,1);
						   if(corrdi[m1,m2] == 1);
							  row_reqi = m1;
							  col_reqi = m2;
							  break;
						   endif;
					   endfor;
				   endfor;
				   
				   for m1(1,rows(corrdj),1);
					   for m2(1,m1,1);
						   if(corrdj[m1,m2] == 1);
							  row_reqj = m1;
							  col_reqj = m2;
							  break;
						   endif;
					   endfor;
				   endfor;
				                      
				    if( ((sumc(sumc(corrdj))) ne 1) and  ((sumc(sumc(corrdi))) ne 1) );
					for k(2,cols(a),1);
					
						VC_mat = zeros(k,k);
						cdf_diff = {};
						
						VC_mat_di  = zeros(k,k);
						VC_mat_dj  = zeros(k,k);
						VC_mat_dij = zeros(k,k);
						
						for k1(1,k,1);
						    cdf_diff  = cdf_diff  | (1-cdfn(a[1,k1])) ;
							for k2(k1,k,1);
								
								VC_mat[k1,k2] = cdfbvn(a[1,k1],a[1,k2],r[k1,k2]) - ( cdfn(a[1,k1])*cdfn(a[1,k2]) ) ;
								VC_mat[k2,k1] = VC_mat[k1,k2] ;
								
								if(k1 ne k2);
								  bvnd1  = cdfbvn_grad(a[1,k1],a[1,k2],r[k1,k2]) ;
								  bvnd2  = cdfbvn_Hess(a[1,k1],a[1,k2],r[k1,k2]) ;
								  adi    = 0|0|corrdi[k1,k2];
								  adij   = 0|0|0|0|0|(corrdi[k1,k2]*corrdj[k1,k2]) ;
								  adj    = 0|0|corrdj[k1,k2];
								  tempi  = sumc(bvnd1 .* adi) ;
								  tempj  = sumc(bvnd1 .* adj) ;
								  tempij = sumc(bvnd2 .* adij) ;
								else;
								  tempi  = 0 ;
								  tempj  = 0 ;
								  tempij = 0 ;
								endif;
								
															
								VC_mat_di[k1,k2] = tempi ;
								if(k1 ne k2);
								VC_mat_di[k2,k1] = VC_mat_di[k1,k2] ;
								endif;
								
								VC_mat_dj[k1,k2] = tempj ;
								if(k1 ne k2);
								VC_mat_dj[k2,k1] = VC_mat_dj[k1,k2] ;
								endif;
								
								VC_mat_dij[k1,k2] = tempij ;
								if(k1 ne k2);
								VC_mat_dij[k2,k1] = VC_mat_dij[k1,k2] ;
							    endif;
						   endfor;
					   endfor;
						
						cmdi  = VC_mat_di[1:k-1,1:k-1];
						cmdj  = VC_mat_dj[1:k-1,1:k-1];
						cmdij = VC_mat_dij[1:k-1,1:k-1];
						
						trap 1;
						cm = invpd(VC_mat[1:k-1,1:k-1]);
						if scalerr(cm);
						  cm  = inv(VC_mat[1:k-1,1:k-1]);
						endif;
						trap 0;
						
						f1d = (VC_mat_di[k,1:k-1]*cm*cdf_diff[1:k-1,1]) ;
						f2d = (VC_mat[k,1:k-1]*cm*cmdi*cm*cdf_diff[1:k-1,1]) ;
						
						f1dd = (VC_mat_dij[k,1:k-1]*cm*cdf_diff[1:k-1,1]) -  (VC_mat_di[k,1:k-1]*cm*cmdj*cm*cdf_diff[1:k-1,1]) ;
						f2dd = (VC_mat_dj[k,1:k-1]*cm*cmdi*cm*cdf_diff[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdj*cm*cmdi*cm*cdf_diff[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdi*cm*cmdj*cm*cdf_diff[1:k-1,1]) + (VC_mat[k,1:k-1]*cm*cmdij*cm*cdf_diff[1:k-1,1]) ;
						
						p_tempdi  = f1d - f2d ;
						p_tempdij = f1dd - f2dd ;
						
						probkd    = (VC_mat_dj[k,1:k-1]*cm*cdf_diff[1:k-1,1]) -  (VC_mat[k,1:k-1]*cm*cmdj*cm*cdf_diff[1:k-1,1]) ;
						
						f1_d     =  p_tempdi;
						f2       =  prodc(prob)/prob[k,1];
						
						f1_dd    =  p_tempdij*f2;
						f2_d     = ( prob[k,1]*cgrad[row_reqj,col_reqj] - prodc(prob)*probkd ) / (prob[k,1]^2);
						f2_dd    = f2_d*f1_d;
						
						p1_dd    = p1_dd + f1_dd + f2_dd ;
										
					endfor;
				    endif;
                    Hess_out[i,j] = p1_dd;
					if( i ne j);
						Hess_out[j,i] = p1_dd;
				    endif;
			endif;
		 endfor;
	endfor;
	retp(Hess_out);
endp;
			
			
proc(1)=MVNcdfhess_3(a,r,prob,xgrad,cgrad);	
	local ncholerr,total_parm,Hess_out,i,j,p1_dd,x_dj,x_di,f1_d,f2,f1_dd,f2_d,f2_dd,st_col,k,VC_mat,cdf_diff,VC_mat_di,VC_mat_dj,VC_mat_dij;
	local cdf_diffdi,cdf_diffdj,cdf_diffdij,k1,bvnd1,bvnd2,adi,adj,adij,tempi,tempj,tempij,cmdi,cmdj,cmdij,f1d,f2d,f3d,f1dd,f2dd,f3dd,p_tempdi;
	local p_tempdij,probkd,i1,j1,corrdj,corrdi,row_reqi,col_reqi,row_reqj,col_reqj,cm;
	
	ncholerr = (cols(a)*(cols(a)+1))/2;
	total_parm = ncholerr + cols(a) ;
	Hess_out = zeros(total_parm,total_parm);
	for i(1,total_parm,1);
		for j(i,total_parm,1);				
			if(i <= cols(a) and j > cols(a));
				
				p1_dd     = 0;
				x_di      = zeros(1,cols(a));
				x_di[1,i] = 1;
				
				j1 = j - cols(a);
				   
				corrdj       = zeros(ncholerr,1);
				corrdj[j1,1] = 1;
				corrdj       = xpnd(corrdj);
				
				for m1(1,rows(corrdj),1);
					for m2(1,m1,1);
					   if(corrdj[m1,m2] == 1);
						  row_reqj = m1;
						  col_reqj = m2;
						  break;
					   endif;
					endfor;
				endfor;
				
				if( ((sumc(sumc(corrdj))) ne 1) );
				if(i==1);
					f1_d     =  pdfn(a[1,1])*x_di[1,1];
					f2       =  prodc(prob)/prob[i,1];
					f1_dd    =  0;
					f2_dd    =  cgrad[row_reqj,col_reqj]/prob[i,1];  
					f2_dd    =  f2_dd*f1_d; 
					p1_dd    =  p1_dd + f1_dd + f2_dd ;
					st_col   =  i + 1;
				else;
					st_col   = i;
				endif;
				
				
				for k(st_col,cols(a),1);
				
					VC_mat = zeros(k,k);
					cdf_diff = {};
						
					VC_mat_di  = zeros(k,k);
					VC_mat_dj  = zeros(k,k);
					VC_mat_dij = zeros(k,k);
						
					cdf_diffdi  = {};
					
					for k1(1,k,1);
							cdf_diff    = cdf_diff     | (1-cdfn(a[1,k1])) ;
							cdf_diffdi  = cdf_diffdi   | (-pdfn(a[1,k1])*x_di[1,k1]) ;
														
							for k2(k1,k,1);
								
								VC_mat[k1,k2] = cdfbvn(a[1,k1],a[1,k2],r[k1,k2]) - ( cdfn(a[1,k1])*cdfn(a[1,k2]) ) ;
								VC_mat[k2,k1] = VC_mat[k1,k2] ;
								
								if(k1 ne k2);
								  bvnd1  = cdfbvn_grad(a[1,k1],a[1,k2],r[k1,k2]) ;
								  bvnd2  = cdfbvn_Hess(a[1,k1],a[1,k2],r[k1,k2]) ;
								  adi    = x_di[1,k1]|x_di[1,k2]|0;
								  adij   = 0|0|(x_di[1,k1]*corrdj[k1,k2])|0|(x_di[1,k2]*corrdj[k1,k2])|0 ;
								  adj    = 0|0|corrdj[k1,k2];
								  tempi  = sumc(bvnd1 .* adi) ;
								  tempj  = sumc(bvnd1 .* adj) ;
								  tempij = sumc(bvnd2 .* adij) ;
								else;
								  bvnd1  = (pdfn(a[1,k1])|0|0);
								  bvnd2  = (pdfnd(a[1,k1])|0|0);
								  adi    = x_di[1,k1]|0|0;
								  adij   = (x_di[1,k1]*x_di[1,k1])|0|0;
								  adj    = 0|0|0;
								  tempi  = sumc(bvnd1 .* adi) ;
								  tempj  = 0;
								  tempij = 0;
								endif;
								
								VC_mat_di[k1,k2] = tempi - (pdfn(a[1,k1])*x_di[1,k1]*cdfn(a[1,k2])) - (cdfn(a[1,k1])*pdfn(a[1,k2])*x_di[1,k2]);
								if(k1 ne k2);
								VC_mat_di[k2,k1] = VC_mat_di[k1,k2] ;
								endif;
								
								VC_mat_dj[k1,k2] = tempj ;
								if(k1 ne k2);
								VC_mat_dj[k2,k1] = VC_mat_dj[k1,k2] ;
								endif;
								
								VC_mat_dij[k1,k2] = tempij ;
								if(k1 ne k2);
								VC_mat_dij[k2,k1] = VC_mat_dij[k1,k2] ;
							    endif;
							endfor;
					endfor;
					
					cmdi  = VC_mat_di[1:k-1,1:k-1];
					cmdj  = VC_mat_dj[1:k-1,1:k-1];
					cmdij = VC_mat_dij[1:k-1,1:k-1];
					
					trap 1;
					cm = invpd(VC_mat[1:k-1,1:k-1]);
					if scalerr(cm);
					  cm  = inv(VC_mat[1:k-1,1:k-1]);
					endif;
					trap 0;
					
					f1d       = (VC_mat_di[k,1:k-1]*cm*cdf_diff[1:k-1,1]) ;
					f2d       = (VC_mat[k,1:k-1]*cm*cmdi*cm*cdf_diff[1:k-1,1]);
					f3d       = (VC_mat[k,1:k-1]*cm*cdf_diffdi[1:k-1,1]) ;
					
					f1dd      = (VC_mat_dij[k,1:k-1]*cm*cdf_diff[1:k-1,1]) - (VC_mat_di[k,1:k-1]*cm*cmdj*cm*cdf_diff[1:k-1,1]) ;
					f2dd      = (VC_mat_dj[k,1:k-1]*cm*cmdi*cm*cdf_diff[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdj*cm*cmdi*cm*cdf_diff[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdi*cm*cmdj*cm*cdf_diff[1:k-1,1]) + (VC_mat[k,1:k-1]*cm*cmdij*cm*cdf_diff[1:k-1,1]);
					f3dd      = (VC_mat_dj[k,1:k-1]*cm*cdf_diffdi[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdj*cm*cdf_diffdi[1:k-1,1]) ;
						
					p_tempdi  = (pdfn(a[1,k])*x_di[1,k]) +  f1d - f2d + f3d ;
					p_tempdij = f1dd - f2dd + f3dd ;
					
					probkd    = (VC_mat_dj[k,1:k-1]*cm*cdf_diff[1:k-1,1]) -  (VC_mat[k,1:k-1]*cm*cmdj*cm*cdf_diff[1:k-1,1]);
						
					f1_d     =  p_tempdi;
					f2       =  prodc(prob)/prob[k,1];
						
					f1_dd    =  p_tempdij*f2;
					f2_d     = ( prob[k,1]*cgrad[row_reqj,col_reqj] - prodc(prob)*probkd ) / (prob[k,1]^2);
					f2_dd    = f2_d*f1_d;
						
					p1_dd    = p1_dd + f1_dd + f2_dd ;
			    endfor;
				endif;
						
			Hess_out[i,j] = p1_dd;
			if( i ne j);
			  Hess_out[j,i] = p1_dd;
		    endif;
			endif;	
		 endfor;
	endfor;
	retp(Hess_out);
endp;

 proc(1)= pdfnd(x);
    local d,p,p1,p2,p3,grad1,grad,store,ie;
	 p1 = exp(-0.5*x*x);
	 p2 = sqrt(2*pi);
	 p  = p1/p2;
	 store = -p*x;
	 retp(store);
 endp;

proc(1) = HaltonSequence(n,dim);
	local prim,hs,idim,b,idx;
	prim = { 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 
		     283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 };
	hs = zeros(n,dim);
    for idim(1,dim,1);
	  b = prim[1,idim];
	  hs[.,idim] = halton(n,b);
	endfor;
    retp(hs[11:n,1:dim]);
endp;

proc(1)= halton(n,s);
local phi,i,j,y,x,k;
k=floor(ln(n+1) ./ ln(s));    
phi={0};
i=1;
do while i .le k;  
  x=phi;
   j=1;
  do while j .lt s;
     y=phi+(j/s^i);
     x=x|y;
     j=j+1;
  endo;
  phi=x;
  i=i+1;
endo;
 
x=phi;
 j=1;
do while j .lt s .and rows(x) .lt (n+1);  
   y=phi+(j/s^i);
   x=x|y;
   j=j+1;
 endo;

phi=x[2:(n+1),1];  
retp(phi);
endp;
